<?xml version="1.0" encoding="utf-8"?>
<schemaSpec ident="rhb">
  <!--
Defaults:
   * if no <process> for any given mode, emit textual content
   * if no @context, means any use of this element
   * <process> rules are additive, not alternates
   * @style defaults to element name (equates to HTML @class or Word style)
   * @mode defaults to 'render' (????)
   * by default, @rendition and @style are ignored. you can write a mode
	which follows the rendition
-->
  <rendition xml:id="altdate" scheme="css">
  color: red;
</rendition>
  <elementSpec ident="date">
    <process context="not(parent::person) and (@when or @when-custom)" name="makeMarginalNote(if (@when-custom) then @when-custom else @when)" mode="render" class="altdate"/>
    <process name="makeInline" content="." mode="render"/>
    <process name="makeInline" content="@when" mode="textextract"/>
  </elementSpec>
  <elementSpec ident="hi">
    <process name="makeInline(.)" followRendition="true" mode="render"/>
  </elementSpec>
  <elementSpec ident="speaker">
    <process name="makeInline(.)" mode="render"/>
  </elementSpec>
  <elementSpec ident="choice">
    <process context="not(ancestor::front) and corr and sic" name="makeInline(sic)" mode="render"/>
    <process context="corr and sic" name="makeMarginalNote(corr)" mode="render"/>
    <process context="ancestor::front and (corr and sic)" name="makeLinkedMarginalNote(corr,sic)" mode="render"/>
    <process context="corr and sic" name="makeInline(corr)" mode="textextract"/>
  </elementSpec>
  <elementSpec ident="gap">
    <process mode="textextract"/>
  </elementSpec>
  <elementSpec ident="note">
    <process context="@type='ed'" mode="textextract"/>
  </elementSpec>
  <elementSpec ident="head">
    <process context="parent::list" name="makeBlock" mode="render"/>
  </elementSpec>
  <elementSpec ident="list">
    <process context="@rend='ordered'" name="makeOrderedList(.)" mode="render"/>
  </elementSpec>
  <elementSpec ident="gi">
    <process name="makeInline(,)" mode="render" class="gi"/>
  </elementSpec>
  <elementSpec indent="name">
    <process name="makeInline(.)"/>
  </elementSpec>
  <!--
  <process name="makeInline(.)"
	   context="*[parent::p]"/>
-->
</schemaSpec>
