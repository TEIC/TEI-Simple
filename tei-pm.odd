<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI ODD extensions for processing models</title>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI Consortium</publisher>
        <availability>
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed under a Creative Commons
            Attribution-ShareAlike 3.0 Unported License </licence>
          <licence target="http://www.opensource.org/licenses/BSD-2-Clause">
            <p>Copyright 2015 TEI Consortium.</p>
            <p>All rights reserved.</p>
            <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided
              that the following conditions are met:</p>
            <list>
              <item>Redistributions of source code must retain the above copyright notice, this list of conditions and
                the following disclaimer.</item>
              <item>Redistributions in binary form must reproduce the above copyright notice, this list of conditions
                and the following disclaimer in the documentation and/or other materials provided with the
                distribution.</item>
            </list>
            <p>This software is provided by the copyright holders and contributors "as is" and any express or implied
              warranties, including, but not limited to, the implied warranties of merchantability and fitness for a
              particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for
              any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited
              to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption)
              however caused and on any theory of liability, whether in contract, strict liability, or tort (including
              negligence or otherwise) arising in any way out of the use of this software, even if advised of the
              possibility of such damage.</p>
          </licence>
          <p>TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made
            available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages
            which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of
            TEI content in a software environment. For further information or clarification, please contact the <ref target="mailto:info@tei-c.org">TEI Consortium</ref>. </p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>created ab initio during a meeting in Oxford</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <titlePage>
        <docTitle>
          <titlePart type="main">TEI ODD extensions for processing models</titlePart>
        </docTitle>
        <docAuthor>Sebastian Rahtz</docAuthor>
        <docAuthor>Brian Pytlik Zillig</docAuthor>
        <docAuthor>James Cummings</docAuthor>
        <docAuthor>Magdalena Turska</docAuthor>
        <docDate>Version 0.3: 24th May 2015</docDate>
      </titlePage>
    </front>
    <body>
      <div>
        <head>The TEI Processing Model</head>
        <div>
          <head>Introduction</head>
          <p>TEI elements are generally
	<emph>descriptive</emph> of the interpreted semantics of the
	source text (<q>this is a title</q>, <q>this is a
	quotation</q>), where the interpretation is often based on a
	human interpretation of layout. The <att>rend</att>,
	<att>rendition</att> and <att>style</att> attributes
	are sometimes, but not necessarily, used to describe that
	layout. The resulting encoded text is very amenable to
	analysis, but for the common case of re-presenting the text on
	the web or in print as a digital edition, the TEI model by itself is incomplete.</p>
          <p>The processing model notation allows each element to be
        assigned to a structural category (<gi>model</gi>), and given
        an outline rendition description (<gi>rendition</gi>). This
        allows a processor to know whether to handle the element or
        not, and broadly speaking how to display or otherwise process
        it. The model and rendition instructions are part of the 
        TEI ODD, so can be changed in TEI customizations in the normal
	  way.</p>
	  <p><figure><graphic url="SPM2.png"/><head>Processing model workflow</head></figure></p>
          <p>This method of working (known informally as the Rahtz Rationale) assumes a workflow with three parts, and three
	distinct roles, to create a digital edition from a TEI text:
	<list rend="ordered"><item>an <emph>editor</emph> manages the text integrity,
	  makes the high-level output decisions. These 	fall into two parts
	<list rend="ordered"><item><emph>Structural</emph> descriptions, eg  <q>should the
	  original or corrected version be displayed by default</q>,
	  or <q>is this a block level or inline component</q></item><item>Indications of <emph>appearance</emph> (<q>titles are in
	  italics</q>).</item></list>
	  </item><item>a <emph>designer</emph> creates the output envelope (for
	  example, and book layout using InDesign, or a web site using
	  Drupal), making decisions in conjunction with the editor
	  (<q>use Garamond font throughout</q> or <q>every page must
	  show the departmental logo</q>)</item><item>a <emph>programmer</emph> takes the
	  <emph>editor</emph>'s specification, and the TEI text(s),
	  and creates the input for the <emph>designer</emph> to make
	  the output.</item></list>
	It is crucial to understand here that neither the designer nor
	the programmer need have any understanding of the semantics of
	TEI elements, or the structure of a TEI document. The
	programmer, particularly, can use the processing model rules
	to extract material from the TEI text in a relatively simple
	way. The method works for a variety of output formats, as the
	programmer simply has to provide implementations for a small
	number of functions, and understand the well-documented
	features of CSS. The concepts addressed by the functions (eg
	<q>block</q> and <q>inline</q>) are in line with XSL FO, and
	HTML; the catalogue of functions is given under the element <gi>model</gi>.</p>
          <p>A precondition for an
	implementation is that it must include an XPath 2.0 interpreter,
	as this is used in several places in the processing
	notation. </p>
          <p>It is an principle of the processing model (known informally as the
	Turska Tenet) that the transformation stage should be
	minimally intelligent; that is to say, it should contain as
	few TEI-specific rules as possible. The ODD should be as
	explicit as possible, and provide maximum expressivity to the
	  editor.</p>
        </div>

        <div>
          <head>Processing model elements</head>
          <p>There are two main elements for specifying the structural
	and appearance components of a processing model:
	<specList>
	  <specDesc key="model" atts="predicate behaviour
	  useSourceRendition output"/>
	  <specDesc key="param" atts="name"/>
	  <specDesc key="rendition" atts="scope"/></specList>
	  For a given <gi>elementSpec</gi>, there can be as many
	  <gi>model</gi> statements as required. A set  of multiple
	  <gi>model</gi> statements is regarded as an
	  <hi>alternation</hi>, i.e. only one of them will be
	  applied; this is comparable to a
	  <q>case statement</q> in some programming
	  languages. If the intention is for several
	  <gi>model</gi> statements to be active at the same time,
	  they can be enclosed inside a <gi>modelSequence</gi>.
	  </p>

	  <p>Within each <gi>model</gi> there can be set of
	  <gi>rendition</gi> elements.</p>
	  
          <p>Let us consider a simple case, the handling of the
	<gi>hi</gi> element. We decide that it is an inline element,
	normally rendered in italics:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><model behaviour="inline"><rendition>font-style: italic;</rendition></model></egXML>
	    The <att>behaviour</att> attribute has a value of a call
	    to the function <term>inline</term>. If no <gi>param</gi>
	    is supplied to override it, the content of the inline
	    object is assumed to be the children of the element (text
	    or elements).
	    Separately, the <gi>rendition</gi> element uses CSS
	    syntax to specific the appearance.  It would have been
	    possible here to simply add <code>display: inline</code>
	    to the rendition, to indicate that it is inline, but the
	    intention is to separate the structural decision from the
	    appearance decision.</p>
          <p>It is common for <gi>hi</gi> to use a
	    <att>rendition</att> attribute to indicate appearance. By
	    default, this is ignored, but 
	    <att>useSourceRendition</att> can be used to indicate
	    that it should be taken account of:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><model behaviour="inline" useSourceRendition="true"><rendition>font-style: italic;</rendition></model></egXML>
	    in this case the <gi>rendition</gi> is only a fallback and
	    may be overridden by the <att>rendition</att> attribute. This uses
	    the same behaviour as CSS; ie if <att>rendition</att>
	    involves a change to a different property than
	    <q>font-style</q>, then this remains active.</p>
          <p>If the processing model is context-dependent, we can
	    use <att>predicate</att> (an XPath 2.0 expression) to show
	    when different models apply:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><model predicate="ancestor::p" behaviour="inline"><rendition>font-style: italic;</rendition></model><model behaviour="block"><rendition>left-margin: 2em;</rendition></model></egXML>
	    Here the <gi>model</gi>s are <emph>alternatives</emph>;
	    only if the test (the <att>predicate</att>) on the first
	    fails will the second be activated.</p>
          <p>So far we have mapped TEI elements to simple block and
	    inline concepts. A more complex example is provided by
	    processing the <gi>choice</gi> element; this is commonly
	    used to provide a pair of alternates (eg <gi>sic</gi> and
	    <gi>corr</gi>), and our processing model has decided to
	    show
	    the corrected version by default, but allow for  the
	    implementation to switch to, or display (perhaps as a
	    tooltip), the alternate; this service is provided by a
	    function <term>alternate</term>. We have three models, for
	    different cases of input:
           <egXML xmlns="http://www.tei-c.org/ns/Examples"><model
	   predicate="sic and corr" behaviour="alternate">
	   <param name="default">corr</param>
	   <param name="alternate">sic</param></model>
	   <model predicate="abbr and expan[1]" behaviour="alternate">
	   <param name="default">expan</param>
	   <param name="alternate">abbr</param>
	   </model><model predicate="orig and reg" behaviour="alternate">
	   	   <param name="default">reg</param>
	   <param name="alternate">orig</param>
	   </model></egXML>
	   Here there are named <gi>param</gi> children of
	   <gi>model</gi>, which provide parameters to the function
	   given by <att>behaviour</att>. The content of the
	   parameters is always an XPath 2.0 expression. Thus in the
	  example above, we specify <code>expan[1]</code> to choose
	  the first of any available set of <gi>expan</gi>
	  children.</p>
	  
          <p>Sometimes we want different behaviour for different
	   output formats, specified using <att>output</att>; the
	   following example is designed to handle <gi>date</gi>,
	   which has an optional <att>when</att> containing a
	   regularized data. We  allow for three situations: a) when there is text inside
	   the element, and we are making print; b) when there is no
	   text but there is a <att>when</att> attribute; and c) when
	   we are making web pages. In the latter case, we use the
	   same <term>alternate</term> function as in the previous example,
	   but for print we force use of <att>when</att> when it is present.
           <egXML xmlns="http://www.tei-c.org/ns/Examples"><model
	   output="print" predicate="text()"
	   behaviour="inline"/><model output="print" predicate="@when
	   and not(text())" behaviour="inline">
	   <param name="content">@when</param></model>
	   <model predicate="@when" output="web" behaviour="alternate">
	     	   <param name="default">.</param>
		   <param name="alternate">@when</param>
	   </model>
		 </egXML>
	   </p>
          <p>Elements which have attributes can access the values
	   using the usual XPath 2.0 notation. For example, the
	   <gi>ref</gi> element has an important attribute,
	   <att>target</att>, to which is a link should be
	   created. Sometimes the <gi>ref</gi> has text content, but
	   sometimes just the <att>target</att>. Our rule caters for
	   these two situations:
           <egXML xmlns="http://www.tei-c.org/ns/Examples"><model
							       predicate="not(text())"
							       behaviour="link">
		 	     	   <param name="content">@target</param>
				   <param name="link">@target</param>
		   </model><model behaviour="link">
		 	     	   <param name="content">.</param>
		   <param name="link">@target</param>
		 </model>
	   </egXML>
	   Here the <term>link</term> function has  two <gi>param</gi>, the text
	   to be shown, and the URL to which it should be linked.</p>
        </div>
      </div>
      <div>
        <head>Implementing the TEI processing model</head>
        <p>A program which implements this processing model should
	   proceed as follows:
	   <list rend="ordered"><item>When processing an element in the instance
	     document,  any applicable <gi>model</gi> or
	     <gi>modelSequence</gi> for the current
	     output format should be followed. Process them in order until a match with
	     the <att>predicate</att> is found, or a <gi>model</gi>
	     with no <att>predicate</att> is available. If a
	     <gi>model</gi> has no <att>predicate</att>, it matches
	     any occurrence of the element. If a
	     <gi>model</gi> has no <att>output</att>, it applies to
	     all outputs.
	     </item><item>All of the <gi>model</gi>s inside a
	     <gi>modelSequence</gi> should be applied in order
	     (although they may have limiting <att>predicate</att>s</item><item>Follow the function provided by the
	     <att>behaviour</att> attribute. Where the value passed to
	     that function is <q>.</q>, follow this process for all
	     child elements of the current element, within the context
	     of the named function. Thus a <term>block</term>
	     should create a block-type object in the output
	     for this element and all the results from processing its children.</item><item>If there are possible <gi>model</gi>s, but none has a
	     <att>predicate</att> which matches the current element,
	     proceed to its children and see if there are models for
	     them.</item><item>If there is no <gi>model</gi> provided for the
	     element, proceed to its children and see if there are
	     models for them.</item><item>The special function <term>omit</term> means that
	     processing should stop for this element, and move to the
	     next sibling.</item></list>

	   </p>
        <p>This is broadly similar to the processing model for XSLT. </p>
      </div>
      <div>
        <head>Extensions to the TEI</head>
        <specGrp xml:id="additions">
          <elementSpec ident="param" mode="add" module="tagdocs">
            <desc versionDate="2015-05-15" xml:lang="en">parameter of
	    a model behaviour</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
	    <content>
	      <macroRef key="data.xpath"/>
	    </content>
	    <attList>
	      <attDef ident="name" usage="req">
		<desc>Name of parameter</desc>
	      </attDef>
	    </attList>
	  </elementSpec>

	  <elementSpec ident="paramSpec" mode="add" module="tagdocs">
            <desc versionDate="2015-05-15" xml:lang="en">specification
	    of a parameter of
	    a model behaviour</desc>
            <classes>
              <memberOf key="att.global"/>
	      <memberOf key="att.identifiable"/>
            </classes>
	    <content>
	      <alternate minOccurs="0" maxOccurs="unbounded">
                <classRef key="model.glossLike"/>
                <classRef key="model.descLike"/>
	      </alternate>
	    </content>
	  </elementSpec>

          <elementSpec ident="paramList" mode="add" module="tagdocs">
            <desc versionDate="2015-05-15" xml:lang="en">list of
	    parameter specifications</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
	    <content>
	      <elementRef key="paramSpec"/>
	    </content>
	  </elementSpec>

          <elementSpec ident="model" mode="add" module="tagdocs">
            <gloss versionDate="2015-05-15" xml:lang="en">processing model</gloss>
            <desc versionDate="2015-05-15" xml:lang="en">documentation of an intended processing model for this
            element</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content>
              <alternate minOccurs="0" maxOccurs="unbounded">
                <classRef key="model.glossLike"/>
                <classRef key="model.descLike"/>
	      </alternate>
              <elementRef key="param" minOccurs="0"   maxOccurs="unbounded"/>
              <elementRef key="rendition" minOccurs="0" maxOccurs="unbounded"/>
            </content>
            <attList>
              <attDef ident="behaviour" usage="req">
                <desc>which processing function, with
		optional named parameters, should be used to present this element
                in output</desc>
                <valList type="closed">
                  <valItem ident="alternate">
                    <paramList>
                      <paramSpec ident="default">
                        <desc>preferred content</desc>
                      </paramSpec>
                      <paramSpec ident="alternate">
                        <desc>alternate content</desc>
                      </paramSpec>
                    </paramList>
                    <desc>create a specialized display of alternating elements for displaying the
                  preferred version and an alternative, both at once
		    or by some method of toggling between the two.</desc>
                  </valItem>
                  <valItem ident="anchor">
                    <paramList>
                      <paramSpec ident="id"/>
                    </paramList>
                    <desc>create an anchor with ID</desc>
                  </valItem>
                  <valItem ident="block">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a block structure</desc>
                    <equiv name="div"/>
                  </valItem>
                  <valItem ident="body">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create the body of a document.</desc>
                    <equiv name="body"/>
                  </valItem>
                  <valItem ident="break">
                    <paramList>
                      <paramSpec ident="type"/>
                      <paramSpec ident="label"/>
                    </paramList>
                    <desc>create a line, column, or page break according to <term>type</term></desc>
                  </valItem>
                  <valItem ident="cell">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a table cell</desc>
                    <equiv name="td"/>
                  </valItem>
                  <valItem ident="cit">
                    <paramList>
                      <paramSpec ident="content"/>
                      <paramSpec ident="source"/>
                    </paramList>
                    <desc>show the content, with an indication of the source</desc>
                  </valItem>
                  <valItem ident="document">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>start a new output document</desc>
                  </valItem>
                  <valItem ident="figure">
                    <paramList>
                      <paramSpec ident="title"/>
                    </paramList>
                    <desc>make a figure with the <term>title</term> as caption</desc>
                    <equiv name="div"/>
                  </valItem>
                  <valItem ident="glyph">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>show a character by looking up reference</desc>
                  </valItem>
                  <valItem ident="graphic">
                    <paramList>
                      <paramSpec ident="url">
                        <desc>url of image file</desc>
                      </paramSpec>
                      <paramSpec ident="width">
                        <desc>desired width of image</desc>
                      </paramSpec>
                      <paramSpec ident="height">
                        <desc>desired height of image</desc>
                      </paramSpec>
                      <paramSpec ident="scale">
                        <desc>scaling for image</desc>
                      </paramSpec>
                      <paramSpec ident="title">
                        <desc>title of figure (usually not displayed directly)</desc>
                      </paramSpec>
                    </paramList>
                    <desc>if <att>url</att> is present, uses it to display graphic,
                  else display a placeholder image. </desc>
                    <equiv name="img"/>
                  </valItem>
                  <valItem ident="heading">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>creates a heading. </desc>
                    <equiv name="span"/>
                  </valItem>
                  <valItem ident="index">
                    <paramList>
                      <paramSpec ident="type"/>
                    </paramList>
                    <desc>generate list according to <term>type</term></desc>
                  </valItem>
                  <valItem ident="inline">
                    <paramList>
                      <paramSpec ident="content"/>
                      <paramSpec ident="label"/>
                    </paramList>
                    <desc>creates inline element out of <term>content</term> if there's something in
                  <gi>rendition</gi>, use that formatting
                  otherwise just show text of selected content.</desc>
                    <equiv name="span"/>
                  </valItem>
                  <valItem ident="link">
                    <paramList>
                      <paramSpec ident="content"/>
                      <paramSpec ident="link">
                        <desc>link url</desc>
                      </paramSpec>
                    </paramList>
                    <desc>create hyperlink</desc>
                    <equiv name="a"/>
                  </valItem>
                  <valItem ident="list">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a list by following <term>content</term></desc>
                    <equiv name="ol"/>
                  </valItem>
                  <valItem ident="listItem">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create list item</desc>
                    <equiv name="li"/>
                  </valItem>
                  <valItem ident="metadata">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create metadata section</desc>
                    <equiv name="head"/>
                  </valItem>
                  <valItem ident="note">
                    <paramList>
                      <paramSpec ident="content"/>
                      <paramSpec ident="place"/>
                      <paramSpec ident="label"/>
                    </paramList>
		    <desc>create an note, often out of line,
		    depending on the  value of
		    <term>place</term>; could be margin, footnote,
		    endnote, inline</desc>
                  </valItem>
                  <valItem ident="omit">
                    <desc>do nothing, do not process children</desc>
                  </valItem>
                  <valItem ident="paragraph">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a paragraph out of <term>content</term>.</desc>
                    <equiv name="p"/>
                  </valItem>
                  <valItem ident="row">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a table row</desc>
                    <equiv name="tr"/>
                  </valItem>
                  <valItem ident="section">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
		    <desc>create a new section of the output document</desc>
                  </valItem>
                  <valItem ident="table">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create a table</desc>
                    <equiv name="table"/>
                  </valItem>
                  <valItem ident="text">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create literal text</desc>
                  </valItem>
                  <valItem ident="title">
                    <paramList>
                      <paramSpec ident="content"/>
                    </paramList>
                    <desc>create document title</desc>
                    <equiv name="title"/>
                  </valItem>
                </valList>
              </attDef>
              <attDef ident="predicate" usage="opt">
                <desc>the condition under which this model applies, given as an XPath Predicate Expression</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.xpath"/>
                </datatype>
              </attDef>
              <attDef ident="useSourceRendition" usage="opt">
                <desc>whether to obey any rendition attribute which is present</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.boolean"/>
                </datatype>
              </attDef>
              <attDef ident="output" usage="opt">
                <desc>the intended output method</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
                </datatype>
                <valList type="closed">
                  <valItem ident="web">
                    <desc>the output is intended for presentation in a web format</desc>
                  </valItem>
                  <valItem ident="print">
                    <desc>the output is intended for presentation in a print format</desc>
                  </valItem>
                  <valItem ident="plain">
                    <desc>the output is intended for presentation in a plain text format</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model behaviour="inline"/>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <elementSpec mode="change" ident="quote">
                  <model predicate="ancestor::p" behaviour="inline">
                    <desc>If it's inside a paragraph then it's inline</desc>
                  </model>
                  <model predicate="not(ancestor::p)" behaviour="block">
                    <desc>If it's not inside a paragraph then it is block level</desc>
                  </model>
                </elementSpec>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model predicate="parent::person" behaviour="inline">
		  <desc>If it is a child of a person element, treat as inline</desc>
		</model>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model behaviour="inline">
                  <rendition>font-weight:bold</rendition>
                </model>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model behaviour="inline" output="print"/>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model predicate="ancestor::p" behaviour="inline">
		       	     	     	   <param name="content">@n</param>
		</model>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit"/>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <elementSpec mode="change" ident="date">
                  <model output="print" predicate="text()" behaviour="inline"/>
                  <model output="print" predicate="@when and  not(text())"
			 behaviour="inline">
		    <param name="content">@when</param>
		  </model>
                  <model predicate="@when" output="web"
			 behaviour="alternate">
		    <param name="default">.</param>
		    <param name="alternate">@when</param>
		  </model>
                </elementSpec>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">

			       <elementSpec mode="change" ident="choice">
				 xmlns="http://www.tei-c.org/ns/Examples">
			     <model	   predicate="sic and corr" behaviour="alternate">
	   <param name="default">corr</param>
	   <param name="alternate">sic</param></model>
	   <model predicate="abbr and expan" behaviour="alternate">
	   <param name="default">expan</param>
	   <param name="alternate">abbr</param>
	   </model><model predicate="orig and reg" behaviour="alternate">
	   	   <param name="default">reg</param>
	   <param name="alternate">orig</param>
	   </model></elementSpec>
              </egXML>
            </exemplum>
          </elementSpec>
          <!-- elementSpec for added model element -->
          <elementSpec ident="modelSequence" mode="add" module="tagdocs">
            <gloss versionDate="2015-05-15" xml:lang="en">sequence of processing model </gloss>
            <desc versionDate="2015-05-15" xml:lang="en">a group of model elements documenting intended processing models
            for this element, to be acted upon in sequence</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content>
              <sequence>
                <alternate minOccurs="0" maxOccurs="unbounded">
                  <classRef key="model.glossLike"/>
                  <classRef key="model.descLike"/>
                </alternate>
                <alternate maxOccurs="unbounded">
                  <elementRef key="model"/>
                </alternate>
              </sequence>
            </content>
            <attList>
              <attDef ident="predicate" usage="opt">
                <desc>the condition under which this model applies given as an XPath Predicate Expression</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.xpath"/>
                </datatype>
              </attDef>
              <attDef ident="useSourceRendition" usage="opt">
                <desc>whether to obey any rendition attribute which is present</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.boolean"/>
                </datatype>
              </attDef>
              <attDef ident="output" usage="opt">
                <desc>the intended output method</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
                </datatype>
                <valList type="closed">
                  <valItem ident="web">
                    <desc>the output is intended for presentation in a web format</desc>
                  </valItem>
                  <valItem ident="print">
                    <desc>the output is intended for presentation in a print format</desc>
                  </valItem>
                  <valItem ident="plaintext">
                    <desc>the output is intended for presentation in a plain text format</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          <elementSpec ident="modelGrp" mode="add" module="tagdocs">
            <gloss versionDate="2015-05-15" xml:lang="en">processing model group</gloss>
            <desc versionDate="2015-05-15" xml:lang="en">a group of model elements documenting intended processing models
            for this element</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content>
              <sequence>
                <alternate maxOccurs="unbounded">
                  <classRef key="model.glossLike"/>
                  <classRef key="model.descLike"/>
                </alternate>
                <elementRef key="rendition" minOccurs="0"/>
                <alternate minOccurs="1" maxOccurs="unbounded">
                  <elementRef key="modelSequence"/>
                  <elementRef key="model"/>
                </alternate>
              </sequence>
            </content>
            <attList>
              <attDef ident="useSourceRendition" usage="opt">
                <desc>whether to obey any rendition attribute which is present</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.boolean"/>
                </datatype>
              </attDef>
              <attDef ident="output" usage="opt">
                <desc>the intended output method</desc>
                <datatype>
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
                </datatype>
                <valList type="closed">
                  <valItem ident="web">
                    <desc>the output is intended for presentation in a web format</desc>
                  </valItem>
                  <valItem ident="print">
                    <desc>the output is intended for presentation in a print format</desc>
                  </valItem>
                  <valItem ident="plaintext">
                    <desc>the output is intended for presentation in a plain text format</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
            <!-- Need better example here -JC -->
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <elementSpec mode="change" ident="abbr">
                  <modelGrp output="web">
                    <model predicate="parent::choice" behaviour="omit"/>
                    <model predicate="ancestor::front" behaviour="inline">
                      <rendition>font-style:italic; </rendition>
                    </model>
                    <model predicate="not(parent::choice)" behaviour="inline">
                      <rendition scope="before">content: ' ('</rendition>
                      <rendition scope="after">content: ')'</rendition>
                    </model>
                  </modelGrp>
                  <modelGrp output="print">
                    <model predicate="parent::choice" behaviour="omit"/>
                    <model predicate="not(parent::choice)"
			   behaviour="note">
		      <param name="place">'foot'</param>
		    </model>
                  </modelGrp>
                </elementSpec>
              </egXML>
            </exemplum>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <modelGrp output="print">
                  <modelSequence>
                    <model behaviour="inline(@n)"/>
                    <model behaviour="note">
		      <param name="place">'foot'</param>
		    </model>
                  </modelSequence>
                </modelGrp>
              </egXML>
            </exemplum>
          </elementSpec>
        </specGrp>
      </div>
      <div>
        <head>Changes to the TEI</head>
        <specGrp xml:id="changes">
          <!-- adding model/modelGrp to elementSpec element -->
          <elementSpec ident="elementSpec" mode="change">
            <content>
              <sequence>
                <alternate minOccurs="0" maxOccurs="unbounded">
                  <classRef key="model.glossLike"/>
                  <classRef key="model.descLike"/>
                </alternate>
                <classRef key="classes" minOccurs="0"/>
                <classRef key="content" minOccurs="0"/>
                <classRef key="valList" minOccurs="0"/>
                <classRef key="constraintSpec" maxOccurs="unbounded" minOccurs="0"/>
                <classRef key="attList" minOccurs="0"/>
                <alternate maxOccurs="unbounded" minOccurs="0">
                  <elementRef key="model"/>
                  <elementRef key="modelGrp"/>
                  <elementRef key="modelSequence"/>
                </alternate>
                <classRef key="exemplum" maxOccurs="unbounded" minOccurs="0"/>
                <classRef key="remarks" maxOccurs="unbounded" minOccurs="0"/>
                <classRef key="listRef" maxOccurs="unbounded" minOccurs="0"/>
              </sequence>
            </content>
          </elementSpec>

	  <elementSpec ident="valItem" mode="change" module="tagdocs">
	    <content>
	      <alternate maxOccurs="unbounded"  minOccurs="0" >
		<classRef key="model.descLike"/>
		<classRef key="model.glossLike"/>
	      </alternate>
	      <elementRef key="paramList" minOccurs="0" maxOccurs="1"/>
	    </content>
	  </elementSpec>

          <elementSpec mode="change" ident="rendition">
            <classes>
              <memberOf key="att.global"/>
              <memberOf key="att.styleDef"/>
              <memberOf key="model.oddDecl"/>
            </classes>
          </elementSpec>
        </specGrp>
      </div>
      <div>
        <head>Schema for processing extended ODD</head>
        <schemaSpec ident="teipm" start="TEI teiCorpus specGrp">
          <moduleRef key="header"/>
          <moduleRef key="core"/>
          <moduleRef key="tei"/>
          <moduleRef key="textstructure"/>
          <moduleRef key="tagdocs"/>
          <moduleRef key="figures"/>
          <moduleRef key="linking"/>
          <specGrpRef target="#additions"/>
          <specGrpRef target="#changes"/>
        </schemaSpec>
      </div>
    </body>
  </text>
</TEI>
