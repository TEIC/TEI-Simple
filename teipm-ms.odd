<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="tei-pm.nvdl"
  type="application/xml"
  schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI PM for MS</title>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI Consortium</publisher>
        <availability>
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed under a
                  Creative Commons Attribution-ShareAlike 3.0 Unported License </licence>
          <licence target="http://www.opensource.org/licenses/BSD-2-Clause">
            <p>Copyright 2014 TEI Consortium.</p>
            <p>All rights reserved.</p>
            <p>Redistribution and use in source and binary forms, with or without
                     modification, are permitted provided that the following conditions are met:</p>
            <list>
              <item>Redistributions of source code must retain the above copyright notice,
                        this list of conditions and the following disclaimer.</item>
              <item>Redistributions in binary form must reproduce the above copyright notice,
                        this list of conditions and the following disclaimer in the documentation
                        and/or other materials provided with the distribution.</item>
            </list>
            <p>This software is provided by the copyright holders and contributors "as is" and
                     any express or implied warranties, including, but not limited to, the implied
                     warranties of merchantability and fitness for a particular purpose are
                     disclaimed. In no event shall the copyright holder or contributors be liable
                     for any direct, indirect, incidental, special, exemplary, or consequential
                     damages (including, but not limited to, procurement of substitute goods or
                     services; loss of use, data, or profits; or business interruption) however
                     caused and on any theory of liability, whether in contract, strict liability,
                     or tort (including negligence or otherwise) arising in any way out of the use
                     of this software, even if advised of the possibility of such damage.</p>
          </licence>
          <p>TEI material can be licensed differently depending on the use you intend to make
                  of it. Hence it is made available under both the CC+BY and BSD-2 licences. The
                  CC+BY licence is generally appropriate for usages which treat TEI content as data
                  or documentation. The BSD-2 licence is generally appropriate for usage of TEI
                  content in a software environment. For further information or clarification,
                  please contact the <ref target="mailto:info@tei-c.org">TEI Consortium</ref>. </p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>created ab initio during a meeting in Oxford</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <schemaSpec ident="teips-ms">
	<elementSpec mode="change" ident="ab">
              <model behaviour="paragraph"/>
            </elementSpec>
            <elementSpec mode="change" ident="abbr">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="actor">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="add">
              <model behaviour="inline">
                <outputRendition>color: green; text-decoration: underline;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="address">
              <model behaviour="block">
                <outputRendition>margin-top: 2em; margin-left: 2em; margin-right: 2em; margin-bottom:
            2em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="addrLine">
              <model behaviour="block">
                <outputRendition>white-space: nowrap;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="addSpan">
              <model behaviour="anchor"><param name="id">@xml:id</param></model>
            </elementSpec>
            <elementSpec mode="change" ident="am">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="anchor">
              <model behaviour="anchor"><param name="id">@xml:id</param></model>
            </elementSpec>
            <elementSpec mode="change" ident="argument">
              <model behaviour="block">
                <outputRendition>margin-bottom: 0.5em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="author">
              <model predicate="ancestor::teiHeader" behaviour="omit"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="back">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="bibl">
	      <model predicate="parent::listBibl" behaviour="listItem"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="body">
              <modelSequence>
                <model behaviour="index">
		  <param name="type">'toc'</param>
		</model>
                <model behaviour="block"/>
              </modelSequence>
            </elementSpec>
            <elementSpec mode="change" ident="byline">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="c">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="castGroup">
              <model predicate="child::*" behaviour="list">
		<param name="content">castItem|castGroup</param>
                <desc>Insert list. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="castItem">
              <model behaviour="listItem">
                <desc>Insert item, rendered as described in parent list rendition. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="castList">
              <model predicate="child::*" behaviour="list" useSourceOutputrendition="true">
		<param name="content">castItem</param>
                <outputRendition>list-style: ordered;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="cb">
              <model behaviour="break">
		<param name="type">'column'</param>
		<param name="label">@n</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="cell">
              <model behaviour="cell">
                <desc>Insert table cell. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="choice">


              <model output="plain" predicate="sic and corr"
		     behaviour="inline">
		<param name="content">corr[1]</param>
	      </model>
              <model output="plain" predicate="abbr and expan"
		     behaviour="inline">
		<param name="content">expan[1]</param>
	      </model>
              <model output="plain" predicate="orig and reg"
		     behaviour="inline">
		<param name="content">reg[1]</param>
	      </model>
              <model predicate="sic and corr" behaviour="alternate">
		<param name="default">corr[1]</param>
		<param name="alternate">sic[1]</param>
	      </model>
              <model predicate="abbr and expan" behaviour="alternate">
		<param name="default">expan[1]</param>
		<param name="alternate">abbr[1]</param>
	      </model>
              <model predicate="orig and reg" behaviour="alternate">
		<param name="default">reg[1]</param>
		<param name="alternate">orig[1]</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="cit">
              <model predicate="child::quote and child::bibl" behaviour="cit">
                <desc>Insert citation </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="closer">
              <model behaviour="block">
                <outputRendition>margin-top: 1em; margin-left: 1em; margin-left: 1em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="corr">
              <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline">
                <desc>simple inline, if in parent choice. </desc>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content: '[';</outputRendition>
                <outputRendition scope="after">content: ']';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="date">
              <model output="print" predicate="text()" behaviour="inline"/>
              <model output="print" predicate="@when and not(text())"
		     behaviour="inline">
		<param name="content">@when</param>
	      </model>
              <model output="web" predicate="@when"
		     behaviour="alternate">
		<param name="default">.</param>
		<param name="alternate">@when</param>
	      </model>
              <model predicate="text()" behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="dateline">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="del">
              <model behaviour="inline">
                <outputRendition>   text-decoration: line-through;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="desc">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="div">
              <model predicate="@type='title_page'" behaviour="block">
                <outputRendition>border: 1px solid black; padding: 5px;</outputRendition>
              </model>
              <model behaviour="section" predicate="parent::body or parent::front or parent::back"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="docAuthor">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="docDate">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="docEdition">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="docImprint">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="docTitle">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="block" useSourceOutputrendition="true">
                <outputRendition>font-size: larger;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="epigraph">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="ex">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="expan">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="figDesc">
              <model behaviour="inline">
                <outputRendition scope="before">content: '[..';</outputRendition>
                <outputRendition scope="after">content: '..]';</outputRendition>
                <outputRendition>color: grey;font-style:italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="figure">
              <model predicate="head or @outputRendition='simple:display'" behaviour="block"/>
              <model behaviour="inline">
                <outputRendition>
display: block;
border-top: solid 1pt blue;
border-bottom: solid 1pt blue;
		</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="floatingText">
              <model behaviour="block">
                <outputRendition>
	  margin: 6pt;
	  border: solid black 1pt;
	</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="foreign">
              <model behaviour="inline">
                <outputRendition>font-style:italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="formula">
              <model predicate="@outputRendition='simple:display'" behaviour="block"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="front">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="fw">
              <model predicate="ancestor::p or ancestor::ab" behaviour="inline"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="g">
              <model predicate="not(text())" behaviour="glyph">
	      <param name="g">@ref</param>
	      </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="gap">
              <model predicate="desc" behaviour="inline">
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model predicate="@extent" behaviour="inline">
		<param name="content">@extent</param>
                <outputRendition scope="before">content: '[..';</outputRendition>
                <outputRendition scope="after">content: '..]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content: '[...]';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="graphic">
              <model behaviour="graphic">
		<param name="url">@url</param>
		<param name="width">@width</param>
		<param name="height">@height</param>
		<param name="scale">@scale</param>
		<param name="content">desc</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="group">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="handShift">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="head">
              <model predicate="parent::figure" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::table" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::lg" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::list" behaviour="block">
                <outputRendition>font-weight: bold;</outputRendition>
              </model>
              <model predicate="parent::div" behaviour="heading">
		<param name="level">count(ancestor::div)</param>
	      </model>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="hi">
              <model predicate="@outputRendition" behaviour="inline" useSourceOutputrendition="true">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="not(@outputRendition)" behaviour="inline">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="imprimatur">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="item">
              <model behaviour="listItem"/>
            </elementSpec>
            <elementSpec mode="change" ident="l">
              <model behaviour="block" useSourceOutputrendition="true">
                <outputRendition> margin-left: 1em; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="label">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="lb">
              <model behaviour="break"
		     useSourceOutputrendition="true">
		<param name="type">'line'</param>
		<param name="label">@n</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="lg">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="list">
              <model predicate="@outputRendition" behaviour="list"
		     useSourceOutputrendition="true">
		<param name="content">item</param>
	      </model>
              <model predicate="not(@outputRendition)" behaviour="list">
		<param name="content">item</param>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="listBibl">
              <model predicate="bibl" behaviour="list">
		<param name="content">bibl</param>
              </model>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="measure">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="milestone">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="name">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="note">
              <model predicate="@place" behaviour="note">
		<param name="place">@place</param>
		<param name="label">@n</param>
	      </model>
              <model predicate="parent::div and not(@place)" behaviour="block">
                <outputRendition>margin-left: 10px;margin-right: 10px; font-size:smaller;</outputRendition>
              </model>
              <model predicate="not(@place)" behaviour="inline">
                <outputRendition scope="before">content:" [";</outputRendition>
                <outputRendition scope="after">content:"] ";</outputRendition>
                <outputRendition>font-size:small;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="num">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="opener">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="orig">
              <model behaviour="inline">
		<param name="label">@n</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="p">
              <model behaviour="paragraph" useSourceOutputrendition="true">
                <outputRendition>text-align: justify;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="pb">

              <model behaviour="break" useSourceOutputrendition="true">
		<param name="type">'page'</param>
		<param name="label">(concat(if(@n) then     concat(@n,' ') else '',if(@facs) then     concat('@',@facs) else ''))</param>
                <outputRendition>
	  display: block;
	  margin-left: 4pt;
	  color: grey;
	  float: right;
	</outputRendition>
                <outputRendition scope="before">content: '[Page ';</outputRendition>
                <outputRendition scope="after">content: ']';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="pc">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="postscript">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="publisher">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="pubPlace">
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="q">
              <model predicate="l" behaviour="block" useSourceOutputrendition="true">
                <outputRendition>margin-left: 10px; margin-right: 10px;
		</outputRendition>
              </model>
              <model predicate="ancestor::p or ancestor::note or ancestor::cell" behaviour="inline" useSourceOutputrendition="true">
                <outputRendition scope="before">content: '‘';</outputRendition>
                <outputRendition scope="after">content: '’';</outputRendition>
              </model>
              <model behaviour="block" useSourceOutputrendition="true">
                <outputRendition>margin-left: 10px; margin-right: 10px;
		</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="quote">
              <model predicate="ancestor::p" behaviour="inline" useSourceOutputrendition="true">
                <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
                <outputRendition scope="before">content: '‘';</outputRendition>
                <outputRendition scope="after">content: '’';</outputRendition>
              </model>
              <model behaviour="block" useSourceOutputrendition="true">
                <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
                <outputRendition>margin-left: 10px; margin-right: 10px;
		</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="ref">
              <model behaviour="inline" predicate="not(@target)"/>
              <model predicate="not(text())" behaviour="link">
		<param name="content">@target</param>
		<param name="link">@target</param>
	      </model>
              <model behaviour="link">
		<param name="link">@target</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="reg">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="rhyme">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="role">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="roleDesc">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="row">
              <model predicate="@role='label'" behaviour="row">
                <outputRendition>font-weight: bold;</outputRendition>
              </model>
              <model behaviour="row">
                <desc>Insert table row. </desc>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="rs">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="s">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="salute">
              <model predicate="parent::closer" behaviour="inline"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="seg">
              <model behaviour="inline" useSourceOutputrendition="true"/>
            </elementSpec>
            <elementSpec ident="sic" mode="change">
              <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline"/>
              <model behaviour="inline">
                <outputRendition scope="before">content: '{';</outputRendition>
                <outputRendition scope="after">content: '}';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="signed">
              <model behaviour="block" predicate="parent::closer">
                <outputRendition>
		  text-align: right;
		</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition>
		 font-style: italic;
		</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="sp">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="space">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="speaker">
              <model behaviour="block">
                <outputRendition> font-style:italic; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="spGrp">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec mode="change" ident="stage">
              <model behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="subst">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="supplied">
              <model predicate="parent::choice" behaviour="inline"/>
              <model predicate="@reason='damage'" behaviour="inline">
                <outputRendition scope="before">content:"&lt;";</outputRendition>
                <outputRendition scope="after">content:"&gt;";</outputRendition>
              </model>
              <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
                <outputRendition scope="before">content:"[";</outputRendition>
                <outputRendition scope="after">content:"]";</outputRendition>
              </model>
              <model predicate="@reason='omitted'" behaviour="inline">
                <outputRendition scope="before">content:"(";</outputRendition>
                <outputRendition scope="after">content:")";</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content:"{";</outputRendition>
                <outputRendition scope="after">content:"}";</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="table">
              <model behaviour="table">
                <outputRendition>
		  font-size: smaller;
		  background-color: #F0F0F0;
		</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="fileDesc">
              <model behaviour="title">
		<param name="content">titleStmt</param>
	      </model>
            </elementSpec>
            <elementSpec mode="change" ident="profileDesc">
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec mode="change" ident="revisionDesc">
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec mode="change" ident="encodingDesc">
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec mode="change" ident="teiHeader">
              <model behaviour="metadata"/>
            </elementSpec>
            <elementSpec mode="change" ident="TEI">
              <attList>
                <attDef ident="scheme" mode="add">
                  <datatype maxOccurs="unbounded">
                    <macroRef key="data.word"/>
                  </datatype>
                </attDef>
              </attList>
              <model behaviour="document"/>
            </elementSpec>
            <elementSpec mode="change" ident="text">
              <model behaviour="body">
                <outputRendition>
            max-width: 80%;
            margin: auto;
            font-family: Verdana, Tahoma, Geneva, Arial, Helvetica, sans-serif;
         </outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="time">
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec mode="change" ident="title">
              <modelSequence predicate="parent::titleStmt/parent::fileDesc">
                <model predicate="preceding-sibling::title"
		       behaviour="text">
		  <param name="content">' — '</param>
		</model>
                <model behaviour="inline">
                  <outputRendition>color: red; font-size: 2em;</outputRendition>
                </model>
              </modelSequence>
              <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
              <modelSequence predicate="@level='m' or not(@level)">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="ancestor::biblStruct or       ancestor::biblFull" behaviour="text">
		  <param name="content">', '</param>
		</model>
              </modelSequence>
              <modelSequence predicate="@level='s' or @level='j'">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="following-sibling::* and     (ancestor::biblStruct  or     ancestor::biblFull)" behaviour="text">
		  <param name="content">', '</param>
		</model>
              </modelSequence>
              <modelSequence predicate="@level='u' or @level='a'">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="following-sibling::* and     (ancestor::biblStruct  or     ancestor::biblFull)" behaviour="text">
		  <param name="content">'. '</param>
		</model>
              </modelSequence>
              <model behaviour="inline">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="titlePage">
              <model behaviour="block" useSourceOutputrendition="true">
                <outputRendition>    text-align: center;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="titlePart">
              <model behaviour="block" useSourceOutputrendition="true"/>
            </elementSpec>
            <elementSpec mode="change" ident="trailer">
              <model behaviour="block">
                <outputRendition>color: green;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="unclear">
              <model behaviour="inline">
                <outputRendition scope="after">content: ' [?] ';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec mode="change" ident="w">
              <model behaviour="inline"/>
            </elementSpec>
            <outputRendition xml:id="allcaps">text-transform: uppercase;</outputRendition>
            <outputRendition xml:id="blackletter">font-family: fantasy;</outputRendition>
            <outputRendition xml:id="bold">font-weight: bold;</outputRendition>
            <outputRendition xml:id="bottombraced">padding-bottom: 2pt; border-bottom: dashed gray 2pt;</outputRendition>
            <outputRendition xml:id="block">display:block;</outputRendition>
            <outputRendition xml:id="boxed">padding: 2pt; border: solid black 1pt;</outputRendition>
            <outputRendition xml:id="centre">text-align: center;</outputRendition>
            <outputRendition xml:id="cursive">font-family: cursive;</outputRendition>
            <outputRendition xml:id="doublestrikethrough">text-decoration: line-through;    color: red;</outputRendition>
            <outputRendition xml:id="doubleunderline">text-decoration: underline;    color: red;</outputRendition>
            <outputRendition xml:id="dropcap">font-size : 6em;
    font-family: cursive;
    font-weight : bold;
    vertical-align: top;
    height: 1em;
    line-height: 1em;
    float : left;
    width : 1em;
    color : #c00;
    margin: 0em;
    padding: 0px;</outputRendition>
            <outputRendition xml:id="float">float:right;    display: block;
    font-size: smaller;
    clear: right;
    padding: 4pt;
    width: 15%;
</outputRendition>
            <outputRendition xml:id="hyphen"/>
            <outputRendition xml:id="inline">display:inline;</outputRendition>
            <outputRendition xml:id="italic">font-style: italic;</outputRendition>
            <outputRendition xml:id="justify">text-align: justify;</outputRendition>
            <outputRendition xml:id="larger">font-size: larger;</outputRendition>
            <outputRendition xml:id="left">text-align: left;</outputRendition>
            <outputRendition xml:id="leftbraced">padding-left: 2pt; border-left: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="letterspace">letter-spacing: 0.5em;</outputRendition>
            <outputRendition xml:id="normalstyle">font-style:roman;</outputRendition>
            <outputRendition xml:id="normalweight">font-weight:normal;</outputRendition>
            <outputRendition xml:id="right">text-align: right;</outputRendition>
            <outputRendition xml:id="rightbraced">padding-right: 2pt; border-right: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="rotateleft">-webkit-transform: rotate(90deg);    transform: rotate(90deg);</outputRendition>
            <outputRendition xml:id="rotateright">-webkit-transform: rotate(-90deg);    transform: rotate(-90deg);</outputRendition>
            <outputRendition xml:id="smallcaps">font-variant: small-caps;</outputRendition>
            <outputRendition xml:id="smaller">font-size: smaller;</outputRendition>
            <outputRendition xml:id="strikethrough">text-decoration: line-through;</outputRendition>
            <outputRendition xml:id="subscript">vertical-align: bottom;    font-size: smaller;</outputRendition>
            <outputRendition xml:id="superscript">vertical-align: super;    font-size: smaller;</outputRendition>
            <outputRendition xml:id="topbraced">padding-top: 2pt;  border-top: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="typewriter">font-family:monospace;</outputRendition>
            <outputRendition xml:id="underline">text-decoration: underline;</outputRendition>
            <outputRendition xml:id="wavyunderline">text-decoration: underline;       text-decoration-style: wavy;</outputRendition>
	    <elementSpec ident="accMat" mode="change">
	      <modelSequence>
		<model behaviour="heading">
		  <param name="content">'Accompanying material'</param>
		  <param name="level">2</param>
		</model>
		<model behaviour="block"/>
	      </modelSequence>
	    </elementSpec>

	    <elementSpec ident="additional" mode="change">
	      <modelSequence>
		<model behaviour="heading">
		  <param name="content">'Additional'</param>
		  <param name="level">2</param>
		</model>
		<model behaviour="block"/>
	      </modelSequence>
	    </elementSpec>

	    <elementSpec ident="bindingDesc" mode="change">
	      <modelSequence>
		<model behaviour="heading">
		  <param name="content">'Binding'</param>
				  <param name="level">2</param>
</model>
		<model behaviour="block"/>
	      </modelSequence>
	    </elementSpec>

	    <elementSpec ident="msContents" mode="change">
	      <modelSequence>
		<model behaviour="heading">
		  <param name="content">'Contents'</param>
				  <param name="level">1</param>
</model>
		<model behaviour="block"/>
	      </modelSequence>
	    </elementSpec>

	    <elementSpec ident="msDesc" mode="change">
	      <model behaviour="block">
		<outputRendition>
		      font-family: "Junicode";
    margin-left: 25pt;
    margin-right: 15pt;
    margin-top: 15pt;
    margin-bottom: 15pt;
    font-size: 12pt;
    line-height: 14pt;
    text-align: left
		</outputRendition></model>
	    </elementSpec>

  <elementSpec ident="history" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'History'</param>
      		  <param name="level">1</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="provenance" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Provenance'</param>
      		  <param name="level">2</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="acquisition" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Acquisition'</param>
      		  <param name="level">2</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="origin" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Origin'</param>
      	<param name="level">2</param>
      </model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="msIdentifier" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Identification'</param>
      		  <param name="level">1</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="handDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Hands'</param>
      		  <param name="level">3</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="layoutDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Layout'</param>
      		  <param name="level">3</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="decoDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Decoration'</param>
      		  <param name="level">3</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="musicNotation" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Music notation'</param>
      		  <param name="level">2</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="objectDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Object'</param>
      		  <param name="level">2</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="physDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Physical description'</param>
      		  <param name="level">1</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="seal" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Seal'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="sealDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Seal description'</param>
      		  <param name="level">3</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="supportDesc" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Support description'</param>
      		  <param name="level">3</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="support" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Support'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="collation" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Collation'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="extent" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Extent'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="incipit" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Incipit'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="explicit" mode="change">
    <modelSequence>
      <model behaviour="heading">
	<param name="content">'Explicit'</param>
      		  <param name="level">4</param>
</model>
      <model behaviour="block"/>
    </modelSequence>
  </elementSpec>

  <elementSpec ident="tei:msItem" mode="change">
    <model behaviour="block">
    </model>
  </elementSpec>
<elementSpec ident="tei:origDate" mode="change">
  <modelSequence>
    <model behaviour="inline"/>
    <model predicate="following-sibling::tei:origPlace" behaviour="inline">
      <param name="content">','</param>
    </model>
  </modelSequence>
</elementSpec>

<!--
  <xsl:template match="tei:msItem/tei:listBibl">
    <xsl:call-template name="makeSection">
      <xsl:with-param name="level">2</xsl:with-param>
      <xsl:with-param name="heading">
        <xsl:text>Text editions</xsl:text>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="tei:textLang">
    <xsl:choose>
      <xsl:when test="preceding-sibling::tei:summary"/>
      <xsl:when test="preceding-sibling::tei:*">
        <xsl:call-template name="makeText">
          <xsl:with-param name="letters">
            <xsl:text>, </xsl:text>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
    </xsl:choose>
    <xsl:call-template name="makeWithLabel">
      <xsl:with-param name="before">Language of text</xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="tei:summary">
    <xsl:choose>
      <xsl:when test="preceding-sibling::tei:*">
        <xsl:call-template name="makeText">
          <xsl:with-param name="letters">
            <xsl:text>, </xsl:text>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
    </xsl:choose>
    <xsl:call-template name="makeWithLabel">
      <xsl:with-param name="before">Summary</xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="tei:rubric">
    <xsl:if test="preceding-sibling::tei:*">
      <xsl:call-template name="makeText">
        <xsl:with-param name="letters">
          <xsl:text> </xsl:text>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:if>
    <xsl:call-template name="makeInline"/>
  </xsl:template>
  <xsl:template match="tei:msItem/tei:author">
    <xsl:if test="preceding-sibling::tei:*">
      <xsl:call-template name="makeText">
        <xsl:with-param name="letters">
          <xsl:text> </xsl:text>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:if>
    <xsl:call-template name="makeInline"/>
  </xsl:template>
  <xsl:template match="tei:msItem/tei:title">
    <xsl:if test="preceding-sibling::tei:*">
      <xsl:call-template name="makeText">
        <xsl:with-param name="letters">
          <xsl:text> </xsl:text>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:if>
    <xsl:call-template name="makeInline">
      <xsl:with-param name="style">italic</xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="tei:locus">
    <xsl:call-template name="makeInline">
      <xsl:with-param name="style">bold</xsl:with-param>
      <xsl:with-param name="before"/>
      <xsl:with-param name="after">: </xsl:with-param>
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="tei:dimensions">
    <xsl:for-each select="*">
      <xsl:apply-templates select="."/>
      <xsl:call-template name="makeText">
        <xsl:with-param name="letters">
          <xsl:choose>
            <xsl:when test="string-length(.)=0 and @extent">
              <xsl:value-of select="@extent"/>
            </xsl:when>
            <xsl:when test="@unit">
              <xsl:value-of select="@unit"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>mm</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:if test="following-sibling::*">
            <xsl:text> x </xsl:text>
          </xsl:if>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:for-each>
    </xsl:template>
    -->
	  </schemaSpec>
    </body>
  </text>
</TEI>

