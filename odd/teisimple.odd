<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="tei-pm.nvdl"
  type="application/xml"
  schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI Simple: An Introduction</title>
        <!-- JC: Add authors, respStmts, etc. here? -->
      </titleStmt>
      <publicationStmt>
        <publisher>TEI Consortium</publisher>
        <availability>
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed under a Creative
            Commons Attribution-ShareAlike 3.0 Unported License </licence>
          <licence target="http://www.opensource.org/licenses/BSD-2-Clause">
            <p>Copyright 2015 TEI Consortium.</p>
            <p>All rights reserved.</p>
            <p>Redistribution and use in source and binary forms, with or without modification, are
              permitted provided that the following conditions are met:</p>
            <list>
              <item>Redistributions of source code must retain the above copyright notice, this list of
                conditions and the following disclaimer.</item>
              <item>Redistributions in binary form must reproduce the above copyright notice, this list of
                conditions and the following disclaimer in the documentation and/or other materials provided
                with the distribution.</item>
            </list>
            <p>This software is provided by the copyright holders and contributors "as is" and any express
              or implied warranties, including, but not limited to, the implied warranties of
              merchantability and fitness for a particular purpose are disclaimed. In no event shall the
              copyright holder or contributors be liable for any direct, indirect, incidental, special,
              exemplary, or consequential damages (including, but not limited to, procurement of substitute
              goods or services; loss of use, data, or profits; or business interruption) however caused
              and on any theory of liability, whether in contract, strict liability, or tort (including
              negligence or otherwise) arising in any way out of the use of this software, even if advised
              of the possibility of such damage.</p>
          </licence>
          <p>TEI material can be licensed differently depending on the use you intend to make of it.
            Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is
            generally appropriate for usages which treat TEI content as data or documentation. The BSD-2
            licence is generally appropriate for usage of TEI content in a software environment. For
            further information or clarification, please contact the <ref target="mailto:info@tei-c.org"
              >TEI Consortium</ref>. </p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <bibl>TEI U5 (derived from TEI U1: An Introduction to TEI Tagging (derived from TEI ED W21:
          Living with the Guidelines)</bibl>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      
      <titlePage>
        <docTitle>
          <titlePart type="main">TEI Simple: An Introduction</titlePart>
          
        </docTitle>
        <docAuthor>Martin Mueller</docAuthor>
        <!-- Who should appear here?  What should appear in respSmt in titleStmt above.  -->
        <docAuthor>Sebastian Rahtz</docAuthor>
        <docAuthor>Brian Pytlik Zillig</docAuthor>
        <docAuthor>James Cummings</docAuthor>
        <docAuthor>Magdalena Turska</docAuthor>
        <docDate>Version 0.9: August 2015</docDate>
      </titlePage>

      <!--
      <titlePage>
        <docTitle>
          <titlePart type="main">TEI Simple</titlePart>
        </docTitle>
        <docAuthor>Sebastian Rahtz</docAuthor>
        <docAuthor>Brian Pytlik Zillig</docAuthor>
        <docAuthor>Martin Mueller</docAuthor>
        <docDate>Version 0.4: 6th June 2015</docDate>
      </titlePage>-->
    </front>
    <body>
      
      <div xml:id="Simple-Background">
        <head>Preface</head>
        <p>The Text Encoding Initiative (TEI) has developed over 20 years into a key technology in text-centric
          humanities disciplines, with an extremely wide range of applications, from diplomatic editions to
          dictionaries, from prosopography to speech transcription and linguistic analysis. It has been able to achieve
          its range of use by adopting a <term>descriptive</term> rather than <hi rend="italic">prescriptive
          </hi> approach , by recommending <term>customization</term> to suit particular projects, and by
          eschewing any attempt to dictate how the digital texts should be rendered or exchanged. However, this
          flexibility has come at the cost of relatively limited success in interoperability. In our view there is a
          distinct set of uses (primarily in the area of digitized ‘European’-style books) that would benefit from a <hi
            rend="italic">prescriptive</hi> recipe for digital text; this will sit alongside other domain-specific,
          constrained TEI customizations, such as the very successful <term>Epidoc</term> in the epigraphic
          community. TEI Simple may become a prototype for a new family of constrained customizations. For instance, a
          TEI Simple MS for manuscript based work could be built on top of the ENRICH project, drawing on many of the
          lessons and some of the code for TEI Simple. </p>
        <p>The TEI has long maintained an introductory subset (TEI Lite), and a constrained customization for use in
          outsourcing production to commercial vendors (TEI Tite), but both of these permit enormous variation, and have
          nothing to say about processing. The TEI Simple project can be viewed in some ways as a revision of TEI Lite. Leaving aside
          elements for the <gi>teiHeader</gi>, TEI Lite and TEI Simple are customization of approximately the same
          scope, choosing respectively 91 and 105 out of the 552 TEI elements and sharing 80 of them. TEI Simple targets
          the area of  <term>Letters</term> in the broad and old-fashioned sense of that term.
          Its choice of elements reflects the practices followed in the encoding of large-scale archives, notably the
          archives produced by the Text Creation Partnership, but also the German Text Archive and a variety of archives
          encoded according to Level 4 of the Best Practices for TEI in Libraries.  It is simple only with regard to its <gi>text</gi> element.
          The <gi>teiHeader</gi> follows the same rules as TEI-All. </p>

        <p>TEI Simple focuses on interoperability, machine generation, and low-cost integration. In earlier discussions this project was called "TEI Nudge" because it was offered in the spirit of Richard
          Thaler's and Cass Sunstein's <title>Nudge</title> with its persuasive argument that in many walks of life
          people will make better choices if they are offered well-designed default solutions, as long as they are free
          to opt out of them. The TEI
          architecture facilitates customizations of many kinds; TEI Simple aims to produce a complete <q>out of the box</q>
          customization that meets the needs of the many users for whom the task of creating a customization is
          daunting or seems irrelevant. TEI Simple in no way intends to constrain the expressive liberty of encoders who
          do not think that it is either possible or desirable to follow this path. It does, however, promise to make
          life easier for those who think there is some virtue in travelling that path as far as it will take them, which
          for quite a few projects will be far enough. Some users will never feel the need to move beyond it, others
          will outgrow it, and when they do they will have learned enough to do so.</p>
        <p> The most distinctive feature of TEI Simple is a <q>cradle to
          grave</q> processing model that associates the TEI Simple schema with explicit and standardized options for
          displaying and querying texts. This means being able to specify what a programmer should do with particular
          TEI elements when they are encountered, allowing programmers to build stylesheets that work for everybody and
          to query a corpus of documents reliably.</p>
        
        <p>The modal case of a TEI project is a scholarly edition of some text that originated in a print or manuscript
          world. The edition may start from the fresh transcription of a source or it may start from the existing
          encoding of a text, e.g. a text from the EEBO TCP archive. Such projects call on a combination of skills that
          are not often found in the same person. The scholars care about the accuracy of the transcription and
          relevance of the encoding to their purpose and that of other users. If you have editorial responsibility for a
          TEI encoded text, you must know enough about TEI elements and practices to do this well. You need not know
          much about or be interested in the often very complex procedures required to turn the encoded text into
          something that users can work with. On the other hand the programmers and designers are very familiar with
          those procedures, but they may not have the time or inclination to become familiar with the intricacies of TEI
          encoding. </p>
        <p>The processing model offers a bridge across that divide. The aim is to lower the access barriers to working
          with TEI-encoded texts in various web environments. Programmers familiar with a particular web environment,
          whether Django, Drupal, eXist, Ruby on Rails, or others will be able to integrate TEI Simple-based projects
          into their environment with moderate effort and with no more than their usual tools and skills. Scholars or
          other individuals who primarily care about getting the encoding right need not concern themselves with
          subsequent stages. If they can do their encoding within the limits of TEI Simple, they can be confident that
          the fruits of their en-coding are available to users. Users, in turn, can have greater confidence that the
          query potential of encoded texts is in fact made available to them through appropriate query routines. This
          is conspicuously not the case with most TEI-encoded texts now: it is very difficult to write or train a search
          engine if you cannot make reasonably stable assumptions about the structure of the documents to be queried. </p>
        <p>This introduction to TEI Simple consists of three parts. They address different audiences and make different
        assumptions about what the reader is likely to know. The first of these addresses readers who know little or
        nothing about XML and can safely be skipped by readers who are familiar with it. The second is a tour of the
        elements in TEI Simple from an encoder's perspective. This section is a revision of  the excellent introduction 
        to TEI Lite by Lou Burnard and Michael Sperberg-McQueen. It follows that document wherever it can while adding this
        or deleting that. The third part is a short tour of the Processing Model and is written for 
        programmers who are familiar with Web technologies but new to TEI. This document also includes a formal description of 
        TEI Simple, which appears at the end and takes the form of an appendix.</p>
        
      </div>


      <div xml:id="Simple-very-gentle">
        <head>A very gentle introduction to XML and TEI</head>
        <div>
          <head>Hierarchies and Metaphors in XML</head>
          <p>The best full-scale introduction to the technologies that undergird TEI is found in Lou Buranrd's  <ref target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/SG.html">"Gentle Introduction to XML</ref> in Chapter 5 of the <title>TEI:P5 Guidelines</title>. " If you come from a History, Literature, or Philosophy
            department and have never worked with XML you may not find it quite so gentle, especially in its later
            chapters. This chapter addresses you and tries to lay out some basic facts about XML and TEI in language
            that stays as close to layman's language as possible. Examples are chosen from TEI Simple, but their point
            is to demonstrate general aspects of XML. Consult the "Tour of TEI Simple" for a detailed discussion of
            elements and their rules. The is some overlap in the discussions. If you are a novice, the repetition may be
            helpful. If you are an expert, you want to skip this section altogether. </p>
          <p>A word of advice before proceeding any further. It is possible to use simple text editing software to work
            with XML, but if you value your time do not even think about doing it. Use an XML editor instead. An XML
            editor is a piece of software that "knows about" the general features of XML and the particular features of
            a distinct XML language such as TEI. It can save you countless hours by discovering (or even preventing) the
            many logical and typographical errors that are easy to make and hard to fix. Some XML editors are freeware.
            The software that will save you the most time is likely not to be free. There are several excellent XML
            editors. In the TEI world, oXygen is probably the most widely used. </p>
          <p>XML stands for Extensible Markup Language. It is a set of rules for creating hierarchical data structures
            or Ordered Hierarchies of Content Objects (OHCO). You are familiar with such structures from the hard drive
            of your computer. It is a single container or "root" directory, which you can subdivide into an arbitrary
            number of subdirectories, each of which is "recursively" divisible into arbitrarily many subdirectories.
            Within the limits of the size of your hard drive each container is infinitely variable in size and adjusts
            to stuff that that you add or subtract.</p>
          <p>The technical terms of XML make extensive use of <term>tree</term> and <term>family</term> metaphors. In
            XML parlance the root of a tree is envisaged as a single cell. In visualizations the tree is typically
            inverted so that the tree grows downwards from a root in the sky. Each branching of such a tree is called a
              <term>node</term>, and a node with no further branches is often called a <term>leaf node</term>. A good
            XML editor lets you present the outline or tree structure of your document in the form of a navigation
            panel. </p>
          <p>As for the family metaphor, there is no sex in XML, and reproduction proceeds by parthenogenesis. A
              <term>parent</term> may have an indefinite number of <term>child</term> elements, but a <term>child</term>
            element has only one parent. It may have many <term>ancestors</term>, but at any level of the hierarchy
            there is only one of them. It is a defining feature of such hierarchical structures that for any
              <term>node</term> there is one and only one <term>path</term> from the root to any node, or from any node to
            any other node. In XML the technical term for that path is XPath, which is both a name for such a path and a
            quite complicated computer language for getting from any "here" to any "there". </p>
          <p>On your hard drive a container is known as a directory or folder. In an XML document, containers are known
            as <term>elements</term>. Container suggests volume and a three-dimensional structure, but the content of
            elements is text, which unfolds in a single temporal direction, envisaged from left to right in many, but by
            no means all, languages.</p>
          <p>The resemblances between your hard drive and an XML document in it are closer than you may think. XQuery is
            the name of a computer language that handles XML documents. In that language
            <eg>declare variable $collection := collection('/Users/martin/dropbox/speechdirectory');</eg> is a way of
            saying <q rend="block"> Follow the XPath that starts from the top container and follow it through its branchings
              (expressed by the <term>solidus</term> or forward slash) until you come to the container called
              "speechdirectory." Call it "collection" and identify it as an object on which further operations can be
              performed.</q> The dollar sign identifies a <term>variable</term> and its name. "speechdirectory" happens
            to be a directory on my computer with TEI documents that have a lot of speeches in them. Now consider the
            following piece of code:
            <eg>for $title in
         $collection//filesDesc/titleStmt/title
         return $title</eg> This is a
            <term>for statement</term>  used in many computer languages. It loops through a set of files, in this case
            all the files defined as the variable $collection. For each of these files it follows any path that leads
            via the elements <gi>fileDesc</gi> and <gi>titleStmt</gi> to the element <gi>title</gi>. It gives to that
            element the variable name $title and <term>returns</term>, i.e. produces as the result of its operation, the
            variable $title. The result is a long list with entries like the following.
            <egXML xmlns="http://www.tei-c.org/ns/Examples"> <title>A dialogue between Sir R.L. Knight, and T.O.D</title>
        <title>A new dialogue between some body and no body, or, The Observator observed</title></egXML>
            The XQuery chained together the hard drive's filepath and all the XPaths in the $collection variable that
            lead to <gi>title</gi> children of <gi>titleStmt</gi> elements. You might say that the root element of the
            XML document becomes a child element of your drive.</p>
          
          <p>Why is the piece of code frame with a black border while its output is displayed in green field and with a green border?  Anything that appears in green is a valid TEI XML fragment if it appears in the right context. Code framed in black makes no such claim.</p>

          <p> As this example demonstrates, it takes a fair amount of prose to describe a very simple operation. Just
            about any individual operation with XML is quite simple, but there are a lot of them and they nest. Some of
            the most distinctive features and difficulties of XML are highlighted if you envisage the hierarchical
            structure as as one-dimensional stream. Imagine an XML document as a pair of parentheses with parentheses
            and nested parentheses within it. Nesting is a simple concept, but it is not easy for human minds or eyes to
            follow a nested structure beyond the third level. An interesting technical term in this regard is
              <term>serialize</term>. You don't need to know (I certainly don't) just how the data of an XML document
            are stored in the innards of a computer. But when they are produced by the machine for you in a manner that
            you can make sense of they are <term>serialized</term>. This serialization appears typically on the 
          two-dimensional space of a page, where the single text stream is broken into familiar lines. The typographical
            line has been a remarkably stable structure for millennia, with limits imposed by the capacities of the
            human eye. But it is helpful to remember that a line is a convenient construct of a longer discursive linear
            stream.</p>
          <p>The parentheses that mark the boundaries of XML elements are more complicated things than round, square, or
            curly brackets. They are constructs enclosed in angle brackets, are known as <term>tags</term>, and have
            names. The opening tag of an element with the name "someElement" looks like
            <code>&lt;someElement&gt;</code>, while the closing tag adds a <term>solidus</term> after the left angle
              brackets:<code>&lt;/someElement&gt;</code>. As with a directory on your computer, you can put as much
            stuff between those tags as your hard drive will hold. The following is a <term>well-formed</term> XML document</p>

          <eg>&lt;someELement>Mary had a little lamb&lt;/someELement></eg>

          <p>But so is
            <eg>&lt;someELement>	 In the beginning God created the heaven and the earth....The grace of our Lord Jesus Christ be with you all. Amen.&lt;/someELement></eg>
            with all the other words of the Bible in between.</p>
        </div>
        <div>
          <head>Well-formed XML</head>
          <p>The term <term>well-formed</term> has a very specific meaning in XML. An XML text must be
              <term>well-formed</term>, and it may be <term>valid</term>. For an XML document to be well-formed it only
            needs to meet the conditions that must be true of all XML documents. There are not many of them, but the two
            most important are that a) the document must be enclosed by a root element, and b) that the name of an
            element must be spelled exactly the same way in the opening and closing tag. Thus
            <eg>&lt;someElement&gt;Mary had a little lamb&lt;/someelement&gt;</eg>is not a well-formed XML document,
            because XML is <term>case-sensitive</term> and the spelling of the closing tag "someelement" does not match
            the spelling of the opening tag "someElement." Neither is
            <eg><lb/>&lt;line&gt;Mary had a little lamb&lt;/line&gt;
         <lb/>&lt;line&gt;Its fleece was white as snow&lt;/line&gt;</eg>
            But
            <eg>
              &lt;linegroup>
              <lb/>&lt;line>Mary had a little lamb&lt;/line>
              <lb/>&lt;line>Its fleece was white as snow&lt;/line>
              <lb/>&lt;/linegroup>
        </eg>
            is well-formed XML because the two &lt;line&gt; elements are enclosed by the root element
            &lt;linegroup&gt; and the opening and closing tag names are spelled the same way.</p>
          <p>These simple examples of well-formed XML consist of element wrappers that enclose text. From a reader's
            perspective XML has slightly awkward ways of referring to <q>just text</q>. The software that processes an XML
            text is known as a <term>parser</term>, a term borrowed from traditional grammar. Just as you parse a
            sentence by determining where its different parts begin and end, so an XML parser goes through an XML file
            and inspects its parts. It looks for opening and closing tags of each element as well as the stuff enclosed
            by them, which consists either of other elements or of  <term>parsed character data</term> (PCDATA), stuff
            that the XML Parser after examination has recognized as proper text. </p>
          <p>Except for the left angle bracket (&lt;) and the ampersand (&amp;) any Unicode character can show up in
            PCDATA. Because the XML parser uses (&lt;) to identify the beginning of an element tag, it cannot be used
            directly in plain text or PCDATA. You must <term>escape</term> it by using a <term>character entity</term>
            to represent it. A
            character entity is a periphrastic expression that is wrapped in an opening ampersand and a closing
            semicolon. Since there are no words that begin with the former and end with the latter their combination acts as an
            unambiguous marker that their content refers to and retrieves something special, whether a single character
            or all of <title>Hamlet</title>. The character entity for the left angle bracket is (&amp;lt;), where <q>lt</q>
            stands for <q>less than</q> to reflect the common use of that character in mathematical notation. </p>
          <p>Because the ampersand is used as the opening symbol for a character entity, it also must be
              <term>escaped</term>. Its character entity is "ampersand + amp + semicolon"
            (&amp;amp;). These character entities are two of five <term>predefined entities</term> in the XML
            specifications that you can use without formally <term>declaring</term> them. The other three are the
            apostrophe (&apos;), the double quotation mark (&quot;), and the "greater-than" symbol or right angle
            bracket (&gt;). Of these, the apostrophe entity is useful if you want to distinguish between the uses of the
            same character as the genitive marker and a single quotation mark. </p>
          <p>Within the range of TEI Simple you probably will not need to know any more about character entities, but
            you can find out more about them at <ref target="http://www.w3.org/TR/xml-entity-names">XML Entity
              Definitions for Characters (2nd Edition)</ref>.</p>

        </div>
        <div>
          <head>Valid XML</head>
          <p>The requirement that everything in a well-formed XML document must be enclosed by a root element does not
            take you very far. A well-formed directory structure on a hard drive can be, and often is, a complete mess.
            XML becomes interesting and useful only when it is <term>valid</term>. XML has rules for making rules that specify for any element
            <list>
              <item>what elements it may or must contain or be contained by</item> 
              <item>how often it may appear in its parent element</item>  
              <item>in what order it may or must appear</item></list> A set of such rules is
            known as a <term>schema</term>. You can use these rules about rules to make up your own schema, but if you
            want to share your documents and make sure that others can use them you are better off using a schema that
            has been designed by others for general use in some domain, whether Chemistry, Mathematics, or whatever. TEI
            is such a schema, and its purpose is to facilitate the encoding of documents that fall under the category of
              <term>Letters</term> very broadly defined. </p>

          <p>How does a machine know that a document is an XML document, whether with or without a schema? Any XML
            document must begin with one or more <term>processing instructions</term> that tell the machine what to do
            with it. The minimal processing instruction simply says <q>I am an XML document</q> and does so with the
            line <eg>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</eg> at the top of the file. The statement <q>I am a TEI
              Simple document</q> is a more elaborate affair:</p>

       <eg>  &lt;?xml-model href="http://raw.githubusercontent.com/TEIC/TEI-Simple/master/teisimple.rng"
type="application/xml"
schematypens="http://relaxng.org/ns/structure/1.0"?>
<lb/>&lt;?xml-model href="http://raw.githubusercontent.com/TEIC/TEI-Simple/master/teisimple.rng"
type="application/xml"
schematypens="http://purl.oclc.org/dsdl/schematron"?></eg>

          <p>You can encode quite successfully in TEI Simple by just cutting and pasting this code. If you work with a
            program like oXygen, you can choose a new document as a TEI Simple document, and it will open with all the
            required processing instructions. It is, however, useful to hava rough idea of what is going on here. A
            processing instruction comes in a &lt;? ...?&gt; wrapper, which answers to the machine's question <q>What
              shall I do here?</q> In our example there are two instructions. The first one says <q rend="block">Follow the
              instructions in the schema <term>teisimple.rng</term>. which you will find at the URL
              "http://raw.githubusercontent.com/TEIC/TEI-Simple/master/teisimple.rng".</q> The second instruction, which
            is rather more cryptic, specifies that the rules for the <gi>teiHeader</gi> element differ from the rules
            for the <gi>text</gi> element. </p>


          <p> A schema is a very technical document and can be expressed in various schema languages. In the TEI world
            Relax NG is the most popular schema language. You can mostly treat the TEI Simple schema (or any other
            schema) as a black box whose operations you trust. Until about a dozen years, working with XML texts was a
            painful exercise. XML texts are equally unforgiving when it comes to orthographic or logical errors. Both
            are very easy to make and very hard to find or fix in a document of any complexity. Modern editing software
            wil <term>validate</term> your document as you work on it. That is to say, it will read your document and
            check whether it complies with the rules declared in the schema. If it discovers an error, it will tell you
            about the what and where of that error right then and there. It is a good investment of your time to learn how to read such error messages. </p>

          <p>Although working with XML is much less painful than it used to, you still have to understand the particular
            rules that are formulated in the arcane language of the schema. You also need to know something about the
            rule-making rules of XML in order to work with TEI documents. And it helps to remind yourself constantly of
            some basic facts about XML. An XML document is in principle human-readable. If the only surviving copies of
            Dante's <title>Inferno</title>, Cervantes' <title>Don Quixote</title>, or Shakespeare's
              <title>Hamlet</title> were XML versions they could be read by humans who know Italian, Spanish, or
            English. But an XML document is not made to be read by a human. It is made to be processed by a machine for
            some purpose, whether displaying it on a screen, printing it out in some formating, or retrieving bits of
            information from it. An XML document is to a considerable extent agnostic about the purposes to which it may
            be put. It is not a single purpose version of its source. In particular, it is not designed as a
            reader-friendly document, although you may generate a reader-friendly version from it.</p>
        </div>
        <div>
          <head>XML as a declarative markup language</head>
          <p>Like any other XML language, TEI is a <term>declarative markup language</term>. If in a printed book you
            come across the sentence <q><hi>Julius Caesar </hi>was assassinated on March 15, 44 BCE</q> and you see the
            string "Julius Caesar" in italics you may reasonably infer that the type setting program followed an
            "imperative" procedure that said something like <q>when you come to J start printing in italics and stop
              when you've done 'r'</q>. Word processors work that way. In TEI that sentence might be encoded as
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><s><name>Julius Caesar</name> was assassinated on <date>March 15, 44 BCE</date></s></egXML>
            This encoding has no imperatives, but is a sequence of declarations where <list>
              <item>the <gi>s</gi> element declares that "my content is a sentence"</item>
              <item>the <gi>name</gi> element declares that "my content is a name"</item>
              <item> the<gi> date</gi> element declares that "my content is a date"</item>
            </list>
          </p>
          <p>These declarations include no instructions about what to do with them. They do allow a machine to retrieve the
            content of all elements that have the tags <gi>name</gi>, <gi>date</gi> or <gi>s</gi>. If the sentence came
            from an Early Modern document in which names are frequently italicized, the encoding might go like
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><s><name rendition="#italics">Julius Caesar</name> was assassinated on <date>March 15, 44 BCE</date></s></egXML>
            The <term>attribute</term>
            <att>rendition</att> in this case declares that in the source document the name was italicized, but the
            encoding does not tell you what to do with that fact. What is true of this sentence is true of every TEI
            text. It is a set of declarations rather than a set of instructions. </p>
        </div>
        <div>
          <head>The Nature of XML rules</head>

          <p> TEI is a specific markup language designed to encode texts that originated in a print or manuscript world.
            You can also use it to generate <term>born digital</term> documents, but you will understand its quirks more readily if
            you keep its original purpose in mind. The XML rules for specifying the TEI markup language have to do with
            <list><item>what elements may contain or are contained by other elements</item> <item>the order of child elements within a
            particular parent element</item> <item>the number of child elements that a parent element may contain</item></list> The words
              <term>may</term>, <term>must</term> and <term>may not </term>are important technical terms that the
            machine can understand when it validates an encoding. There is also the ocasional <term>should</term>, but
              <term>should</term> is not a term the machine can make sense of. It involves conventions that it is
            helpful to observe, even though for one reason or another they cannot be expressed in terms of
              <term>may</term>, <term>must</term> or <term>may not</term>.</p>

        </div>
        <div>
          <head>A simple example of the rules</head>
          <p>The  skeleton of a TEI document provides a good example for the ways in which the rule-making
            capabilities of XML are exercised. A TEI document MUST have one and only one root element, and it name is
            TEI. The element name TEI is a specific feature of the TEI schema. The requirement for a root element is a
            requirement of well-formed XML. </p>
          <p>The TEI root element MUST have two child elements, <gi>teiHeader</gi> and <gi>text</gi>. There MUST be only
            one of each, and <gi>teiHeader</gi> MUST come before <gi>text</gi>. These are TEI specific rules, but they
            observe the rule-making rules of XML. </p>
          <p><gi>teiHeader</gi> and <gi>text</gi> relate to each other as a catalogue record to the item it catalogues.
              <gi>teiHeader</gi> consists of data about <gi>text</gi> or <term>metadata</term>. </p>
          <p>Encoding the header is a very different thing from encoding the text, and information from the header is
            never included in a representation of the text. We will leave the header alone, except for noting briefly
            what MUST be in it. Here is an example of a minimal header:</p>

          <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <teiHeader>
         <fileDesc>
          <titleStmt>
           <title>My next book</title>
          </titleStmt>
          <publicationStmt><p>not yet published</p></publicationStmt>
          <sourceDesc>
           <p>original document</p>
          </sourceDesc>
         </fileDesc>
        </teiHeader>
       </egXML>

          <p>The header MUST have a <gi>fileDesc</gi> element or file description, which answers at least the following
            three questions: <list>
              <item>What is my name? (<gi>titleStmt</gi>)</item>
              <item>Who published me? (<gi>pubStmt</gi>)</item>
              <item>Where do I come from? (<gi>sourceDesc</gi>) </item>
            </list> The <gi>fileDesc</gi> element MAY have a lot of other child elements, but it MUST have
              <gi>titleStmt</gi>, <gi>pubStmt</gi>, <gi>sourceDesc</gi>, only one of each and in that order. This is a
            very simple example of XML rules codifying practices from some domain, here the world of published books.
            The normal case of a TEI document represents a file that has been digitized and published from a printed
            source. But this hypothetical example represents a digital file that has not been published and was <term>born
            digital</term>. </p>
          <p>In this simple example, <gi>titleStmt</gi>,<gi>pubStmt</gi>,and <gi>sourceDesc</gi> do not have text
            content, but their child elements <gi>p</gi> and <gi>title</gi> do. Some elements can only contain other
            elements, some elements can contain <term>mixed content</term>, i.e. <term>text nodes</term> and child
            elements. Some elements typically contain only text nodes, but TEI Simple has no element that MUST contain
            only a text node.</p>

          <p>If you work with TEI mainly as an encoder, mixed content is an easy concept to get used to. If you are in
            the business of processing encoded text it is the cause of many problems. Consider our earlier example:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><s><name rendition="#italics">Julius Caesar</name> was assassinated on <date>March 15, 44 BCE</date>.</s></egXML>
            For the machine this simple sentence exists as three separate text nodes that are children of different
            elements. A lot of thought has gone into writing software that will easily extract these different text
            nodes and combine them into a single utterance.</p>

          <p> So much for the header, at least for now. Let us turn to <gi>text</gi>, the container for encoding the
            actual document, including its title page if it has one. A <term>book</term> is a bibliographical unit,
            which may contain one or more <term>work(s)</term>. The second quarto of <term>Hamlet</term> is a book with one work. The Shakespeare Folio of 1623
            contains three dozen separate works. While the TEI can handle both situations, we will focus here on the
            normal case of <q>one book, one work</q>, but it is useful to acknowledge the fact that the relationship between <term>book</term> and <term>work</term> and be very complex and raises tricky encoding questions. </p>
          <p>The <gi>text</gi> element MUST contain one and only one <gi>body</gi> element. It MAY contain
              a<gi>front</gi> or <gi>back</gi> element, or both of them, but only one of each. <gi>front</gi> MUST
            precede and <gi>back</gi> MUST follow <gi>body</gi>. This is another example of perfectly obvious and
            sensible rules from some domain being codified in the rigid rules of the XML schema. Since you are very
            unlikely to encode the sequence <gi>back</gi>, <gi>front</gi>, <gi>body</gi>, you will not benefit from the
            validator's telling you that this is not valid XML, but there are many other and less obvious cases where
            the validator is helpful.</p>
          <p>The <gi>body</gi> element MUST have something in it. It will be happy with a single paragraph, as in
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><body><p>This is all I have to say</p></body></egXML> but
            you are more likely to find more elaborate structures, such as
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
         <body><div><head>Chapter One</head><p>It was a dark and stormy night</p></div>
          <div><head>Chapter Two</head><p>more stuff about the weather...</p></div></body>
        </egXML>
          </p>
          <p>The chapter or section level <gi>div</gi> element is one of the TEI workhorses. You MAY have as many of
            them as you like in your <gi>front</gi>
            <gi>body</gi> or <gi>back</gi> elements, and you MAY nest them as deeply as you like. </p>
          <p>The paragraph level <gi>p</gi> element is the other workhorse of the TEI. Any element that MAY contain
              <gi>p</gi> elements MAY contain any number of them. Unlike <gi>div</gi> elements, <gi>p</gi> MAY contain
            plain text or PCDATA (and typically will consist mostly of it), but a <gi>p</gi> element MAY NOT nest within
            another <gi>p</gi> element. This is a perfectly sensible rule. The <gi>p</gi> element is based on the model
            of the paragraph. Paragraphs divide into sentences; you don't expect them to divide into sub-paragraphs. Or,
            if there is a document with paragraphs and sub-paragraphs, you are probably in the world of lists and list
            items. The TEI has elements for lists and their items, and a list item MAY have a <gi>list</gi> child
            element. But even though <gi>p</gi> MAY NOT be a child of <gi>p</gi>, it is possible that a valid child of
              <gi>p</gi> could have a valid child element <gi>p</gi>. Whether you SHOULD use such encoding is another
            question. </p>
          <p>It is useful to think of most TEI elements as operating mainly at one of three levels: </p>
          <list>
            <item><term>Text structure</term> elements elements articulate the macrostructure of your document, e.g.
                <gi>front</gi>,<gi>body</gi>,<gi>back</gi>,<gi>div</gi>. With some very specialized exceptions, such
              elements MAY NOT contain PCDATA. </item>
            <item><term>Block elements</term>, principally <gi>p</gi> and <gi>l</gi> contain stretches of plain text
              whose end is almost universally marked by a line break in print. </item>
            <item><term>Inline elements</term> operate at the microstructure of discourse. Printed text will often use
              italics or some other device to highlight a word or phrase. It is often, but not always possible to
              determine the reason. In TEI the <gi>hi</gi> element is the all-purpose element to encode inline words or
              phrases that have been highlighted.</item>
          </list>
          <p>But wherever one draws a line, there are phenomena that want to cross that line. In TEI there are several
            <term>inter</term> elements that can occur within paragraphs (inline) or between paragraphs (block). The most common of
            these is  the versatile and slippery <gi>q</gi> element. Paragraphs often end with a quotation in
            a pattern like the following:</p>

          <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <p>.....and wrote as follows:
         <q>
          <p>one paragraph</p>
          <p>another paragraph</p>
          <p>yet another paragraph</p>
         </q>
        </p>
       </egXML>

          <p>The fact that the paragraph does not end with a period but with a colon might lead you to think of the
            quotation as part of the previous paragraph. It does, however, lead to a deeply nested structure in which
              <gi>p</gi> elements are the descendants of <gi>p</gi> elements. If you like #5 of the Zen of Python
              (<quote>flat is better than nested</quote>) you might decide that the paragraph is terminated by the colon
            and that <gi>q</gi> should be the right sibling rather than child of <gi>p</gi>:</p>
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <p>.....and wrote as follows:</p>
        <q>
         <p>one paragraph</p>
         <p>another paragraph</p>
         <p>yet another paragraph</p>
        </q>
        
       </egXML>

          <p>That is a very different case from a quotation of two lines of verse in the middle of a sentence, as in </p>

          <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <p>.....when Hamlet says:
         <q>
          <l>But that the dread of something after death,</l>
          <l>The undiscovered country from whose bourn</l>
          <l>No traveller returns, puzzles the will</l>
         </q>
         he means that...</p>
       </egXML>
          <p> In the latter case there is no ambiguity or choice, and there is nothing strained about <gi>l</gi> as a
            descendant of <gi>p</gi> In the former case, there is ambiguity, and you may want to choose the option
            that avoids strained nesting. With nested structures it is useful to follow the advice
              <q>as much as necessary but as little as possible</q>.</p>
        </div>
        <div>
          <head>About Namespaces</head>
          <p>Namespaces are  like surnames, letting you distinguish between Miller, Henry and Smith, Henry. For
            instance, HTML and TEI both use elements with the names <gi>p</gi> and <gi>div</gi>. But these are "false
            friends" with very different meanings and operating rules. By convention a namespace takes the form of a
            URL. The full name of an element is known as its "qualified name" or QName, and in one conventional notation
            it is written by prefixing the element name with the namespace in curly braces Thus the namespace of TEI is
            http://www.tei-c.org/ns/1.0, and the full name of a TEI element such as <gi>p</gi> is
            {http://www.tei-c.org/ns/1.0}p.</p>
          <p>Because QNames are very clumsy things to manipulate, shortcuts have been invented. If you map the namespace
            to a prefix, tei:p will stand for {http://www.tei-c.org/ns/1.0}p, five instead of thirty characters. The
            choice of the prefix is arbitrary, but the prefix and element name must be connected by a colon. Unless you
            manipulate an XML text with XSLT, xquery, or some other language, you don't have to worry much about
            namespaces. But it is useful to know about them. If you do have to use them remember that they are fussy and
            a common source of error. </p>
        </div>
        <div n="looke at this later">
          <head>About Attributes</head>
          <p> Elements can have attributes. The term is borrowed from grammar, and attributes relate to elements pretty
            much as adjectives relate to nouns. An attribute consists of a <term>key-value</term> pair, such as <hi>type='act'</hi>, where
            the term before the equal sign is the name of the attribute and the term after the equal sign is the value.
            The value must be in quotation marks,whether single or double, but <hi>smart</hi> quotation marks will raise an
            error message. Thus &lt;div typ="act" n=3"&gt; would be a way of specifying a particular <gi>div</gi> as
            containing "Act III" of some play. </p>
          <p>In well-formed XML, there are rules about the names of attributes, but no rules about what attributes to
            use with what elements or what values to associate with the attributes. In valid XML, the rules for
            attributes are specified in the schema. There are rules about what attributes may be used  with what
            elements and what kinds of data may, must, or may not appear in attribute values. In the TEI schema some attributes
            are <term>global</term> and can be used in the same manner for any element. Other attributes are specific to a
            particular set of elements. </p>
          <p> A few of the global attributes in the TEI schema belong to the xml namespace. The two that you are likely
            to encounter often are xml:id and xml:lang. The former specifies an ID for an element that is unique within
            the document. The latter specifies the language in which the document (or part of it) is written. The rules
            for these two attributes are not TEI specific but follow the general rules for XML. That is why instead of
            <hi>id</hi> and <hi>lang</hi> these attributes always appear with their XML prefix <hi>xml:id</hi> and <hi>xml:lang</hi>. </p>
          <p>In the TEI schema the value of an xml:id attribute must be a proper <term>XML Name</term>: it must begin
            with an alphabetic character; it may include digits, periods, hyphens, and underscores, but not commas, or
            semicolons. Because the colon required to link a namespace prefix to an attribute name you should only use
            it for that purpose. TEI has its own rules for what values may, may not, or must appear in different
            attributes. </p>
          <p>The two most widely used global attributes in TEI are <att>n</att> and <att>rendition</att>. The name of
            the former is short for "number," and numbering of one kind or another is its most common, but not its only,
            use. There are hardly any restrictions on what you can use for its attribute values. You can even, while you are
            working with a document, embed comments, as long as you remember to remove them in time. If n="5" is a
            proper value, so is n="5 check this again later." But you will be better off using the formal commenting
            protocol of XML, wrapping any kind of comment in &lt;!-- [my comment] --&gt;. </p>
          <p> Other attributes values are much fussier. The <gi>l</gi> supports a <att>part</att> attributed with a
            fixed list of values Y, N, I, M, F for <term>yes</term>, <term>no</term>, <term>initial</term>, <term>medial</term>, and <term>final</term>. The value for the
              <att>target</att> attribute of the linking element  <gi>ref</gi>  may consist of one or
            more URL's separated by white space. </p>
          <p>The <att>type</att> attribute, which is available for some but not all elements, is a very powerful device
            for making more granular distinctions among kinds of discourse, especially when it is combined with a
            <term>controlled vocabulary</term>. For instance, the TEI schema include a <gi>lg</gi> element for encoding any kind of grouping of lines of verse.  A controlled vocabulary for tagging  stanzaic and metrical patterns is a great device for enhancing the query potential of a corpus of poems. </p>
        </div>
        <div>
          <head>Limitations of TEI as an XML Markup Language</head>

          <p>The <term>soul</term> of the TEI could take different form, but in practice it is embodied in XML and
          as such is limited  by two XML axioms: <list>
              <item> A document is an OHCO or ordered hierarchy of content objects</item>
              <item>The presentation of a document can be neatly separated from its structure</item>
            </list> Both of these axioms are deeply problematical when it comes to texts, but they are true often enough
            to be useful. Many texts divide neatly into single hierarchical structures, but others do not, and
            rhetorical effects frequently rely on the reader's or listener's effortless management of what in TEI
            parlance is called <term>overlapping</term> or <term>concurrent</term> hierarchies. Take the last two lines of Hamlet's
            soliloquy:</p>

          <quote>
            <l>The fair Ophelia! Nymph, in thy orisons</l>
            <l> Be all my sins remembered.</l>
          </quote>
          <p>The prosodic structure of two lines of blank verse is counterpointed by a syntactic structure in which a
            sentence begins in the middle of one line and spills over without a break into the next line. You might be
            tempted to encode this as follows</p>

          <egXML xmlns="http://www.tei-c.org/ns/Examples"><quote>
        <l><s>The fair Ophelia!</s> &lt;s>Nymph, in thy orisons</l>
        <l> Be all my sins remembered.&lt;/s&gt;</l>
       </quote></egXML>
          <p> But this will generate the error message <q>The element type "s" must be terminated by the matching
              end-tag "s". </q> It is a cardinal rule of XML that no child element may have two parents. There are
            various workarounds. You can use milestones, as in
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><quote>
         <l><milestone unit="sentence"/>.The fair Ophelia!
          <milestone unit="sentence"/> Nymph, in thy orisons</l>
         <l> Be all my sins remembered.</l>
        </quote></egXML>
            Using the punctuation element <gi>pc</gi> you would get a similar articulation:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><quote>
         <l>The fair Ophelia<pc unit="sentence">!</pc>Nymph, in thy orisons</l>
         <l> Be all my sins remembered<pc unit="sentence">.</pc></l>
        </quote></egXML>
            You could also use the <att>next</att> and <att>previous</att> attributes to tie the two <gi>s</gi> elements
            together:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><quote>
         <l>The fair Ophelia!
          <s xml:id="s1" next="#s2">Nymph, in thy orisons</s></l>
         <l> <s xml:id="s2" previous="#s1">Be all my sins remembered.</s></l>
        </quote></egXML>
            These workarounds do a more or less adequate job at articulating a secondary structure in the face of a
            dominant structure, but they are workarounds. There are other and more powerful workarounds. Chapter 18 of the Guidelines discusses <term>feature structures</term>,
            and there is <term>stand-off markup</term>, where different forms of textual segmentation and annotation 
            are kept in separate documents that point to individual tokens or token ranges in the text. 
            Feature structures take you well beyond TEI Simple, and stand-off will also be mostly beyond its range.  </p>
          <p>The second axiom, that content is entirely separable from presentation, will rub most literary critics the
            wrong way. If you are used to reading a book printed in <term>Fraktur</term> you may feel that printing it
            in <term>Antiqua</term> robs it of its spirit. In Vergil's <title>Eclogues</title> up or down things happen
            at oddly regular intervals. Vergil appears to have written these poems on page blocks with forty lines and
            knew when he was writing at the top of page (nice words about Maecenas) or at the bottom (bad things
            happening to bad guys). There are countless examples of playing with layout and typography, from George
            Herbert to concrete poetry.</p>
          <p> If you make the physical layout of a text the organizing structure you can do that by using the
              <gi>surface</gi> element and its children. That is also beyond the scope of TEI Simple, but it is fully
            documented in Chapter 11 of the <title>Guidelines</title>.
          </p>
          <p>TEI is about <term>text</term>, and texts are written in <term>natural</term> languages. Natural Language
            Processing (NLP) is a very important part of computing. If you engage in it you will discover early on that
            human language is highly rule-bound, that you can write procedures that will allow a machine to capture many
            of these rules very accurately and at great speed, but there is always an algorithmically intractable
            residue. St. Jerome, the translator of the Bible into Latin, spoke of <quote xml:lang="la">ipsum... suum et,
              ut ita dicam, vernaculum linguae genus</quote> (the distinct and as it were vernacular nature of each
            language) and the 16th-century French poet Du Bellay argued that literal translation destroys the <quote
              xml:lang="la">je ne scay quoy</quote> of a language. Pope wrote of a <quote>grace beyond the reach of
              art</quote>. Text encoding is a way of enabling a machine to process texts in ways that help human readers
            "make sense" of them. The machine can take you quite far, but it will only take you so far. In an encoding
            project of any complexity there will always be some moments when you remember this line from Wallace
            Stevens' <title>Connoisseurs of Chaos:</title>
          </p>
          <l>The squirming facts exceed the squamous mind.</l>
        </div>
        <div xml:id = "tagabuse">
          <head>Should, Should Not, and Tag Abuse</head>
          <p>Valid encoding is not necessarily good encoding, just as rigid compliance with the law does not always square
          with justice. Here we are in the realm of Aristotle's <foreign>epieikia</foreign> or equity as a principle
          that complements rigid compliance with a set of rules. The word  lives in a space tenuously circumscribed
          by the probable, the reasonable, and the appropriate--very much like the space of the French twins
          <term>vraisemblance</term> and <term>bienséance</term>. What SHOULD you do when confronted with a problem to which
          the schema offers no obvious solution? Do as your neighbours do is good advice when you live in a good neighbourhood, 
          and as a TEI encoder you happen to live in a very friendly and helpful neighbourhood.
          Sign up for the <ref target ="https://listserv.brown.edu/archives/cgi-bin/wa?A0=TEI-L" >TEI listserv </ref> and ask 
          for advice.  It will come to you from just about any continent, very promptly at any hour of the day or night, 
          and it is nearly always relevant. Following the TEI list and pondering its advice is the best way of getting a 
          feel for the discretionary space that surrounds all rules in a given environment. It will keep you from committing <term>tag abuse</term>, 
          the TEI community's term for encoding practices that are valid but make no sense or worse.</p>
        </div>

      </div>

      <div>
        <head>A tour of TEI Simple from an encoding perspective</head>

        <div xml:id="Simple-eg">
          <head>A Short Example</head>
          <p>We begin with a short example, intended to show what happens when a passage of prose is typed into a
            computer by someone with little sense of the query potential of a digitally encoded text. In an ideal world,
            such output might be generated by a very accurate optical scanner. It attempts to be faithful to the
            appearance of the printed text, by retaining the original line breaks, by introducing blanks to represent
            the layout of the original headings and page breaks, and so forth. Where characters not available on the
            keyboard are needed (such as the accented letter <mentioned>a</mentioned> in <mentioned>faàl</mentioned> or
            the long dash), it attempts to mimic their appearance.</p>
          <p>
            <eg xml:space="preserve">
                                CHAPTER 38

READER, I married him. A quiet wedding we had: he and I, the par-
son and clerk, were alone present. When we got back from church, I
went into the kitchen of the manor-house, where Mary was cooking
the dinner, and John cleaning the knives, and I said --
  'Mary, I have been married to Mr Rochester this morning.' The
housekeeper and her husband were of that decent, phlegmatic
order of people, to whom one may at any time safely communicate a
remarkable piece of news without incurring the danger of having
one's ears pierced by some shrill ejaculation and subsequently stunned
by a torrent of wordy wonderment. Mary did look up, and she did
stare at me; the ladle with which she was basting a pair of chickens
roasting at the fire, did for some three minutes hang suspended in air,
and for the same space of time John's knives also had rest from the
polishing process; but Mary, bending again over the roast, said only --
   'Have you, miss? Well, for sure!'
   A short time after she pursued, 'I seed you go out with the master,
but I didn't know you were gone to church to be wed'; and she
basted away. John, when I turned to him, was grinning from ear to
ear.
   'I telled Mary how it would be,' he said: 'I knew what Mr Ed-
ward' (John was an old servant, and had known his master when he
was the cadet of the house, therefore he often gave him his Christian
name) -- 'I knew what Mr Edward would do; and I was certain he
would not wait long either: and he's done right, for aught I know. I
wish you joy, miss!' and he politely pulled his forelock.
   'Thank you, John. Mr Rochester told me to give you and Mary
this.'
   I put into his hand a five-pound note.  Without waiting to hear
more, I left the kitchen. In passing the door of that sanctum some time
after, I caught the words --
   'She'll happen do better for him nor ony o' t' grand ladies.' And
again, 'If she ben't one o' th' handsomest, she's noan faa\l, and varry
good-natured; and i' his een she's fair beautiful, onybody may see
that.'
   I wrote to Moor House and to Cambridge immediately, to say what
I had done: fully explaining also why I had thus acted. Diana and

                            474

                 JANE EYRE                      475

Mary approved the step unreservedly. Diana announced that she
would just give me time to get over the honeymoon, and then she
would come and see me.
   'She had better not wait till then, Jane,' said Mr Rochester, when I
read her letter to him; 'if she does, she will be too late, for our honey-
moon will shine our life long: its beams will only fade over your
grave or mine.'
   How St John received the news I don't know: he never answered
the letter in which I communicated it: yet six months after he wrote
to me, without, however, mentioning Mr Rochester's name or allud-
ing to my marriage. His letter was then calm, and though very serious,
kind. He has maintained a regular, though not very frequent correspond-
ence ever since: he hopes I am happy, and trusts I am not of those who
live without God in the world, and only mind earthly things.

      </eg>
          </p>
          <p>This transcription suffers from a number of shortcomings: <list>
              <item>the page numbers and running titles are intermingled with the text in a way which makes it difficult
                for software to disentangle them;</item>
              <item>no distinction is made between single quotation marks and apostrophe, so it is difficult to know
                exactly which passages are in direct speech;</item>
              <item>the preservation of the copy text's hyphenation means that simple-minded search programs will not
                find the broken words;</item>
              <item>the accented letter in <mentioned>faàl</mentioned> and the long dash have been rendered by ad hoc
                keying conventions which follow no standard pattern and will be processed correctly only if the
                transcriber remembers to mention them in the documentation;</item>
              <item>paragraph divisions are marked only by the use of white space, and hard carriage returns have been
                introduced at the end of each line. Consequently, if the size of type used to print the text changes,
                reformatting will be problematic.</item>
            </list></p>
          <p>We now present the same passage, as it might be encoded in TEI Simple. As we shall see, there are many ways
            in which this encoding could be extended, but as a minimum, the TEI approach allows us to represent the
            following distinctions: <list>
              <item>Paragraph and chapter divisions are now marked explicitly.</item>
              <item>Apostrophes are distinguished from quotation marks; direct speech is explicitly marked.</item>
              <item>The accented letter and the long dash are correctly represented.</item>
              <item>Page divisions have been marked with an empty <gi>pb</gi> element alone.</item>
              <item>The lineation of the original has not been retained and words broken by typographic accident at the
                end of a line have been re-assembled without comment.</item>
              <item>For convenience of proof reading, a new line has been introduced at the start of each paragraph, but
                the indentation is removed.</item>
            </list>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <pb n="474"/>
      <div type="chapter" n="38">
       <p>Reader, I married him. A quiet wedding we had: he and I, the parson and clerk, were alone
        present. When we got back from church, I went into the kitchen of the manor-house, where
        Mary was cooking the dinner, and John cleaning the knives, and I said —</p>
       <p><q>Mary, I have been married to Mr Rochester this morning.</q> The housekeeper and her
        husband were of that decent, phlegmatic order of people, to whom one may at any time safely
        communicate a remarkable piece of news without incurring the danger of having one's ears
        pierced by some shrill ejaculation and subsequently stunned by a torrent of wordy
        wonderment. Mary did look up, and she did stare at me; the ladle with which she was basting
        a pair of chickens roasting at the fire, did for some three minutes hang suspended in air,
        and for the same space of time John's knives also had rest from the polishing process; but
        Mary, bending again over the roast, said only —</p>
       <p><q>Have you, miss? Well, for sure!</q></p>
       <p>A short time after she pursued, <q>I seed you go out with the master, but I didn't know
         you were gone to church to be wed</q>; and she basted away. John, when I turned to him, was
        grinning from ear to ear. <q>I telled Mary how it would be,</q> he said: <q>I knew what Mr
         Edward</q> (John was an old servant, and had known his master when he was the cadet of the
        house, therefore he often gave him his Christian name) — <q>I knew what Mr Edward would do;
         and I was certain he would not wait long either: and he's done right, for aught I know. I
         wish you joy, miss!</q> and he politely pulled his forelock.</p>
       <p><q>Thank you, John. Mr Rochester told me to give you and Mary this.</q></p>
       <p>I put into his hand a five-pound note. Without waiting to hear more, I left the kitchen.
        In passing the door of that sanctum some time after, I caught the words —</p>
       <p><q>She'll happen do better for him nor ony o' t' grand ladies.</q> And again, <q>If she
         ben't one o' th' handsomest, she's noan faàl, and varry good-natured; and i' his een she's
         fair beautiful, onybody may see that.</q></p>
       <p>I wrote to Moor House and to Cambridge immediately, to say what I had done: fully
        explaining also why I had thus acted. Diana and <pb n="475"/> Mary approved the step
        unreservedly. Diana announced that she would just give me time to get over the honeymoon,
        and then she would come and see me.</p>
       <p><q>She had better not wait till then, Jane,</q> said Mr Rochester, when I read her letter
        to him; <q>if she does, she will be too late, for our honeymoon will shine our life long:
         its beams will only fade over your grave or mine.</q></p>
       <p>How St John received the news I don't know: he never answered the letter in which I
        communicated it: yet six months after he wrote to me, without, however, mentioning Mr
        Rochester's name or alluding to my marriage. His letter was then calm, and though very
        serious, kind. He has maintained a regular, though not very frequent correspondence ever
        since: he hopes I am happy, and trusts I am not of those who live without God in the world,
        and only mind earthly things.</p>
      </div></egXML></p>
          <p>This particular encoding represents a set of choices or priorities. As a trivial example, note that in the
            second example, end-of-line hyphenation has been silently removed. Conceivably Brontë (or her printer)
            intended the word <q>honeymoon</q> to appear as <q>honey-moon</q> on its second appearance, though this
            seems unlikely: our decision to focus on Brontë's text, rather than on the printing of it in this particular
            edition, makes it impossible to be certain. This is an instance of the fundamental <hi>selectivity</hi> of
            any encoding. An encoding makes explicit only those textual features of importance to the encoder. It is not
            difficult to think of ways in which the encoding of even this short passage might readily be extended. For
            example: <list type="simple">
              <item>a regularized form of the passages in dialect could be provided; </item>
              <item>footnotes glossing or commenting on any passage could be added;</item>
              <item>pointers linking parts of this text to others could be added;</item>
              <item>proper names of various kinds could be distinguished from the surrounding text;</item>
              <item>names could be classified as personal, geographical, or institutional</item>
              <item>detailed bibliographic information about the text's provenance and context could be prefixed to
                it;</item>
              <item>a linguistic analysis of the passage into sentences, clauses, words, etc., could be provided, each
                unit being associated with appropriate category codes;</item>
              <item>the text could be segmented into narrative or discourse units;</item>
              <item>systematic analysis or interpretation of the text could be included in the encoding, with
                potentially complex alignment or linkage between the text and the analysis, or between the text and one
                or more translations of it;</item>
              <item>passages in the text could be linked to images or sound held on other media.</item>
            </list></p>
          <p>TEI-recommended ways of carrying out most of these are described in the remainder of this document. Consult
            the full <title>Guidelines</title> for more detail.</p>
        </div>
        <div xml:id="Simple-struc">
          <head>The Structure of a TEI Text</head>
          <p>Almost all TEI-conformant texts contain (a) a <term>TEI header</term> (marked up as a <gi>teiHeader</gi>
            element) and (b) the transcription of the text proper (marked up as a <gi>text</gi> element). These two
            elements are combined together to form a single <gi>TEI</gi> element, which must be declared within the TEI
            namespace. The full name of the <gi>TEI</gi> element is &lt;TEI xmlns="http://www.tei-c.org/ns/1.0"&gt; .</p>
          <p> The header is described in more detail in section <ptr target="#Simple-header"/>. The word "almost" at
          the beginning of the previous  paragraph acknowledges the existence of a form of TEI encoding that seeks
          to capture what is often
            called the <term>materiality</term> of the text. Some of the relevant element names , <gi>facsimile</gi>,
              <gi>surface</gi>, <gi>zone</gi>, give you a sense of this approach, where the content of element would be
            images or other media types rather than transcribed text. While this set of elements is outside the scope of
            TEI Simple, digital representations that combine transcription with facsimiles are likely to be more common
            in the future. The global <att>facs</att> attribute is the obvious device for linking pages or other chunks
            of transcribed TEI Simple text to facsimiles. For more information consult the section on <ref target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/PH.html#PHFAX">Digital Facsimiles</ref>
            in the <title>Guidelines</title>. </p>
          <p>A TEI text may be <term>unitary</term> (a single work) or <term>composite</term> (a collection of single
            works, such as an anthology). In either case, the text may have an optional <term>front</term> or
              <term>back</term>. In between is the <term>body</term> of the text, which, in the case of a composite
            text, may consist of <term>groups</term>, each containing more groups or texts.</p>
          <p>A unitary text will be encoded using an overall structure like this:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><TEI>
       <teiHeader><!-- [ TEI Header information ]  --></teiHeader>
       <text>
        <front><!-- [ front matter ... ] -->
        </front>
        <body>
         <!-- [ body of text ... ]  -->
        </body>
        <back><!--  [ back matter ...  ] -->
        </back>
       </text>
      </TEI></egXML></p>

          <p>Note that in the example above the text between "&lt;!--" and "--&gt;" is a comment that is ignored by the
            XML parser. You can use the same convention for interspersing comments in your XML document, and it will be
            similarly ignored. Why then does it show up in the example? Everything in the example is wrapped in a
            special &lt;egXML&gt; element, which lets you display "raw" XML fragments without the XML parser acting on
            them.</p>
          <p>In the remainder of this document, we discuss chiefly simple text structures, but composite texts are
            briefly discussed in <ptr target="#Simple-composite"/> In each of the following sections we begin with a short
            list of relevant TEI <term>elements</term> and give their formal definition, followed by definitions for any
              <term>attributes</term> specific to that element. These references are linked to full specifications for
            each object, as given in the TEI <title>Guidelines</title>. In most cases, short examples are also
            given.</p>
          <p>For example, here are the elements discussed so far: <specList>
              <specDesc key="TEI"/>
              <specDesc key="teiHeader"/>
              <specDesc key="text"/>
              <specDesc key="teiCorpus"/>
            </specList></p>
        </div>


        <div xml:id="Simple-body">
          <head>Encoding the Body</head>
          <p>As indicated above, a simple TEI document at the textual level consists of the following elements: <specList>
              <specDesc key="front"/>
              <specDesc key="group"/>
              <specDesc key="body"/>
              <specDesc key="back"/>
            </specList> Elements specific to front and back matter are described below in section <ptr
              target="#Simple-fronbac"/>. In this section we discuss the elements making up the body of a text. </p>
          <div xml:id="divs">
            <head>Text Division Elements</head>
            <p>The body of a prose text may be just a series of paragraphs, or these paragraphs may be grouped together
              into chapters, sections, subsections, etc. Each paragraph is tagged using the <gi>p</gi> tag. The
                <gi>div</gi> element is used to represent any such grouping of paragraphs. <specList>
                <specDesc key="p"/>
                <specDesc key="div"/>
              </specList>
            </p>
            <p>The <att>type</att> attribute on the <gi>div</gi> element may be used to supply a conventional name for
              this category of text division, or otherwise distinguish them. Typical values might be <q>book</q>,
                <q>chapter</q>, <q>section</q>, <q>part</q>, <q>poem</q>, <q>song</q>, etc. For a given project, it will
              usually be advisable to define and adhere to a specific list of such values. </p>
            <p>A <gi>div</gi> element may itself contain further, nested, <gi>div</gi>s, thus mimicking the traditional
              structure of a book, which can be decomposed hierarchically into units such as parts, containing chapters,
              containing sections, and so on. TEI texts in general conform to this simple hierarchic model.</p>
            <p> The <att>xml:id</att> attribute may be used to supply a unique identifier for the division, which may be
              used for cross references or other links to it, such as a commentary, as further discussed in section <ptr
                target="#Simple-ptrs"/>. It is often useful to provide an <att>xml:id</att> attribute for every major
              structural unit in a text, and to derive its values in some systematic way, for example by appending a
              section number to a short code for the title of the work in question, as in the examples below. It is
              particularly useful to supply such identifiers if the resource concerned is to be made available over the
              web, since they make it much easier for other web-based applications to link directly to the corresponding
              parts of your text. </p>
            <p>The <att>n</att> attribute may be used to supply (additionally or alternatively) a short mnemonic name or
              number for a division, or any other element. If a conventional form of reference or abbreviation for the
              parts of a work already exists (such as the book/chapter/verse pattern of Biblical citations), the
                <att>n</att> attribute is the place to record it; unlike the identifier supplied by <att>xml:id</att>,
              it does not need to be unique.</p>
            <p>The <att>xml:lang</att> attribute may be used to specify the language of the division. Languages are
              identified by an internationally defined code, as further discussed in section <ptr target="#z636"/>
              below.</p>
            <p>The <att>rendition</att> attribute may be used to supply information about the rendition (appearance) of
              a division, or any other element, as further discussed in section <ptr target="#Simple-hilites"/> below. You
              should document your use of the possible values of <att>rendition</att> in the tagging declaration
                (<gi>tagsDecl</gi>) of your header.</p>
            <p> These four attributes, <att>xml:id</att>, <att>n</att>, <att>xml:lang</att>, and <att>rend</att> are so
              widely useful that they are allowed on any element in any TEI schema: they are <term>global
                attributes</term>. Other global attributes defined in the TEI Simple schema are discussed in section
                <ptr target="#xatts"/>.</p>
            <p>The value of every <att>xml:id</att> attribute should be unique within a document or across a corpus, if
              your project spans many texts.. One simple way of ensuring that this is so is to make it reflect the
              hierarchic structure of the document. For example, Smith's <title>Wealth of Nations</title> as first
              published consists of five books, each of which is divided into chapters, while some chapters are further
              subdivided into parts. We might define <att>xml:id</att> values for this structure as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><body>
        <div xml:id="WN1" n="I" type="book">
         <div xml:id="WN101" n="I.1" type="chapter">
          <!-- ... -->
         </div>
         <div xml:id="WN102" n="I.2" type="chapter">
          <!-- ... -->
         </div>
         <!-- ... -->
         <div xml:id="WN110" n="I.10" type="chapter">
          <div xml:id="WN1101" n="I.10.1" type="part">
           <!-- ... -->
          </div>
          <div xml:id="WN1102" n="I.10.2" type="part">
           <!-- ... -->
          </div>
         </div>
         <!-- ... -->
        </div>
        <div xml:id="WN2" n="II" type="book">
         <!-- ... -->
        </div>
       </body></egXML></p>
            <p>A different numbering scheme may be used for <att>xml:id</att> and <att>n</att> attributes: this is often
              useful where a canonical reference scheme is used which does not tally with the structure of the work. For
              example, in a novel divided into books each containing chapters, where the chapters are numbered
              sequentially through the whole work, rather than within each book, one might use a scheme such as the
              following:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><body>
        <div xml:id="TS01" n="1" type="volume">
         <div xml:id="TS011" n="1" type="chapter">
          <!-- ... -->
         </div>
         <div xml:id="TS012" n="2" type="chapter">
          <!-- ... --></div>
        </div>
        <div xml:id="TS02" n="2" type="volume">
         <div xml:id="TS021" n="3" type="chapter">
          <!-- ... --></div>
         <div xml:id="TS022" n="4" type="chapter">
          <!-- ... --></div>
        </div>
       </body></egXML>
              Here the work has two volumes, each containing two chapters. The chapters are numbered conventionally 1 to
              4, but the <att>xml:id</att> values specified allow them to be regarded additionally as if they were
              numbered 1.1, 1.2, 2.1, 2.2.</p>
          </div>
          <div xml:id="h25">
            <head>Headings and Closings</head>
            <p>Every <gi>div</gi> may have a title or heading at its start, and (less commonly) a trailer such as <q>End
                of Chapter 1</q> at its end. The following elements may be used to transcribe them: <specList>
                <specDesc key="head"/>
                <specDesc key="trailer"/>
              </specList> Some other elements which may be necessary at the beginning or ending of text divisions are
              discussed below in section <ptr target="#h52"/>.</p>
            <p>Whether or not headings and trailers are included in a transcription is a matter for the individual
              transcriber to decide. Where a heading is completely regular (for example <q>Chapter 1</q>) or may be
              automatically constructed from attribute values (e.g. <code>&lt;div type="chapter" n="1"&gt;</code>), it
              may be omitted; where it contains otherwise unrecoverable text it should always be included. For example,
              the start of Hardy's <title>Under the Greenwood Tree</title> might be encoded as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><div xml:id="UGT1" n="Winter" type="Part">
        <div xml:id="UGT11" n="1" type="Chapter">
         <head>Mellstock-Lane</head>
         <p>To dwellers in a wood almost every species of tree ... </p>
        </div>
       </div></egXML></p>
          </div>
          <div xml:id="vedr">
            <head>Prose, Verse and Drama</head>
            <p>As in the Bronte example above, the paragraphs making up a textual division are tagged with the
                <gi>p</gi> tag. In poetic or dramatic texts different tags are needed, to represent verse lines and
              stanzas in the first case, or individual speeches and stage directions in the second. : <specList>
                <specDesc key="l"/>
                <specDesc key="lg"/>
                <specDesc key="sp"/>
                <specDesc key="speaker"/>
                <specDesc key="stage"/>
              </specList>
            </p>
            <p>Here, for example, is the start of a poetic text in which verse lines and stanzas are tagged:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><lg n="I"><l>I Sing the progresse of a
         deathlesse soule,</l><l>Whom Fate, with God made, but doth not controule,</l><l>Plac'd in
         most shapes; all times before the law</l><l>Yoak'd us, and when, and since, in this I
         sing.</l><l>And the great world to his aged evening;</l><l>From infant morne, through manly
         noone I draw.</l><l>What the gold Chaldee, of silver Persian saw,</l><l>Greeke brass, or
         Roman iron, is in this one;</l><l>A worke t'out weare Seths pillars, bricke and
         stone,</l><l>And (holy writs excepted) made to yeeld to none,</l></lg></egXML></p>
            <p>Note that the <gi>l</gi> element marks verse lines, not typographic lines: the original lineation of the
              first few lines above has not therefore been made explicit by this encoding, and may be lost. The
                <gi>lb</gi> element described in section <ptr target="#Simple-pln"/> might additionally be used to mark
              typographic lines if so desired. </p>
            <p>Here is the end of a famous dramatic text, in which speeches and stage directions are marked:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <sp><speaker>Vladimir</speaker><p>Pull on your trousers.</p></sp>
       <sp><speaker>Estragon</speaker><p>You want me to pull off my trousers?</p></sp>
       <sp><speaker>Vladimir</speaker><p>Pull <emph>on</emph> your trousers.</p></sp>
       <sp><speaker>Vladimir</speaker><p><stage>(realizing his trousers are down)</stage>.
        True</p></sp>
       <stage>He pulls up his trousers</stage>
       <sp><speaker>Vladimir</speaker><p>Well? Shall we go?</p></sp>
       <sp><speaker>Estragon</speaker><p>Yes, let's go.</p></sp>
       <stage>They do not move.</stage>
      </egXML>
            </p>
            <p>Note that the <gi>stage</gi> (stage direction) element can appear either within a speech or between
              speeches. The <gi>sp</gi> ("speech") element contains, following an optional <gi>speaker</gi> element
              indicating who is speaking, either paragraphs (if the speech is in prose) or verse lines or stanzas as in
              the next example. In this case, it is quite common to find that verse lines are split between speakers.
              The easiest way of encoding this is to use the <att>part</att> attribute to indicate that the lines so
              fragmented are incomplete:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><div type="Act" n="I">
        <head>ACT I</head>
        <div type="Scene" n="1">
         <head>SCENE I</head>
         <stage rendition="#italic"> Enter Barnardo and Francisco, two Sentinels, at several doors</stage>
         <sp>
          <speaker>Barn</speaker>
          <l part="Y">Who's there?</l>
         </sp>
         <sp>
          <speaker>Fran</speaker>
          <l>Nay, answer me. Stand and unfold yourself.</l>
         </sp>
         <sp>
          <speaker>Barn</speaker>
          <l part="I">Long live the King!</l>
         </sp>
         <sp>
          <speaker>Fran</speaker>
          <l part="M">Barnardo?</l>
         </sp>
         <sp>
          <speaker>Barn</speaker>
          <l part="F">He.</l>
         </sp>
         <sp>
          <speaker>Fran</speaker>
          <l>You come most carefully upon your hour.</l>
         </sp>
         <!-- ... -->
        </div>
       </div></egXML></p>
            <p>The same mechanism may be applied to stanzas which are divided between two speakers:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><div>
        <sp>
         <speaker>First voice</speaker>
         <lg type="stanza" part="I">
          <l>But why drives on that ship so fast</l>
          <l>Withouten wave or wind?</l>
         </lg>
        </sp>
        <sp>
         <speaker>Second Voice</speaker>
         <lg part="F">
          <l>The air is cut away before.</l>
          <l>And closes from behind.</l>
         </lg>
        </sp>
        <!-- ... -->
       </div></egXML>
            </p>
            <p>The <gi>sp</gi> element can also be used for dialogue presented in a prose work as if it were drama, as
              in the next example, which also demonstrates the use of the <att>who</att> attribute to bear a code
              identifying the speaker of the piece of dialogue concerned:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><div>
        <sp who="#OPI">
         <speaker>The reverend Doctor Opimian</speaker>
         <p>I do not think I have named a single unpresentable fish.</p>
        </sp>
        <sp who="#GRM">
         <speaker>Mr Gryll</speaker>
         <p>Bream, Doctor: there is not much to be said for bream.</p>
        </sp>
        <sp who="#OPI">
         <speaker>The Reverend Doctor Opimian</speaker>
         <p>On the contrary, sir, I think there is much to be said for him. In the first
          place....</p>
         <p>Fish, Miss Gryll -- I could discourse to you on fish by the hour: but for the present I
          will forbear.</p>
        </sp>
       </div></egXML>
              Here the <att>who</att> attribute values (<code>#OPI</code> etc.) are links, pointing to a list of the
              characters in the novel, each of which has an identifier:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <list><head>Characters in the novel</head>
        <item xml:id="OPI"><name>Dr Opimian</name> : named for the famous Roman fine wine</item>
        <item xml:id="GRM"><name>Mr Gryll</name> : named for the mythical Gryllus, one of Ulysses'
         sailors transformed by Circe into a pig, who argues that he was happier in that state than
         as a man</item>
       </list></egXML></p>
          </div>
        </div>
        <div xml:id="Simple-pln">
          <head>Page and Line Numbers</head>
          <p>Page and line breaks etc. may be marked with the following elements. <specList>
              <specDesc key="pb"/>
              <specDesc key="lb"/>
              <specDesc key="milestone"/>
            </specList> The <gi>pb</gi> and <gi>lb</gi> elements are special cases of the general class of
              <term>milestone</term> elements which mark reference points within a text. The generic <gi>milestone</gi>
            element can mark any kind of reference point: for example, a column break, the start of a new kind of
            section not otherwise tagged, or in general any significant change in the text not marked by an XML element.
            Milestone elements have no content; whatever they have to say is contained in their attributes, most
            frequently a <gi>unit</gi> attribute in combination with an <att>n</att> attribute. Their "empty" status is
            marked by the fact that their opening and closing tags are collapsed into one: the notation
            &lt;milestone/&gt; is a shortcut for &lt;milestone&gt;&lt;/milestone&gt;. </p>
          <p>The <gi>lb</gi> and <gi>pb</gi> elements are shortcuts or <term>syntactic sugar</term> for
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><milestone unit="line"/></egXML> or
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><milestone unit="page"/></egXML>
          </p>

          <p>When working from a paginated original, it is often useful to record its pagination, if only to simplify
            later proof-reading. It is also useful for aligning an encoded text with a set of page images. The
              <att>facs</att> attribute helps with this alignment, which is not always straightforward. The numbering
            schemes of the printed pages and their image may, but often do not, correspond. The Text Creation
            Partnership transcriptions of Early English Books Online texts are a good example. The transcriptions were
            based on digital scans of double page microfilm images. Each double page image has an image number, which
            does not correspond to the page number, not to speak of the many printed pages that have no page numbers to
            begin with. Consider the following three examples: <egXML xmlns="http://www.tei-c.org/ns/Examples"><pb facs="page8" n="14"/></egXML>
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><pb facs="page8" n="15"/></egXML>
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><pb facs="page8"/></egXML> In the first two examples, you
            have the printed page numbers for a double page image. The third example refers to a page image whose pages
            have no printed numbers. The value of the <att>facs</att> attribute could also be a complete URL to the site
            where the images are located, but if its first and longer part has been recorded once in the metadata, the
            simple image number will be sufficient to construct a link.</p>
          <p> The placement of <gi>pb</gi> elements relative to their surrounding elements is a tricky matter of SHOULD.
            While TEI schema does not restrict their placement, it is recommended that milestone elements for lines,
            pages, or whatever should mark their beginning. Consider the case of a poem where two lines are split across
            different pages. All of the following encodings are valid TEI: <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <l>Mary had a little lamb</l>
       <pb n="13" facs="7"/>
       <l>Its fleece was white as snow</l>
      </egXML>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <l>Mary had a little lamb</l>
       <l><pb n="13" facs="7"/>Its fleece was white as snow</l>
      </egXML>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <l>Mary had a little lamb<pb n="13" facs="7"/></l>
       <l>Its fleece was white as snow</l>
      </egXML>
            While the third example is valid, it breaks the rule that you should put milestones at the beginning. The
            first and second examples observe that rule, but the first example is preferable on logical, aesthetic and
            practical grounds. The new page begins with the line rather than the first word in the line.The placement of
            the milestone before the line makes processing a little easier. It is also a little easier to read, and
            while XML documents are not created for readers, they are in principle readable, and greater readability is
            a marginal benefit. </p>

          <p> Line breaks in prose are for the most part typographical accidents, and many encoders will rightly think
            of them as not worth their attention. But sometimes you do want to make the transcription mirror the
            physical layout of the written word on the page. This is especially true of manuscripts where the precise
            alignment of image and transcription makes things easier for the reader. </p>
          <p> Digital transcriptions produced with optical character recognition (OCR) create special opportunities and
            challenges. They mimic the boundaries of characters, words, and lines on the page, and from their
            "whitespace XML" you can algorithmically infer much structural encoding, although the algorithmic constructs
            will always need some manual tweaking. OCR texts also require careful proofreading. This work will clearly
            benefit from the line-by-line correspondence of page image and transcription.</p>

          <p>End-of-line (EOL) hyphens are a vexing problem for which there is no good solution. For many purposes it
            may be good enough to get rid of them tacitly. Given
            <eg xml:space="preserve">
                                          I am not per-
               suaded that EOL hyphens are worth keeping.
           </eg>
            you can turn this into <eg xml:space="preserve">I am not persuaded that EOL hyphens are worth keeping.</eg>
            If you want to mark the line breaks of the printed source you could remove the EOL hyphen and keep the word
            on the line where it began, as in
            <eg xml:space="preserve">
           I am not persuaded 
           &lt;lb/&gt; that EOL hyphens are worth keeping</eg>
            This is a perfectly acceptable solution, and few readers will object to it, especially if you document your
            practice in the relevant section of the header. The downside of both solutions is that you may accidentally
            delete what you think is an EOL hyphen when if fact it is a real hyphen. There are ways of protecting
            yourself against such an error. Check if that word occurs with a hyphen in line-medial position. If it does
            not, you are probably safe. In the unlikely event that it occurs in line-medial position both with and
            without a hyphen you would not know which it is in the line-terminal position. But relax: there is textual
            authority for whichever way you jump. </p>
          <p>Recording the presence of an EOL hyphen in a completely unambiguous manner turns out to be surprisingly
            difficult. First, while there are several Unicode characters that look like a hyphen, there is none that
            unambiguously declares: <q>I am an EOL hyphen</q>. You can do something like
            <egXML xmlns="http://www.tei-c.org/ns/Examples">I am not per-<lb/>suaded that EOL hyphens are worth keeping.</egXML>
            That leaves the status of your hyphen ambiguous but then it was ambiguous in the source as well. This
            solution (or other variants of it) makes it a little more difficult for the machine to figure out that 'per'
            and 'suaded' are a single token. In a cost benefit analysis you have to figure out whether the additional
            processing cost is worth the gain of typographical detail.</p>

          <note>
            <p>If features such as pagination or lineation are marked for more than one edition, specify the edition in
              question using the <att>ed</att> attribute, and supply as many tags are necessary. For example, in the
              following passage we indicate where the page breaks occur in two different editions (<val>ED1</val> and
                <val>ED2</val>)
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>I wrote to Moor House and to Cambridge immediately, to say what I had done: fully
        explaining also why I had thus acted. Diana and <pb ed="ED1" n="475"/> Mary approved the step
        unreservedly. Diana announced that she would <pb ed="ED2" n="485"/>just give me time to get
        over the honeymoon, and then she would come and see me.</p></egXML></p></note>


        </div>
        <div xml:id="Simple-hilites">
          <head>Marking Highlighted Phrases</head>
          <div xml:id="faces">
            <head>Changes of Typeface, etc.</head>
            <p>Highlighted words or phrases are those made visibly different from the rest of the text, typically by a
              change of type font, handwriting style, ink colour etc., which is intended to draw the reader's attention
              to some associated change.</p>
            <p>The global <att>rendition</att> attribute can be attached to any element, and used wherever necessary to
              specify details of the highlighting used for it in the source. For example, a heading rendered in bold
              might be tagged <code>&lt;head rendition="#bold"&gt;</code>, and one in italic <code>&lt;head
                rendition="#italic"&gt;</code>.</p>
            <p>The values to be used for the <att>rendition</att> attribute are not specified by the TEI Guidelines,
              since they will depend entirely on the needs of the particular project. Some typical values might include
                <code>italic</code>, <code>bold</code>
              <!--, <code>sup</code>(erior)--> etc. for font variations; <code>center</code>, <code>right</code> etc.
              for alignment; <code>large</code>, <code>small</code> etc. for size; <code>smallcaps</code>,
                <code>allcaps</code> etc. for type variants and so on.
              <!-- DELETE Several such words may be used in combination as necessary, but no formal
      syntax is proposed. The full TEI Guidelines provide more rigorous mechanisms, using other W3C
      standards such as CSS, as an alternative to the use of <att>rend</att>.-->
            </p>
            <p>It is not always possible or desirable to interpret the reasons for such changes of rendering in a text.
              In such cases, the element <gi>hi</gi> may be used to mark a sequence of highlighted text without making
              any claim as to its status. <specList>
                <specDesc key="hi"/>
              </specList></p>
            <p>In the following example, the use of a distinct typeface for the subheading and for the included name are
              recorded but not interpreted:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p><hi rendition="#gothic">And this Indenture further
         witnesseth</hi> that the said <hi rendition="#italic">Walter Shandy</hi>, merchant, in
        consideration of the said intended marriage ...</p></egXML></p>
            <p>Alternatively, where the cause for the highlighting can be identified with confidence, a number of other,
              more specific, elements are available. <specList>
                <!-- <specDesc key="emph"/>-->
                <specDesc key="foreign"/>
                <!--<specDesc key="gloss"/>-->
                <specDesc key="label"/>
                <!--<specDesc key="mentioned"/>-->
                <!--<specDesc key="term"/>-->
                <specDesc key="title"/>
              </specList></p>
            <p>Some features (notably quotations <!--and glosses--> {titles, and foreign words) may be found in a text
              either marked by highlighting, or with quotation marks. In either case, the element <gi>q</gi>
              <!--and
       <gi>gloss</gi>--> (as discussed in the following section) should be used. If the
              highlighting is to be recorded, use the global <att>rendition</att> attribute.</p>
            <p>As an example of the elements defined here, consider the following sentence: <q rendition="#display">On
                the one hand the <hi rendition="#it">Nibelungenlied</hi> is associated with the new rise of romance of
                twelfth-century France, the <hi rendition="#it">romans d'antiquité</hi>, the romances of Chrétien de
                Troyes, and the German adaptations of these works by Heinrich van Veldeke, Hartmann von Aue, and Wolfram
                von Eschenbach.</q> Interpreting the role of the highlighting, the sentence might look like this:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>On the one hand the <title>Nibelungenlied</title>
        is associated with the new rise of romance of twelfth-century France, the <foreign>romans
         d'antiquité</foreign>, the romances of Chrétien de Troyes, ...</p></egXML>
              Describing only the appearance of the original, it might look like this:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>On the one hand the <hi rendition="#italic">Nibelungenlied</hi> is associated with the new rise of romance of twelfth-century France,
        the <hi rendition="#italic">romans d'antiquité</hi>, the romances of Chrétien de Troyes,
       ...</p></egXML></p>
          </div>
          <div xml:id="z635">
            <head>Quotations and Related Features</head>
            <p>Like changes of typeface, quotation marks are conventionally used to denote several different features
              within a text, of which the most frequent is quotation. When possible, we recommend that the underlying
              feature be tagged, rather than the simple fact that quotation marks appear in the text, using the
              following elements: <specList>
                <specDesc key="q"/>
                <specDesc key="quote"/>
                <!--specDesc key="said"/-->
                <!--specDesc key="mentioned"/>-->
                <!--specDesc key="soCalled"/>-->
                <!--<specDesc key="gloss"/>-->
              </specList>
            </p>
            <p>Here is a simple example of a quotation:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>Few dictionary makers are likely to forget Dr. Johnson's description of the
        lexicographer as <q>a harmless drudge.</q></p></egXML>
            </p>
            <p>To record how a quotation was printed (for example, <term>in-line</term> or set off as a <hi>display</hi>
              or <hi>block quotation</hi>), the <att>rendition</att> attribute should be used. This may also be used to
              indicate the kind of quotation marks used.</p>
            <p>Direct speech interrupted by a narrator can be represented simply by ending the quotation and beginning
              it again after the interruption, as in the following example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p><q>Who-e debel you?</q> — he at last said —
         <q>you no speak-e, damme, I kill-e.</q> And so saying, the lighted tomahawk began
        flourishing about me in the dark.</p></egXML>
              If it is important to convey the idea that the two <gi>q</gi> elements together make up a single speech,
              the linking attributes <att>next</att> and <att>prev</att> may be used, as described in section <ptr
                target="#xatts"/>.</p>
            <p>Quotations may be accompanied by a reference to the source or speaker, using the <att>who</att>
              attribute, whether or not this is explicit in the text, as in the following example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><q who="#Wilson">Spaulding, he came
        down into the office just this day eight weeks with this very paper in his hand, and he
         says:—<q who="#Spaulding">I wish to the Lord, Mr. Wilson, that I was a red-headed
        man.</q></q></egXML>
              This example also demonstrates how quotations may be embedded within other quotations: one speaker
              (Wilson) quotes another speaker (Spaulding).</p>
            <p>The creator of the electronic text must decide whether quotation marks are replaced by the tags or
              whether the tags are added and the quotation marks kept. If the quotation marks are removed from the text,
              the <att>rend</att> attribute may be used to record the way in which they were rendered in the copy
              text.</p>
            <!--<p>The full TEI Guidelines provide additional elements to distinguish direct speech,
      quotation, and other typical uses of quotation mark although it is not always possible and may
      not be considered desirable to interpret the function of quotation marks in a text. For
      simplicity, only <gi>q</gi> (which may be used for any such case) has been included in TEI
      Lite. </p>-->
          </div>
          <div xml:id="z636">
            <head>Foreign Words or Expressions</head>
            <p>Words phrases, or longer stretches of test that are not in the main language of the texts may be tagged
              as such in one of two ways. The global <att>xml:lang</att> attribute may be attached to any element to
              show that it uses some other language than that of the surrounding text. Where there is no applicable
              element, the element <gi>foreign</gi> may be used, again using the <att>xml:lang</att> attribute. For
              example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>John has real <foreign xml:lang="fr">savoir-faire</foreign>.</p><p>Have you read <title xml:lang="de">Die
         Dreigroschenoper</title>?</p>
      <div xml:lang="la">{75 pages of Latin}</div></egXML></p>
            <p>As these examples show, the <gi>foreign</gi> element should not be used to tag foreign words if some
              other more specific element such as <gi>title</gi>, or <gi>div</gi> applies. </p>
            <p>The codes used to identify languages, supplied on the <att>xml:lang</att> attribute, must be constructed
              in a particular way, and must conform to common Internet standards<note place="foot">The relevant standard
                is <title>Best Current Practice 47</title> (<ptr target="http://tools.ietf.org/html/bcp47"/>). The
                authoritative list of registered subtags is maintained by IANA and is available at <ptr
                  target="http://www.iana.org/assignments/language-subtag-registry"/>. For a general overview of the
                construction of language tags, see <ptr target="http://www.w3.org/International/articles/language-tags/"
                />, and for a practical step-by-step guide, see <ptr
                  target="http://www.w3.org/International/questions/qa-choosing-language-tags"/>.</note>, as further
              explained in the relevant section of the TEI Guidelines. Some simple example codes for a few languages are
              given here: <table>
                <row>
                  <cell>zh</cell>
                  <cell>Chinese</cell>
                  <cell>grc</cell>
                  <cell>Ancient Greek</cell>
                </row>
                <row>
                  <cell>en</cell>
                  <cell>English</cell>
                  <cell>el</cell>
                  <cell>Greek</cell>
                </row>
                <row>
                  <cell>enm</cell>
                  <cell>Middle English</cell>
                  <cell>ja</cell>
                  <cell>Japanese</cell>
                </row>
                <row>
                  <cell>fr</cell>
                  <cell>French</cell>
                  <cell>la</cell>
                  <cell>Latin</cell>
                </row>
                <row>
                  <cell>de</cell>
                  <cell>German</cell>
                  <cell>sa</cell>
                  <cell>Sanskrit</cell>
                </row>
              </table>
            </p>
          </div>
        </div>
        <div xml:id="Simple-notes">
          <head>Notes</head>
          <p>A note is any additional comment found in a text, marked in some way as being out of the main textual
            stream. It is a special and very common form of linking, because a note always targets some part of the
            text, whether implicitly or explicitly. All notes should be marked using the same tag, note, whether they
            appear as block notes in the main text area, at the foot of the page, at the end of the chapter or volume,
            in the margin, or in some other place: <specList>
              <specDesc key="note"/>
            </specList>
          </p>
          <p>Notes may be in a different hand or typeface, may be authorial or editorial, and may have been added later.
            Use <att>type</att> and <att>resp</att> attributes to distinguish between different kinds of notes or
            identify their authors.</p>
          <p>A note is typically linked to a <term>point of attachment</term> that is represented by a siglum such as an
            alphanumerical or other character, typically in superscripted form. When encoding such a text, it is
            conventional to replace this siglum by the content of the annotation, duly marked up with a note element.
            This may not always be possible for example with marginal notes, which may not be anchored to an exact
            location. For ease of processing, it may be adequate to position marginal notes before the relevant
            paragraph or other element. </p>


          <p>An alternative method takes a "belt and suspenders" approach towards making sure that the relationship of a
              <gi>note</gi> element to its point of attachment is always spelled out explicitly. In the following
            example, the source text marks the point of attachment with a superscripted "7". A failsafe way of encoding
            this may take the following form:
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <p>...some text <ref xml:id="r7" target="n7" rendition="#superscript">7</ref><note xml:id="n7" n="7">a note about some text</note></p>      
      </egXML>
            This is a rather verbose representation of a simple note marker in a printed text. But it can usually be
            generated via a script, and it ensures that there is no uncertainty about the relationship between a
              <gi>ref</gi> element in a stable location and a <gi>note</gi> element whose physical location is a
            variable thing, whether in its original form, its encoding, or its display in some output of that encoding.
            With this notation it no longer matters whether you encode your notes in <term>inline</term> or in
              <term>standoff</term> manner, that is to say, keep them next to their place of attachment or in a separate
            place.</p>
          <p>If the note lacks an explicit point of attachment in the text, which is often the case with marginal notes,
            you can use the <gi>ref</gi> as an empty element:  
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <p>...some text <ref xml:id="r7" target="n7"/><note xml:id="n7" n="7">a note about some text</note></p>      
      </egXML>
            
            </p>


          <p>Marginal notes often are subject to different interpretations about their status. They are very common in
            Early Modern printed books, recede over the course of the 18th century, but are still an integral feature of
            Gibbon's <title>Decline and Fall of the Roman Empire</title>. Many marginal notes are like footnotes,
            endnotes, or inline citations. A marginal note will very often provide the reference to an inline Biblical
            quotation. But some text in the margins is quite different in structure or purpose from notes that happen to
            be printed in the margin. In some Early Modern plays stage directions are routinely printed in the margin.
              <code>&lt;stage place="margin"&gt;</code> would be the appropriate way of tagging them. Quite often the
            text in the margins operates more more like a summary or heading than a reference or explanatory note. In
            such cases <code>&lt;label place="margin"&gt;</code> may be the most appropriate tag, but the boundary
            between heading and annotation may be blurry, as in the following case:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><lg xml:id="RAM609"><note place="margin">The
       curse is finally expiated</note><l>And now this spell was snapt: once more</l>
       <l>I viewed the ocean green,</l>
       <l>And looked far forth, yet little saw</l>
       <l>Of what had else been seen
         —</l>
      </lg></egXML>
            It is tempting to think of text in the margins as being notes by definition. On the other hand, if you ask
            yourself whether text in the margins provides additional information or is more like an abstract of what is
            to come, it may be quite easy to distinguish between <gi>note</gi> and <gi>label</gi> in most cases. As for
            stage directions in the margin, think of <code>&lt;stage&gt;</code> as syntactic sugar for <code>&lt;note
              type="stage"&gt;</code>.
          </p>
        </div>
        <div xml:id="Simple-ptrs">
          <head>Cross References and Links</head>
          <p>Explicit cross references or links from one point in a text to another in the same or another document may
            be encoded using the elements described in this section. Implicit links (such as the association between two
            parallel texts, or that between a text and its interpretation) may be encoded using the linking attributes
            discussed in section <ptr target="#xatts"/>.</p>
          <div xml:id="ptrs">
            <head>Simple Cross References</head>
            <p>A cross reference from one point within a single document to another can be encoded by a tacit or explicit use of the &lt;ref&gt; element: <specList>
                <specDesc key="ref"/>

              </specList>
            </p>
            <p>In the tacit use of the &lt;ref&gt; element you use it as as an <term>empty</term> element, simply marking a
              point from which a link is to be made, whereas in the explicit use the element may contain some text as well, typically
              identifying the target of the cross reference. You can use the element tacitly  in  a cross
              reference which is to be indicated by some non-verbal means such as a symbol or icon, or in an electronic
              text by a button. It is also useful in document production systems, where the formatter can generate the
              correct verbal form of the cross reference.</p>
            <p>The following two forms, for example, are logically equivalent : <egXML xmlns="http://www.tei-c.org/ns/Examples">See especially <ref target="#SEC12">section 12 on
        page 34</ref>.</egXML>
              <egXML xmlns="http://www.tei-c.org/ns/Examples">See especially <ref target="#SEC12"/>.</egXML> The value
              of the <att>target</att> attribute on either element may be the identifier of some other element within
              the current document. The passage or phrase being pointed at must bear an identifier, and must therefore
              be tagged as an element of some kind. In the following example, the cross reference is to a <gi>div</gi>
              element:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"> ... see especially <ref target="#SEC12"/>. ... <div xml:id="SEC12">
        <head>Concerning Identifiers</head>
        <!-- ... -->
       </div></egXML>
            </p>
            <p>Because the <att>xml:id</att> attribute is global, any element in a TEI document may be pointed to in
              this way. In the following example, a paragraph has been given an identifier so that it may be pointed at:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"> ... this is
       discussed in <ref target="#pspec">the paragraph on links</ref> ... <p xml:id="pspec">Links
        may be made to any kind of element ...</p></egXML></p>
            <p>Sometimes the target of a cross reference does not correspond with any particular feature of a text, and
              so may not be tagged as an element of some kind. If the desired target is simply a point in the current
              document, the easiest way to mark it is by introducing an <gi>anchor</gi> element at the appropriate spot.
              If the target is some sequence of words not otherwise tagged, the <gi>seg</gi> element may be introduced
              to mark them. These two elements are described as follows: <specList>
                <specDesc key="anchor"/>
                <specDesc key="seg"/>
              </specList>
            </p>
            <p>In the following (imaginary) example, <gi>ref</gi> elements have been used to represent points in this
              text which are to be linked in some way to other parts of it; in the first case to a point, and in the
              second, to a sequence of words:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"> Returning to <ref target="#ABCD">the point where I
        dozed off</ref>, I noticed that <ref target="#EFGH">three words</ref> had been circled in
       red by a previous reader</egXML></p>
            <p>This encoding requires that elements with the specified identifiers (<code>ABCD</code> and
                <code>EFGH</code> in this example) are to be found somewhere else in the current document. Assuming that
              no element already exists to carry these identifiers, the <gi>anchor</gi> and <gi>seg</gi> elements may be
              used:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"> ....
        <anchor type="bookmark" xml:id="ABCD"/> .... ....<seg type="target" xml:id="EFGH"> ...
       </seg> ...</egXML></p>
            <p>The <att>type</att> attribute should be used (as above) to distinguish amongst different purposes for
              which these general purpose elements might be used in a text. Some other uses are discussed in section
                <ptr target="#xatts"/> below.</p>
          </div>
          <div xml:id="xptrs">
            <head>Pointing to other documents</head>
            <p>So far, we have shown how the &lt;ref&gt; element may be used for cross-references or
              links whose targets occur within the same document as their source. The  element may also be
              used to refer to elements in any other XML document or resource, such as a document on the web, or a
              database component. This is possible because the value of the <att>target</att> attribute may be any valid
                <term>universal resource indicator</term> (URI)<note>A full definition of this term, defined by the W3C
                (the consortium which manages the development and maintenance of the World Wide Web), is beyond the
                scope of this tutorial: however, the most frequently encountered version of a URI is the familiar
                  <soCalled>URL</soCalled> used to indicate a web page, such as
                  <code>http://www.tei-c.org/index.xml</code></note>. </p>
            <p>A URI may reference a web page or just a part of one, for example
                <code>http://www.tei-c.org/index.xml#SEC2</code>. The hash sign indicates that what follows it is the
              identifier of an element to be located within the XML document identified by what precedes it: this
              example will therefore locate an element which has an <att>xml:id</att> attribute value of <val>SEC2</val>
              within the document retrieved from <code>http://www.tei-c.org/index.xml</code>. In the examples we have
              discussed so far, the part to the left of the sharp sign has been omitted: this is understood to mean that
              the referenced element is to be located within the current document.</p>
            <p>Parts of an XML document can be specified by means of other more sophisticated mechanisms using a special
              language called Xpath, also defined by the W3C. This is particularly useful where the elements to be
              linked to do not bear identifiers and must therefore be located by some other means.
              A full specification of the language is well beyond
      the scope of this document; here we provide only a flavour of its power. </p>
     <p>In the XPath language, locations are defined as a series of <term>steps</term>, each one
      identifying some part of the document, often in terms of the locations identified by the
      previous step. For example, you would point to the third sentence of the second paragraph of
      chapter two by selecting chapter two in the first step, the second paragraph in the second
      step, and the third sentence in the last step. A step can be defined in terms of the document
      tree itself, using such concepts as <val>parent</val>, <val>descendent</val>,
       <val>preceding</val>, etc. or, more loosely, in terms of text patterns, word or character
      positions. This is not the document to describe in detail the powers of XPath. But unless you think of TEI encoding as just another form of typesetting—which emphatically is not its purpose—the decision to <term>encode</term> any part of a text this way rather than that way should always be guided by the sense that somebody at some time will want to <term>decode</term> or retrieve that part of the text for some purpose, about which you may not know very much at the point of encoding. XPath has been, and is likely to remain, the set of rules for <term>decoding</term> the <term>encoded</term>. A general understanding of what you can or cannot do with XPath is a useful thing to know in any encoding project. </p>
          </div>
          <div xml:id="xatts">
            <head>Special kinds of Linking</head>
            <p>The following special purpose <term>linking</term> attributes are defined for every element in the TEI
              Simple schema: <list type="gloss">
                <label><att>ana</att></label>
                <item>links an element with its interpretation.</item>
                <label><att>corresp</att></label>
                <item>links an element with one or more other corresponding elements.</item>
                <label><att>next</att></label>
                <item>links an element to the next element in an aggregate.</item>
                <label><att>prev</att></label>
                <item>links an element to the previous element in an aggregate.</item>
              </list></p>
            <p>The <att>ana</att> (analysis) attribute is intended for use where a set of abstract analyses or
              interpretations have been defined somewhere within a document, as further discussed in section <ptr
                target="#Simple-anal"/>. For example, a linguistic analysis of the sentence <q>John loves Nancy</q> might be
              encoded as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><seg type="sentence" ana="SVO"><seg type="lex" ana="#NP1">John</seg><seg type="lex" ana="#VVI">loves</seg><seg type="lex" ana="#NP1">Nancy</seg></seg></egXML>
              This encoding implies the existence elsewhere in the document of elements with identifiers <val>SVO</val>,
                <val>NP1</val>, and <val>VV1</val> where the significance of these particular codes is explained. Note
              the use of the <gi>seg</gi> element to mark particular components of the analysis, distinguished by the
                <att>type</att> attribute.</p>
            <p>The <att>corresp</att> (corresponding) attribute provides a simple way of representing some form of
              correspondence between two elements in a text. For example, in a multilingual text, it may be used to link
              translation equivalents, as in the following example
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><seg xml:lang="fr" xml:id="FR1" corresp="#EN1">Jean
        aime Nancy</seg><seg xml:lang="en" xml:id="EN1" corresp="#FR1">John loves
       Nancy</seg></egXML></p>
            <p>The same mechanism may be used for a variety of purposes. In the following example, it has been used to
              represent the correspondences between <q rendition="#inline" type="inline">the show</q> and
              <q>Shirley</q>, and between <q>NBC</q> and <q>the network</q>:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p><title xml:id="shirley">Shirley</title>, which
        made its Friday night debut only a month ago, was not listed on <name xml:id="nbc">NBC</name>'s new schedule, although <seg xml:id="network" corresp="#nbc">the network</seg>
        says <seg xml:id="show" corresp="#shirley">the show</seg> still is being
       considered.</p></egXML></p>
            <p>The <att>next</att> and <att>prev</att> attributes provide a simple way of linking together the
              components of a discontinuous element, as in the following example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><q xml:id="Q1a" next="#Q1b">Who-e debel you?</q> —
       he at last said — <q xml:id="Q1b" prev="#Q1a">you no speak-e, damme, I kill-e.</q> And so
       saying, the lighted tomahawk began flourishing about me in the dark.</egXML></p>
          </div>
          <div xml:id="abseg">
            <head><gi>ab</gi> and <gi>seg</gi> as basic block and inline elements</head>
            <p>The <gi>seg</gi> has been part of TEI from the very beginning. It is a purely formal <term>inline</term>
              element that operates at the level of words and phrases and below <gi>block</gi> elements, such as
              paragraphs. You could say that other inline elements, such as <gi>hi</gi>, <gi>w</gi>, <gi>c</gi>,
                <gi>foreign</gi>, <gi>name</gi>, etc. are merely <term>syntactic sugar </term> for <gi>seg</gi> elements
              with appropriate type attributes such as &lt;seg type="foreign"&gt;. The rules for its use are relatively
              straightforward. You may use it for any segmentation at the word or phrase level for which no explicit
              element exists. You should not use it where there is an appropriate element. &lt;seg type="hi"&gt; is
              valid but silly.</p>
            <p>The <gi>ab</gi> element was not part of the original element set, but was added in 1997. It is defined as
              an <term>anonymous block</term> that <q>contains any arbitrary component-level unit of text, acting as an
                anonymous container for phrase or inter level elements analogous to, but without the semantic baggage
                of, a paragraph. [16.3 Blocks, Segments, and Anchors]</q>. Thus <gi>ab</gi> is at one level opposed to
              seg (block vs. inline) and on another level to p (like <gi>p</gi> but without its <q>semantic
              baggage</q>). </p>
            <p>By the time <gi>ab</gi> was introduced encoders had been happily using <gi>p</gi> not just for paragraphs
              but for any <q>chunk of prose</q>, as one TEI veteran has put it. In practice TEI <gi>p</gi> may not have
              been as different from HTML <gi>p</gi> as it should have been. A lot of stuff inside <gi>p</gi> has none
              of the semantic baggage associated with paragraphs. </p>
            <p>That said, a recent survey (October 2015) produced a variety of use cases that may help encoders decide
              whether <gi>ab</gi> or <gi>p</gi> is more appropriate for a given <q>chunk of prose</q>. The<gi>ab</gi>
              element has been used for: </p>
            <list>
              <item>The canonical verses of the Bible, first produced in the Stephanus edition of 1571 </item>
              <item>Greek inscriptions created in a world that had not yet invented paragraphs</item>
              <item>Hieroglyphic texts, which have no semantic sense of a paragraph</item>
              <item>Texts where the divisions into chunks are conventional (and differ between witnesses), and have been
                provided by medieval scribes</item>
              <item>notebooks written by a contemporary artist, containing a lot of fragmentary and unstructured notes
                expressing thoughts and ideas (text and graphics) which are often just single words, unfinished
                sentences or sketches, and unrelated to previous or following entries.</item>
              <item>rubrics or interspersed commentary in liturgical texts</item>

              <item>The question and answer structure of catechisms as well as the alternating structures common in 17th
                century polemtical literature </item>
              <item>table-like content that cannot be wrangled into a row/column structure and where &lt;ab
                type="tabular" xml:space="preserve"&gt; is the best you can do</item>
              <item>machine-based encoding of PDF or OCR files</item>

            </list>

            <p>Finally, &lt;p&gt; has been a useful element for identifying prose in dramatic dialogue, whether or not it is conducted in paragraphs, which it usually is not. Whether a speech in a play is in prose or verse is not always to tell. When Gertrude says <q>The lady does protest too much methinks</q> her words happen to scan but are surrounded by prose.If you want avoid jumping off the fence you could use &lt;ab&gt;. The list could go on and certainly demonstrates that a lot of prose does not come in paragraphs with
              semantic baggage. The "Best Practices for TEI in Libraries" offers a somewhat off-beat use of <gi>ab</gi>
              as an answer to the question how to encode asterisks or similar horizontally oriented symbols that mark
              some degree of separation between the stuff below and above. They recommend &lt;ab type="typography"&gt; *
              * * &lt;/ab&gt; instead of &lt;milestone type="separator" unit="undetermined" rend="stars"/&gt; on the
              grounds that for many users this direct representation of asterisks will be more intuitive than
              representing them as attribute values. </p>


          </div>
        </div>

        <div xml:id="Simple-edit1">
          <head>Editorial Interventions</head>
          <p>The process of encoding an electronic text has much in common with the process of editing a manuscript or
            other text for printed publication. In either case a conscientious editor may wish to record both the
            original state of the source and any editorial correction or other change made in it. The elements discussed
            in this and the next section provide some facilities for meeting these needs.</p>
          <div>
            <head>Correction and Normalization</head>
            <p>The following elements may be used to mark <term>correction</term>, that is editorial changes introduced
              where the editor believes the original to be erroneous: <specList>
                <specDesc key="corr"/>
                <specDesc key="sic"/>
              </specList>
            </p>
            <p>The following elements may be used to mark <term>normalization</term>, that is editorial changes
              introduced for the sake of consistency or modernization of a text: <specList>
                <specDesc key="orig"/>
                <specDesc key="reg"/>
              </specList></p>
            <p>As an example, consider this extract from the quarto printing of Shakespeare's <title>Henry V</title>.
              <eg> ... for his nose was as sharp as a pen and a table of green feelds</eg>
            </p>
            <p>A modern editor might wish to make a number of interventions here, specifically to modernize (or
              normalise) the Elizabethan spellings of <mentioned>a'</mentioned> and <mentioned>feelds</mentioned> for
                <mentioned>he</mentioned> and <mentioned>fields</mentioned> respectively. He or she might also want to
              emend <mentioned>table</mentioned> to <mentioned>babbl'd</mentioned>, following an editorial tradition
              that goes back to the 18th century Shakespearian scholar Lewis Theobald. The following encoding would then
              be appropriate:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">... for his nose was as sharp as
       a pen and <reg>he</reg>
       <corr resp="#Theobald">babbl'd</corr> of green <reg>fields</reg></egXML></p>
            <p>A more conservative or source-oriented editor, however, might want to retain the original, but at the
              same time signal that some of the readings it contains are in some sense anomalous:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">... for his nose was as sharp as a pen and
        <orig>a</orig>
       <sic>table</sic> of green <orig>feelds</orig></egXML></p>
            <p>Finally, a modern digital editor may decide to combine both possibilities in a single composite text,
              using the <gi>choice</gi> element. <specList>
                <specDesc key="choice"/>
              </specList> This allows an editor to mark where alternative readings are possible:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">... for his nose was as sharp as a pen and
         <choice><orig>a</orig><reg>he</reg></choice>
       <choice><corr resp="#Theobald">babbl'd</corr><sic>table</sic></choice> of green
         <choice><orig>feelds</orig><reg>fields</reg></choice>
      </egXML></p>
          </div>
          <div xml:id="Simple-edit2">
            <head>Omissions, Deletions, and Additions</head>
            <p>In addition to correcting or normalizing words and phrases, editors and transcribers may also supply
              missing material, omit material, or transcribe material deleted or crossed out in the source. In addition,
              some material may be particularly hard to transcribe because it is hard to make out on the page. The
              following elements may be used to record such phenomena: <specList>
                <specDesc key="add"/>
                <specDesc key="gap"/>
                <specDesc key="del"/>
                <specDesc key="unclear"/>
              </specList>
            </p>
            <p>These elements may be used to record changes made by an editor, by the transcriber, or (in manuscript
              material) by the author or scribe. For example, if the source for an electronic text read <q>The following
                elements are provided for for simple editorial interventions.</q> then it might be felt desirable to
              correct the obvious error, but at the same time to record the deletion of the superfluous second
                <mentioned>for</mentioned>, thus:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">The following elements are provided for <del resp="#LB">for</del> simple editorial interventions.</egXML>
              The attribute value <code>#LB</code> on the <att>resp</att> attribute is used to point to a fuller
              definition (typically in a <gi>respStmt</gi> element) for the agency responsible for correcting the
              duplication of <mentioned>for</mentioned>.</p>
            <p>If the source read <q>The following elements provided for simple editorial interventions.</q> (i.e. if
              the verb had been inadvertently dropped) then the corrected text might read:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">The following elements <add resp="#LB">are</add> provided for simple editorial interventions.</egXML></p>
            <p>These elements are also used to record authorial changes in manuscripts. A manuscript in which the author
              has first written <q>How it galls me, what a galling shadow</q>, then crossed out the word
                <mentioned>galls</mentioned> and inserted <mentioned>dogs</mentioned> might be encoded thus:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">How it <del hand="#DHL" type="overstrike">galls</del>
       <add hand="#DHL" place="supralinear">dogs</add> me, what a galling shadow</egXML>
              Again, the code <code>#DHL</code> points to another location where more information about the hand
              concerned is to be found<note place="foot">The full TEI provides a range of elements for encoding metadata
                about manuscript production and description, which are not however included in TEI Simple</note>. </p>
            <p>Similarly, the <gi>unclear</gi> and <gi>gap</gi> elements may be used together to indicate the omission
              of illegible material; the following example also shows the use of <gi>add</gi> for a conjectural
              emendation:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">One hundred
       &amp; twenty good regulars joined to me <unclear><gap reason="indecipherable"/></unclear>
       &amp; instantly, would aid me signally <add hand="#ed">in?</add> an enterprise against
       Wilmington.</egXML></p>
            <p>The <gi>del</gi> element marks material which has been transcribed as part of the electronic text despite
              being marked as deleted, while <gi>gap</gi> marks the location of material which is omitted from the
              electronic text, whether it is legible or not. A language corpus, for example, might omit long quotations
              in foreign languages:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p> ... An example of a list appearing in a fief
        ledger of <name type="place">Koldinghus</name>
        <date>1611/12</date> is given below. It shows cash income from a sale of
         honey.</p><gap><desc>quotation from ledger (in Danish)</desc></gap><p>A description of the
        overall structure of the account is once again ... </p></egXML></p>
            <p>Other corpora (particular those constructed before the widespread use of scanners) systematically omit
              figures and mathematics:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>At the bottom of your screen below the mode line is the <term>minibuffer</term>. This is
        the area where Emacs echoes the commands you enter and where you specify filenames for Emacs
        to find, values for search and replace, and so on. <gap reason="graphic"><desc>diagram of
          Emacs screen</desc></gap>
       </p></egXML></p>

          </div>
          <div>
            <head>Abbreviations and their Expansion</head>
            <p>Like names, dates, and numbers, abbreviations may be transcribed as they stand or expanded; they may be
              left unmarked, or encoded using the following elements: <specList>
                <specDesc key="abbr"/>
                <specDesc key="expan"/>
              </specList>
            </p>
            <p>The <gi>abbr</gi> element is useful as a means of distinguishing semi-lexical items such as acronyms or
              jargon: <egXML xmlns="http://www.tei-c.org/ns/Examples">We can sum up the above
       discussion as follows: the identity of a <abbr>CC</abbr> is defined by that calibration of
       values which motivates the elements of its <abbr>GSP</abbr>;</egXML>
              <egXML xmlns="http://www.tei-c.org/ns/Examples">Every manufacturer of <abbr>3GL</abbr> or
        <abbr>4GL</abbr> languages is currently nailing on <abbr>OOP</abbr> extensions</egXML>
            </p>
            <p>The <att>type</att> attribute may be used to distinguish types of abbreviation by their function. </p>
            <p>The <gi>expan</gi> element is used to mark an expansion supplied by an encoder. This element is
              particularly useful in the transcription of manuscript materials. For example, the character p with a bar
              through its descender as a conventional representation for the word <val>per</val> is commonly encountered
              in Medieval European manuscripts. An encoder may choose to expand this as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><expan>per</expan></egXML>
            </p>

            <p>To record both an abbreviation and its expansion, the <gi>choice</gi> element mentioned above may be used
              to group the abbreviated form with its proposed expansion:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <choice><abbr>wt</abbr><expan>with</expan></choice>
      </egXML>
              For a fuller discussion of abbreviations and the intricacies of representing them consult the section on
                <ref target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/PH.html#PHAB">Abbreviations and
                Expansion</ref> in the <title>Guidelines</title>. </p>
          </div>
        </div>
        <div xml:id="Simple-names">
          <head>Names, Dates, and Numbers</head>
          <p>The TEI scheme defines elements for a large number of <soCalled>data-like</soCalled> features which may
            appear almost anywhere within almost any kind of text. These features may be of particular interest in a
            range of disciplines; they all relate to objects external to the text itself, such as the names of persons
            and places, numbers and dates. They also pose particular problems for many natural language processing (NLP)
            applications because of the variety of ways in which they may be presented within a text. The elements
            described here, by making such features explicit, reduce the complexity of processing texts containing
            them.</p>
          <div xml:id="nomen">
            <head>Names and Referring Strings</head>
            <p>A <term>referring string</term> is a phrase which refers to some person, place, object, etc. Two elements
              are provided to mark such strings: <specList>
                <specDesc key="rs"/>
                <specDesc key="name"/>
              </specList>
            </p>
            <p> The <att>type</att> attribute is used to distinguish amongst (for example) names of persons, places and
              organizations, where this is possible: <egXML xmlns="http://www.tei-c.org/ns/Examples"><q>My dear <rs type="person">Mr. Bennet</rs>, </q>
       said his lady to him one day, <q>have you heard that <rs type="place">Netherfield Park</rs>
        is let at last?</q></egXML>
              <egXML xmlns="http://www.tei-c.org/ns/Examples">It being one of the principles of the <rs type="organization">Circumlocution Office</rs> never, on any account whatsoever, to give a
       straightforward answer, <rs type="person">Mr Barnacle</rs> said, <q>Possibly.</q></egXML></p>
            <p>As the following example shows, the <gi>rs</gi> element may be used for any reference to a person, place,
              etc, not necessarily one in the form of a proper noun or noun phrase.
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><q>My dear <rs type="person">Mr. Bennet</rs>,</q>
       said <rs type="person">his lady</rs> to him one day...</egXML></p>
            <p>The <gi>name</gi> element by contrast is provided for the special case of referencing strings which
              consist only of proper nouns; it may be used synonymously with the <gi>rs</gi> element, or nested within
              it if a referring string contains a mixture of common and proper nouns.</p>
            <p>Simply tagging something as a name is rarely enough to enable automatic processing of personal names into
              the canonical forms usually required for reference purposes. The name as it appears in the text may be
              inconsistently spelled, partial, or vague. Moreover, name prefixes such as <mentioned>van</mentioned> or
                <mentioned>de la</mentioned>, may or may not be included as part of the reference form of a name,
              depending on the language and country of origin of the bearer.</p>
            <p>The <att>key</att> attribute provides an alternative normalized identifier for the object being named,
              like a database record key. It may thus be useful as a means of gathering together all references to the
              same individual or location scattered throughout a document:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><q>My dear <rs type="person" key="BENM1">Mr.
         Bennet</rs>, </q> said <rs type="person" key="BENM2">his lady</rs> to him one day, <q>have
        you heard that <rs type="place" key="NETP1">Netherfield Park</rs> is let at
       last?</q></egXML></p>
            <p>This use should be distinguished from the case of the <gi>reg</gi> (regularization) element, which
              provides a means of marking the standard form of a referencing string as demonstrated below:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><name type="person" key="WADLM1"><choice><sic>Walter de la Mare</sic><reg>de la Mare, Walter</reg></choice></name> was
       born at <name key="Ch1" type="place">Charlton</name>, in <name key="KT1" type="county">Kent</name>, in 1873.</egXML></p>

          </div>
          <div>
            <head>Dates and Times</head>
            <p>Tags for the more detailed encoding of times and dates include the following: <specList>
                <specDesc key="date"/>
                <specDesc key="time"/>
              </specList>
            </p>
            <p>These elements have a number of attributes which can be used to provide normalised versions of their
              values. <specList>
                <specDesc key="att.datable" atts="calendar period when"/>
              </specList> The <att>when</att> attribute specifies a normalized form for the date or time, using one of
              the standard formats defined by ISO 8601. Partial dates or times (e.g. <q>1990</q>, <q>September 1990</q>,
                <q>twelvish</q>) can be expressed by omitting a part of the value supplied, as in the following
              examples:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><date when="1980-02-21">21
        Feb 1980</date><date when="1990">1990</date><date when="1990-09">September 1990</date><date when="--09">September</date><date when="2001-09-11T12:48:00">Sept 11th, 12 minutes before 9
        am</date></egXML>Note
              in the last example the use of a normalized representation for the date string which includes a time: this
              example could thus equally well be tagged using the <gi>time</gi> element. </p>
            <p>
              <egXML xmlns="http://www.tei-c.org/ns/Examples">Given on the <date when="1977-06-12">Twelfth
        Day of June in the Year of Our Lord One Thousand Nine Hundred and Seventy-seven of the
        Republic the Two Hundredth and first and of the University the Eighty-Sixth.</date></egXML>
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <l>specially when it's nine below zero</l>
       <l>and <time when="15:00:00">three o'clock in the afternoon</time></l>
      </egXML>
            </p>
          </div>
          <div>
            <head>Numbers </head>
            <p>Numbers can be written with either letters or digits (<code>twenty-one</code>, <code>xxi</code>, and
                <code>21</code>) and their presentation is language-dependent (e.g. English <mentioned>5th</mentioned>
              becomes Greek <mentioned>5.</mentioned>; English <mentioned>123,456.78</mentioned> equals French
                <mentioned>123.456,78</mentioned>). In natural-language processing or machine-translation applications,
              it is often helpful to distinguish them from other, more <soCalled>lexical</soCalled> parts of the text.
              In other applications, the ability to record a number's value in standard notation is important. The
                <gi>num</gi> element provides this possibility: <specList>
                <specDesc key="num"/>
              </specList>
            </p>
            <p>For example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><num value="33">xxxiii</num><num type="cardinal" value="21">twenty-one</num><num type="percentage" value="10">ten percent</num><num type="percentage" value="10">10%</num><num type="ordinal" value="5">5th</num></egXML></p>
          </div>
        </div>
        <div xml:id="Simple-lists">
          <head>Lists</head>
          <p>The element <gi>list</gi> is used to mark any kind of <term>list</term>. A list is a sequence of text
            items, which may be numbered, bulleted, or arranged as a glossary list. Each item may be preceded by an item
            label (in a glossary list, this label is the term being defined): <specList>
              <specDesc key="list"/>
              <specDesc key="item"/>
              <specDesc key="label"/>
            </specList>
          </p>
          <p>Individual list items are tagged with <gi>item</gi>. The first <gi>item</gi> may optionally be preceded by
            a <gi>head</gi>, which gives a heading for the list. The numbering of a list may be omitted, indicated using
            the <att>n</att> attribute on each item, or (rarely) tagged as content using the <gi>label</gi> element. The
            following are all thus equivalent:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><list>
       <head>A short list</head>
       <item>First item in list.</item>
       <item>Second item in list.</item>
       <item>Third item in list.</item>
      </list><list>
       <head>A short list</head>
       <item n="1">First item in list.</item>
       <item n="2">Second item in list.</item>
       <item n="3">Third item in list.</item>
      </list><list>
       <head>A short list</head>
       <label>1</label>
       <item>First item in list.</item>
       <label>2</label>
       <item>Second item in list.</item>
       <label>3</label>
       <item>Third item in list.</item>
      </list></egXML>
            The styles should not be mixed in the same list.</p>
          <p>A simple two-column table may be treated as a <term>glossary list</term>, tagged <code>&lt;list
              type="gloss"&gt;</code>. Here, each item comprises a <term>term</term> and a <term>gloss</term>, marked
            with <gi>label</gi> and <gi>item</gi> respectively. These correspond to the elements <gi>term</gi> and
              <gi>gloss</gi>, which can occur anywhere in prose text.
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><list type="gloss">
       <head>Vocabulary</head>
       <label xml:lang="enm">nu</label>
       <item>now</item>
       <label xml:lang="enm">lhude</label>
       <item>loudly</item>
       <label xml:lang="enm">bloweth</label>
       <item>blooms</item>
       <label xml:lang="enm">med</label>
       <item>meadow</item>
       <label xml:lang="enm">wude</label>
       <item>wood</item>
       <label xml:lang="enm">awe</label>
       <item>ewe</item>
       <label xml:lang="enm">lhouth</label>
       <item>lows</item>
       <label xml:lang="enm">sterteth</label>
       <item>bounds, frisks</item>
       <label xml:lang="enm">verteth</label>
       <item xml:lang="la">pedit</item>
       <label xml:lang="enm">murie</label>
       <item>merrily</item>
       <label xml:lang="enm">swik</label>
       <item>cease</item>
       <label xml:lang="enm">naver</label>
       <item>never</item>
      </list></egXML></p>
          <p>Where the internal structure of a list item is more complex, it may be preferable to regard the list as a
              <term>table</term>, for which special-purpose tagging is defined below (<ptr target="#Simple-tables"/>). </p>
          <p>Lists of whatever kind can, of course, nest within list items to any depth required. Here, for example, a
            glossary list contains two items, each of which is itself a simple list:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><list type="gloss">
       <label>EVIL</label>
       <item><list type="simple">
         <item>I am cast upon a horrible desolate island, void of all hope of recovery.</item>
         <item>I am singled out and separated as it were from all the world to be miserable.</item>
         <item>I am divided from mankind — a solitaire; one banished from human society.</item>
        </list></item>
       <label>GOOD</label>
       <item><list type="simple">
         <item>But I am alive; and not drowned, as all my ship's company were.</item>
         <item>But I am singled out, too, from all the ship's crew, to be spared from
          death...</item>
         <item>But I am not starved, and perishing on a barren place, affording no
          sustenances....</item>
        </list></item>
      </list></egXML></p>
          <p>A list need not necessarily be displayed in list format. For example,
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><p>On those remote pages it is written that animals
       are divided into <list rendition="run-on">
        <item n="a">those that belong to the Emperor,</item>
        <item n="b"> embalmed ones, </item>
        <item n="c"> those that are trained, </item>
        <item n="d"> suckling pigs, </item>
        <item n="e"> mermaids, </item>
        <item n="f"> fabulous ones, </item>
        <item n="g"> stray dogs, </item>
        <item n="h"> those that are included in this classification, </item>
        <item n="i"> those that tremble as if they were mad, </item>
        <item n="j"> innumerable ones, </item>
        <item n="k"> those drawn with a very fine camel's-hair brush, </item>
        <item n="l"> others, </item>
        <item n="m"> those that have just broken a flower vase, </item>
        <item n="n"> those that resemble flies from a distance.</item>
       </list></p></egXML></p>
          <p>Lists of bibliographic items should be tagged using the <gi>listBibl</gi> element, described in the next
            section.</p>
        </div>
        <div xml:id="Simple-bibls">
          <head>Bibliographic Citations</head>
          <p>It is often useful to distinguish bibliographic citations where they occur within texts being transcribed
            for research, if only so that they will be properly formatted when the text is printed out. The element
              <gi>bibl</gi> is provided for this purpose. Where the components of a bibliographic reference are to be
            distinguished, the following elements may be used as appropriate. It is generally useful to mark at least
            those parts (such as the titles of articles, books, and journals) which will need special formatting. The
            other elements are provided for cases where particular interest attaches to such details. <specList>
              <specDesc key="bibl"/>
              <specDesc key="author"/>
              <specDesc key="biblScope"/>
              <specDesc key="date"/>
              <specDesc key="editor"/>
              <specDesc key="publisher"/>
              <specDesc key="pubPlace"/>
              <specDesc key="title"/>
            </specList></p>
          <p>For example, the following editorial note might be transcribed as shown: <q rendition="display">He was a
              member of Parliament for Warwickshire in 1445, and died March 14, 1470 (according to Kittredge,
                <title>Harvard Studies</title> 5. 88ff).</q>
            <egXML xmlns="http://www.tei-c.org/ns/Examples">He was a member of Parliament for Warwickshire
      in 1445, and died March 14, 1470 (according to <bibl><author>Kittredge</author>,
        <title>Harvard Studies</title> 5. 88ff</bibl>).</egXML></p>
          <p>For lists of bibliographic citations, the <gi>listBibl</gi> element should be used; it may contain a series
            of <gi>bibl</gi> elements. </p>
        </div>
        <div xml:id="Simple-tables">
          <head>Tables</head>
          <p>Tables represent a challenge for any text processing system, but simple tables, at least, appear in so many
            texts that even in the simplified TEI tag set presented here, markup for tables is necessary. The following
            elements are provided for this purpose: <specList>
              <specDesc key="table"/>
              <specDesc key="row"/>
              <specDesc key="cell"/>
            </specList></p>
          <p>For example, Defoe uses mortality tables like the following in the <title level="m">Journal of the Plague
              Year</title> to show the rise and ebb of the
            epidemic:<egXML xmlns="http://www.tei-c.org/ns/Examples"><p>It was indeed coming on amain, for the burials
       that same week were in the next adjoining parishes thus:— <table rows="5" cols="4">
        <row role="data">
         <cell role="label">St. Leonard's, Shoreditch</cell>
         <cell>64</cell>
         <cell>84</cell>
         <cell>119</cell>
        </row>
        <row role="data">
         <cell role="label">St. Botolph's, Bishopsgate</cell>
         <cell>65</cell>
         <cell>105</cell>
         <cell>116</cell>
        </row>
        <row role="data">
         <cell role="label">St. Giles's, Cripplegate</cell>
         <cell>213</cell>
         <cell>421</cell>
         <cell>554</cell>
        </row>
       </table></p><p>This shutting up of houses was at first counted a very cruel and unchristian
       method, and the poor people so confined made bitter lamentations. ... </p></egXML></p>
        </div>
        <div xml:id="Simple-figs">
          <head>Figures and Graphics</head>
          <p>Not all the components of a document are necessarily textual. The most straightforward text will often
            contain diagrams or illustrations, to say nothing of documents in which image and text are inextricably
            intertwined, or electronic resources in which the two are complementary. </p>
          <p>The encoder may simply record the presence of a graphic within the text, possibly with a brief description
            of its content, and may also provide a link to a digitized version of the graphic, using the following
            elements: <specList>
              <specDesc key="graphic"/>
              <specDesc key="figure"/>
              <specDesc key="figDesc"/>
            </specList></p>
          <p>Any textual information accompanying the graphic, such as a heading and/or caption, may be included within
            the <gi>figure</gi> element itself, in a <gi>head</gi> and one or more <gi>p</gi> elements, as also may any
            text appearing within the graphic itself. It is strongly recommended that a prose description of the image
            be supplied, as the content of a <gi>figDesc</gi> element, for the use of applications which are not able to
            render the graphic, and to render the document accessible to vision-impaired readers. (Such text is not
            normally considered part of the document proper.)</p>
          <p>The simplest use for these elements is to mark the position of a graphic and provide a link to it, as in
            this example;
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><pb n="412"/><figure><graphic url="images/p412fig.png"/></figure><pb n="413"/></egXML>
            This indicates that the graphic contained by the file <ident>p412fig.png</ident> appears between pages 412
            and 413. </p>
          <p>The <gi>graphic</gi> element can appear anywhere that textual content is permitted, within but not between
            paragraphs or headings. In the following example, the encoder has decided to treat a specific printer's
            ornament as a heading:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><head><graphic url="http://www.iath.virginia.edu/gants/Ornaments/Heads/hp-ral02.gif"/></head></egXML>
          </p>
          <p>More usually, a graphic will have at the least an identifying title, which may be encoded using the
              <gi>head</gi> element, or a number of figures may be grouped together in a particular structure. It is
            also often convenient to include a brief description of the image. The <gi>figure</gi> element provides a
            means of wrapping one or more such elements together as a kind of graphic <soCalled>block</soCalled>:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><figure><graphic url="images/fessipic.png"/><head>Mr Fezziwig's Ball</head><figDesc>A Cruikshank
        engraving showing Mr Fezziwig leading a group of revellers.</figDesc></figure></egXML></p>
          <p>These cases should be carefully distinguished from the case where an encoded text is complemented by a
            collection of digital images, maintained as a distinct resource. The <att>facs</att> attribute may be used
            to associate any element in an encoded text with a digital facsimile of it. In the simple case where only
            page images are available, the <att>facs</att> attribute on the <gi>pb</gi> element may be used to associate
            each image with an appropriate point in the text:
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
      <text>
       <pb facs="page1.png" n="1"/>
       <!-- text contained on page 1 is encoded here -->
       <pb facs="page2.png" n="2"/>
       <!-- text contained on page 2 is encoded here -->
      </text>
     </egXML>
            This method is only appropriate in the simple case where each digital image file <ident>page1.png</ident>
            etc. corresponds with a single transcribed and encoded page. If more detailed alignment of image and
            transcription is required, for example because the image files actually represent double page spreads, more
            sophisticated mechanisms are provided in the full TEI Guidelines. </p>
        </div>
        <div xml:id="Simple-anal">
          <head> Analysis</head>

          <div>
            <head>Orthographic Sentences</head>
            <p>Interpretation typically ranges across the whole of a text, with no particular respect to other
              structural units. A useful preliminary to intensive interpretation is therefore to segment the text into
              discrete and identifiable units, each of which can then bear a label for use as a sort of
                <soCalled>canonical reference</soCalled>. To facilitate such uses, these units may not cross each other,
              nor nest within each other. They may conveniently be represented using the following element: <specList>
                <specDesc key="s"/>
              </specList></p>
            <p>As the name suggests, the <gi>s</gi> element is most commonly used (in linguistic applications at least)
              for marking <term>orthographic sentences</term>, that is, units defined by orthographic features such as
              punctuation. For example, the passage from <title>Jane Eyre</title> discussed earlier might be divided
              into s-units as
              follows:<egXML xmlns="http://www.tei-c.org/ns/Examples"><pb n="474"/><div type="chapter" n="38">
        <p><s n="001">Reader, I married him.</s><s n="002">A quiet wedding we had:</s><s n="003">he
          and I, the parson and clerk, were alone present.</s><s n="004">When we got back from
          church, I went into the kitchen of the manor-house, where Mary was cooking the dinner, and
          John cleaning the knives, and I said —</s></p>
        <p><q><s n="005">Mary, I have been married to Mr Rochester this morning.</s></q> ... </p>
       </div></egXML>
              Note that <gi>s</gi> elements cannot nest: the beginning of one <gi>s</gi> element implies that the
              previous one has finished. When s-units are tagged as shown above, it is advisable to tag the entire text
              end-to-end, so that every word in the text being analysed will be contained by exactly one <gi>s</gi>
              element, whose identifier can then be used to specify a unique reference for it. If the identifiers used
              are unique within the document, then the <att>xml:id</att> attribute might be used in preference to the
                <att>n</att> attribute used in the above example.</p>
          </div>
          <div>
            <head>Words and punctuation</head>
            <p>Tokenization, that is, the identification of lexical or non-lexical tokens within a text, is a very
              common requirement for all kinds of textual analysis, and not an entirely trivial one. The decision as to
              whether, for example, <q>can't</q> in English or <q>du</q> in French should be treated as one word or two
              is not simple. Consequently it is often useful to make explicit the preferred tokenization in a marked up
              text. The following elements are available for this purpose: <specList>
                <specDesc key="w"/>
                <specDesc key="pc"/>
              </specList></p>
            <p>For example, the output from a part of speech tagger might be recorded in TEI Simple as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <s n="1">
        <w ana="#NP0">Marley</w>
        <w ana="#VBD">was</w>
        <w ana="#AJ0">dead</w><pc>:</pc>
        <w ana="#TO0">to</w>
        <w ana="#VBB">begin</w>
        <w ana="#PRP">with</w><pc>. </pc>
       </s></egXML>
            </p>
            <p>In this example, each word has been decorated with an automatically generated part of speech code, using
              the <att>ana</att> attribute discussed in section <ptr target="#xatts"/> above. The <gi>w</gi> also
              provides for each word to be associated with a root form or lemma, either explicitly using the
                <att>lemma</att> attribute, or by reference, using the <att>lemmaRef</att> attribute, as in this
              example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">...<w ana="#VBD" lemma="be" lemmaRef="http://www.myLexicon.com/be">was</w> ... </egXML>
            </p>
          </div>
          <div>
            <head>General-Purpose Interpretation Elements</head>
            <p>The <gi>w</gi> element is a specialisation of the <gi>seg</gi> element which has already been introduced
              for use in identifying otherwise unmarked targets of cross references and hypertext links (see section
                <ptr target="#Simple-ptrs"/>); it identifies some phrase-level portion of text to which the encoder may
              assign a user-specified <att>type</att>, as well as a unique identifier; it may thus be used to tag
              textual features for which there is no other provision in the published TEI Guidelines.</p>
            <p>For example, the Guidelines provide no <soCalled>apostrophe</soCalled> element to mark parts of a
              literary text in which the narrator addresses the reader (or hearer) directly. One approach might be to
              regard these as instances of the <gi>q</gi> element, distinguished from others by an appropriate value for
              the <att>who</att> attribute. A possibly simpler, and certainly more general, solution would however be to
              use the <gi>seg</gi> element as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><div type="chapter" n="38">
        <p><seg type="apostrophe">Reader, I married him.</seg> A quiet wedding we had: ...</p>
       </div></egXML>
              The <att>type</att> attribute on the <gi>seg</gi> element can take any value, and so can be used to record
              phrase-level phenomena of any kind; it is good practice to record the values used and their significance
              in the header.</p>
            <p/>


          </div>
        </div>


        <div xml:id="Simple-composite">
          <head/>
          <p>A composite text also has an optional front and back. In between occur one or more groups of texts, each
            with its own optional front and back matter. A composite text will thus be encoded using an overall
            structure like this:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><TEI>
     <teiHeader>
      <!--[ header information for the composite ]-->
     </teiHeader>
     <text>
      <front>
       <!--[ front matter for the composite  ]-->
      </front>
      <group>
       <text>
        <front>
         <!--[ front matter of first text ]-->
        </front>
        <body>
         <!--[ body of first text  ]-->
        </body>
        <back>
         <!--[ back matter of first text ]-->
        </back>
       </text>
       <text>
        <front>
         <!--[ front matter of second text]-->
        </front>
        <body>
         <!--[ body of second text  ]-->
        </body>
        <back>
         <!--[ back matter of second text ]-->
        </back>
       </text>
       <!--[ more texts or groups of texts here ]-->
      </group>
      <back>
       <!--[ back matter for the composite  ]-->
      </back>
     </text>
    </TEI></egXML></p>
          <p>It is also possible to define a composite of complete TEI texts, each with its own header. Such a
            collection is known as a <term>TEI corpus</term>, and must itself have a header:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><teiCorpus><teiHeader>
       <!--[header information for the corpus]--></teiHeader><TEI>
        <teiHeader><!--[header information for first text]--></teiHeader>
        <text>
         <!--[first text in corpus]-->
        </text>
       </TEI><TEI>
        <teiHeader><!--[header information for second text]--></teiHeader>
        <text>
         <!--[second text in corpus]-->
        </text>
       </TEI></teiCorpus></egXML>
            It is also possible to create a composite of corpora -- that is, one <gi>teiCorpus</gi> element may contain
            many nested <gi>teiCorpus</gi> elements rather than many nested <gi>TEI</gi> elements, to any depth
            considered necessary.</p>
        </div>

        <div xml:id="Simple-fronbac">
          <head>Front and Back Matter</head>
          <div>
            <head>Front Matter</head>
            <p>For many purposes, particularly in older texts, the preliminary material such as title pages, prefatory
              epistles, etc., may provide very useful additional linguistic or social information. P5 provides a set of
              recommendations for distinguishing the textual elements most commonly encountered in front matter, which
              are summarized here.</p>
            <div xml:id="h51">
              <head>Title Page</head>
              <p>The start of a title page should be marked with the element <gi>titlePage</gi>. All text contained on
                the page should be transcribed and tagged with the appropriate element from the following list: <specList>
                  <specDesc key="titlePage"/>
                  <specDesc key="docTitle"/>
                  <specDesc key="titlePart"/>
                  <specDesc key="byline"/>
                  <specDesc key="docAuthor"/>
                  <specDesc key="docDate"/>
                  <specDesc key="docEdition"/>
                  <specDesc key="docImprint"/>
                  <specDesc key="epigraph"/>
                </specList></p>
              <p>Typeface distinctions should be marked with the <att>rendition </att> attribute when necessary, as
                described above. Very detailed description of the letter spacing and sizing used in ornamental titles is
                not as yet provided for by the Guidelines. Changes of language should be marked by appropriate use of
                the <att>xml:lang</att> attribute or the <gi>foreign</gi> element, as necessary. Names of people,
                places, or organizations, may be tagged using the <gi>name</gi> element wherever they appear if no other
                more specific element is available.</p>
              <p>Two example title pages follow:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><titlePage rendition="Roman">
         <docTitle>
          <titlePart type="main"> PARADISE REGAIN'D. A POEM In IV <hi>BOOKS</hi>. </titlePart>
          <titlePart> To which is added <title>SAMSON AGONISTES</title>. </titlePart>
         </docTitle>
         <byline>The Author <docAuthor>JOHN MILTON</docAuthor></byline>
         <docImprint><name>LONDON</name>, Printed by <name>J.M.</name> for <name>John Starkey</name>
          at the <name>Mitre</name> in <name>Fleetstreet</name>, near
          <name>Temple-Bar.</name></docImprint>
         <docDate>MDCLXXI</docDate>
        </titlePage></egXML><egXML xmlns="http://www.tei-c.org/ns/Examples"><titlePage>
         <docTitle>
          <titlePart type="main"> Lives of the Queens of England, from the Norman
           Conquest;</titlePart>
          <titlePart type="sub">with anecdotes of their courts. </titlePart>
         </docTitle>
         <titlePart>Now first published from Official Records and other authentic documents private
          as well as public.</titlePart>
         <docEdition>New edition, with corrections and additions</docEdition>
         <byline>By <docAuthor>Agnes Strickland</docAuthor></byline>
         <epigraph>
          <q>The treasures of antiquity laid up in old historic rolls, I opened.</q>
          <bibl>BEAUMONT</bibl>
         </epigraph>
         <docImprint>Philadelphia: Blanchard and Lea</docImprint>
         <docDate>1860.</docDate>
        </titlePage></egXML></p>
              <p>As elsewhere, the <att>ref</att> attribute may be used to link a name with a canonical definition of
                the entity being named. For example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <byline>By <docAuthor><name ref="http://en.wikipedia.org/wiki/Agnes_Strickland">Agnes
           Strickland</name></docAuthor></byline>
       </egXML></p>
            </div>
            <div xml:id="h52">
              <head>Prefatory Matter</head>
              <p>Major blocks of text within the front matter should be marked using <gi>div</gi> elements; the
                following suggested values for the <att>type</att> attribute may be used to distinguish various common
                types of prefatory matter: <list type="gloss">
                  <label>preface</label>
                  <item>A foreword or preface addressed to the reader in which the author or publisher explains the
                    content, purpose, or origin of the text</item>
                  <label>dedication</label>
                  <item>A formal offering or dedication of a text to one or more persons or institutions by the
                    author.</item>
                  <label>abstract</label>
                  <item>A summary of the content of a text as continuous prose</item>
                  <label>ack</label>
                  <item>A formal declaration of acknowledgment by the author in which persons and institutions are
                    thanked for their part in the creation of a text</item>
                  <label>contents</label>
                  <item>A table of contents, specifying the structure of a work and listing its constituents. The
                      <gi>list</gi> element should be used to mark its structure.</item>
                  <label>frontispiece</label>
                  <item>A pictorial frontispiece, possibly including some text.</item>
                </list></p>
              <p>Where other kinds of prefatory matter are encountered, the encoder is at liberty to invent other values
                for the <att>type</att> attribute.</p>
              <p>Like any text division, those in front matter may contain low level structural or non-structural
                elements as described elsewhere. They will generally begin with a heading or title of some kind which
                should be tagged using the <gi>head</gi> element. Epistles will contain the following additional
                elements: <specList>
                  <specDesc key="salute"/>
                  <specDesc key="signed"/>
                  <specDesc key="byline"/>
                  <specDesc key="dateline"/>
                  <specDesc key="argument"/>
                  <specDesc key="cit"/>
                  <specDesc key="imprimatur"/>
                  <specDesc key="opener"/>
                  <specDesc key="closer"/>
                </specList></p>
              <p> Epistles which appear elsewhere in a text will, of course, contain these same elements.</p>
              <p>As an example, the dedication at the start of Milton's <title>Comus</title> should be marked up as
                follows:
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
        <div type="dedication">
         <head>To the Right Honourable <name>JOHN Lord Viscount BRACLY</name>, Son and Heir apparent
          to the Earl of Bridgewater, &amp;c.</head>
         <salute>MY LORD,</salute>
         <p>THis <hi>Poem</hi>, which receiv'd its first occasion of Birth from your Self, and
          others of your Noble Family .... and as in this representation your attendant
          <name>Thyrsis</name>, so now in all reall expression</p>
         <closer>
          <salute>Your faithfull, and most humble servant</salute>
          <signed>
           <name>H. LAWES.</name>
          </signed>
         </closer>
        </div></egXML></p>
            </div>

          </div>
          <div>
            <head>Back Matter</head>
            <div>
              <head>Structural Divisions of Back Matter</head>
              <p>Because of variations in publishing practice, back matter can contain virtually any of the elements
                listed above for front matter, and the same elements should be used where this is so. Additionally, back
                matter may contain the following types of matter within the <gi>back</gi> element. Like the structural
                divisions of the body, these should be marked as <gi>div</gi> elements, and distinguished by the
                following suggested values of the <att>type</att> attribute: <list type="gloss">
                  <label>appendix</label>
                  <item>An ancillary self-contained section of a work, often providing additional but in some sense
                    extra-canonical text.</item>
                  <label>glossary</label>
                  <item>A list of terms associated with definition texts (‘glosses’): this should be encoded as a
                      <tag>&lt;list type="gloss"></tag> element</item>
                  <label>notes</label>
                  <item>A section in which textual or other kinds of notes are gathered together.</item>
                  <label>bibliogr</label>
                  <item>A list of bibliographic citations: this should be encoded as a <gi>listBibl</gi>
                  </item>
                  <label>index</label>
                  <item>Any form of pre-existing index to the work (An index may also be generated for a document by
                    using the <gi>index</gi> element described above).</item>
                  <label>colophon</label>
                  <item>A statement appearing at the end of a book describing the conditions of its physical
                    production.</item>
                </list></p>
            </div>
          </div>
        </div>
        <div xml:id="Simple-header">
          <head>The Electronic Title Page</head>
          <p>Every TEI text has a header which provides information analogous to that provided by the title page of
            printed text. The header is introduced by the element <gi>teiHeader</gi> and has four major parts: <specList>
              <specDesc key="fileDesc"/>
              <specDesc key="encodingDesc"/>
              <specDesc key="profileDesc"/>
              <specDesc key="revisionDesc"/>
            </specList></p>
          <p> A corpus or collection of texts with many shared characteristics may have one header for the corpus and
            individual headers for each component of the corpus. In this case the <att>type</att> attribute indicates
            the type of header. <code>&lt;teiHeader type="corpus"&gt;</code> introduces the header for corpus-level
            information.</p>
          <p>Some of the header elements contain running prose which consists of one or more <gi>p</gi>s. Others are
            grouped: <list>
              <item>Elements whose names end in <mentioned>Stmt</mentioned> (for statement) usually enclose a group of
                elements recording some structured information.</item>
              <item>Elements whose names end in <mentioned>Decl</mentioned> (for declaration) enclose information about
                specific encoding practices.</item>
              <item>Elements whose names end in <mentioned>Desc</mentioned> (for description) contain a prose
                description.</item>
            </list></p>
          <div>
            <head>The File Description</head>
            <p>The <gi>fileDesc</gi> element is mandatory. It contains a full bibliographic description of the file with
              the following elements: <specList>
                <specDesc key="titleStmt"/>
                <specDesc key="editionStmt"/>
                <specDesc key="extent"/>
                <specDesc key="publicationStmt"/>
                <specDesc key="seriesStmt"/>
                <specDesc key="notesStmt"/>
                <specDesc key="sourceDesc"/>
              </specList></p>
            <p> A minimal header has the following structure:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><teiHeader>
        <fileDesc>
         <titleStmt>
          <!-- bibliographic description of the digital resource -->
         </titleStmt>
         <publicationStmt>
          <!-- information about how the resource is distributed -->
         </publicationStmt>
         <sourceDesc>
          <!-- information about the sources from which the digital resource is derived -->
         </sourceDesc>
        </fileDesc>
       </teiHeader></egXML></p>
            <div>
              <head>The Title Statement</head>
              <p>The following elements can be used in the <gi>titleStmt</gi>: <specList>
                  <specDesc key="title"/>
                  <specDesc key="author"/>
                  <specDesc key="sponsor"/>
                  <specDesc key="funder"/>
                  <specDesc key="principal"/>
                  <specDesc key="respStmt"/>
                </specList></p>
              <p> The title of a digital resource derived from a non-digital one will obviously be similar. However, it
                is important to distinguish the title of the computer file from that of the source text, for example:
                <eg>[title of source]: a machine readable transcription [title of
        source]: electronic edition A machine readable version of: [title of source]</eg>
                The <gi>respStmt</gi> element contains the following subcomponents: <specList>
                  <specDesc key="resp"/>
                  <specDesc key="name"/>
                </specList> Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><titleStmt>
         <title>Two stories by Edgar Allen Poe: a machine readable transcription</title>
         <author>Poe, Edgar Allen (1809-1849)</author>
         <respStmt>
          <resp>compiled by</resp>
          <name>James D. Benson</name>
         </respStmt>
        </titleStmt></egXML></p>
            </div>
            <div>
              <head>The Edition Statement</head>
              <p>The <gi>editionStmt</gi> groups information relating to one edition of the digital resource (where
                  <mentioned>edition</mentioned> is used as elsewhere in bibliography), and may include the following
                elements: <specList>
                  <specDesc key="edition"/>
                  <specDesc key="respStmt"/>
                </specList></p>
              <p>Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><editionStmt><edition n="U2">Third
          draft, substantially revised <date>1987</date>
         </edition></editionStmt></egXML></p>
              <p>Determining exactly what constitutes a new edition of an electronic text is left to the encoder.</p>
            </div>
            <div>
              <head>The Extent Statement</head>
              <p>The <gi>extent</gi> statement describes the approximate size of the digital resource.</p>
              <p>Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><extent>4532
        bytes</extent></egXML></p>
            </div>
            <div>
              <head>The Publication Statement</head>
              <p>The <gi>publicationStmt</gi> is mandatory. It may contain a simple prose description or groups of the
                elements described below: <specList>
                  <specDesc key="publisher"/>
                  <specDesc key="distributor"/>
                  <specDesc key="authority"/>
                </specList></p>
              <p>At least one of these three elements must be present, unless the entire publication statement is in
                prose. The following elements may occur within them: <specList>
                  <specDesc key="pubPlace"/>
                  <specDesc key="address"/>
                  <specDesc key="idno"/>
                  <specDesc key="availability"/>
                  <specDesc key="licence"/>
                  <specDesc key="date"/>
                </specList></p>
              <p>Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><publicationStmt>
         <publisher>University of Victoria Humanities Computing and Media Centre</publisher>
         <pubPlace>Victoria, BC</pubPlace>
         <date>2011</date>
         <availability status="restricted">
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed under a
           Creative Commons Attribution-ShareAlike 3.0 Unported License </licence>
         </availability>
        </publicationStmt></egXML></p>
            </div>
            <div>
              <head>Series and Notes Statements</head>
              <p>The <gi>seriesStmt</gi> element groups information about the series, if any, to which a publication
                belongs. It may contain <gi>title</gi>, <gi>idno</gi>, or <gi>respStmt</gi> elements.</p>
              <p>The <gi>notesStmt</gi>, if used, contains one or more <gi>note</gi> elements which contain a note or
                annotation. Some information found in the notes area in conventional bibliography has been assigned
                specific elements in the TEI scheme.</p>
            </div>
            <div>
              <head>The Source Description</head>
              <p>The <gi>sourceDesc</gi> is a mandatory element which records details of the source or sources from
                which the computer file is derived. It may contain simple prose or a bibliographic citation, using one
                or more of the following elements: <specList>
                  <specDesc key="bibl"/>
                  <specDesc key="listBibl"/>
                </specList></p>
              <p>Examples: <egXML xmlns="http://www.tei-c.org/ns/Examples"><sourceDesc>
         <bibl>The first folio of Shakespeare, prepared by Charlton Hinman (The Norton Facsimile,
          1968)</bibl>
        </sourceDesc></egXML>
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><sourceDesc>
         <bibl><author>CNN Network News</author><title>News headlines</title><date>12 Jun
           1989</date></bibl>
        </sourceDesc></egXML></p>
            </div>
          </div>
          <div>
            <head>The Encoding Description</head>
            <p>The <gi>encodingDesc</gi> element specifies the methods and editorial principles which governed the
              transcription of the text. Its use is highly recommended. It may be prose description or may contain
              elements from the following list: <specList>
                <specDesc key="projectDesc"/>
                <specDesc key="samplingDecl"/>
                <specDesc key="editorialDecl"/>
                <specDesc key="refsDecl"/>
                <specDesc key="classDecl"/>
              </specList></p>
            <div>
              <head>Project and Sampling Descriptions</head>
              <p>Examples of <gi>projectDesc</gi> and <gi>samplingDesc</gi>: <egXML xmlns="http://www.tei-c.org/ns/Examples"><encodingDesc><projectDesc><p>Texts collected for
           use in the Claremont Shakespeare Clinic, June 1990.
        </p></projectDesc></encodingDesc></egXML>
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><encodingDesc><samplingDecl><p>Samples of
           2000 words taken from the beginning of the text</p>
         </samplingDecl></encodingDesc></egXML></p>
            </div>
            <div>
              <head>Editorial Declarations</head>
              <p>The <gi>editorialDecl</gi> contains a prose description of the practices used when encoding the text.
                Typically this description should cover such topics as the following, each of which may conveniently be
                given as a separate paragraph. <list type="gloss">
                  <label>correction </label>
                  <item>how and under what circumstances corrections have been made in the text.</item>
                  <label>normalization</label>
                  <item>the extent to which the original source has been regularized or normalized.</item>
                  <label>quotation</label>
                  <item>what has been done with quotation marks in the original -- have they been retained or replaced
                    by entity references, are opening and closing quotes distinguished, etc. </item>
                  <label>hyphenation</label>
                  <item>what has been done with hyphens (especially end-of-line hyphens) in the original -- have they
                    been retained, replaced by entity references, etc.</item>
                  <label>segmentation</label>
                  <item>how has the text has been segmented, for example into sentences, tone-units, graphemic strata,
                    etc.</item>
                  <label>interpretation</label>
                  <item>what analytic or interpretive information has been added to the text. </item>
                </list></p>
              <p>Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><editorialDecl><p>The part of
          speech analysis applied throughout section 4 was added by hand and has not been
          checked.</p><p>Errors in transcription controlled by using the WordPerfect spelling
          checker.</p><p>All words converted to Modern American spelling using Webster's 9th
          Collegiate dictionary.</p></editorialDecl></egXML></p>
            </div>
            <div xml:id="refsdecl">
              <head>Reference and Classification Declarations</head>
              <p>The <gi>refsDecl</gi> element is used to document the way in which any standard referencing scheme
                built into the encoding works. In its simplest form, it consists of prose description.</p>
              <p>Example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><refsDecl><p>The <att>n</att>
          attribute on each <gi>div</gi> contains the canonical reference for each division in the
          form XX.yyy where XX is the book number in roman numeral and yyy is the section number in
          arabic.</p><p>Milestone tags refer to the edition of 1830 as E30 and that of 1850 as E50.
         </p></refsDecl></egXML></p>
              <p>The <gi>classDecl</gi> element groups together definitions or sources for any descriptive
                classification schemes used by other parts of the header. At least one such scheme must be provided,
                encoded using the following elements: <specList>
                  <specDesc key="taxonomy"/>
                  <specDesc key="bibl"/>
                  <specDesc key="category"/>
                  <specDesc key="catDesc"/>
                </specList></p>
              <p> In the simplest case, the taxonomy may be defined by a bibliographic reference, as in the following
                example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><classDecl><taxonomy xml:id="LC-SH"><bibl>Library of Congress Subject Headings
        </bibl></taxonomy></classDecl></egXML></p>
              <p>Alternatively, or in addition, the encoder may define a special purpose classification scheme, as in
                the following example:
                <egXML xmlns="http://www.tei-c.org/ns/Examples"><taxonomy xml:id="B"><bibl>Brown Corpus</bibl><category xml:id="B.A"><catDesc>Press
           Reportage</catDesc><category xml:id="B.A1"><catDesc>Daily</catDesc></category><category xml:id="B.A2"><catDesc>Sunday</catDesc></category><category xml:id="B.A3"><catDesc>National</catDesc></category><category xml:id="B.A4"><catDesc>Provincial</catDesc></category><category xml:id="B.A5"><catDesc>Political</catDesc></category><category xml:id="B.A6"><catDesc>Sports</catDesc></category></category><category xml:id="B.D"><catDesc>Religion</catDesc><category xml:id="B.D1"><catDesc>Books</catDesc></category><category xml:id="B.D2"><catDesc>Periodicals and
            tracts</catDesc></category></category>
        </taxonomy></egXML></p>
              <p>Linkage between a particular text and a category within such a taxonomy is made by means of the
                  <gi>catRef</gi> element within the <gi>textClass</gi> element, as described in the next section
                below.</p>
            </div>
          </div>
          <div>
            <head>The Profile Description</head>
            <p>The <gi>profileDesc</gi> element enables information characterizing various descriptive aspects of a text
              to be recorded within a single framework. It has three optional components: <specList>
                <specDesc key="creation"/>
                <specDesc key="langUsage"/>
                <specDesc key="textClass"/>
              </specList></p>
            <p>The <gi>creation</gi> element is useful for documenting where a work was created, even though it may not
              have been published or recorded there.</p>
            <p>Example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><creation><date when="1992-08">August 1992</date><name type="place">Taos, New Mexico</name></creation></egXML></p>
            <p>The <gi>langUsage</gi> element is useful where a text contains many different languages. It may contain
                <gi>language</gi> elements to document each particular language used: <specList>
                <specDesc key="language"/>
              </specList> For example, a text containing predominantly text in French as spoken in Quebec, but also
              smaller amounts of British and Canadian English might be documented as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><langUsage>
        <language ident="fr-CA" usage="60">Québecois</language>
        <language ident="en-CA" usage="20">Canadian business English</language>
        <language ident="en-GB" usage="20">British English</language>
       </langUsage>
      </egXML>
            </p>
            <p>The <gi>textClass</gi> element classifies a text. This may be done with reference to a classification
              system locally defined by means of the <gi>classDecl</gi> element, or by reference to some externally
              defined established scheme such as the Universal Decimal Classification. Texts may also be classified
              using lists of keywords, which may themselves be drawn from locally or externally defined control lists.
              The following elements are used to supply such classifications: <specList>
                <specDesc key="classCode"/>
                <specDesc key="catRef"/>
                <specDesc key="keywords"/>
              </specList>
            </p>
            <p>The simplest way of classifying a text is by means of the <gi>classCode</gi> element. For example, a text
              with classification 410 in the Universal Decimal Classification might be documented as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <classCode scheme="http://www.udc.org">410</classCode>
      </egXML>
            </p>
            <p>When a classification scheme has been locally defined using the <gi>taxonomy</gi> element discussed in
              the preceding subsection, the <gi>catRef</gi> element should be used to reference it. To continue the
              earlier example, a work classified in the Brown Corpus as <code>Press reportage - Sunday</code> and also
              as <code>Religion</code> might be documented as follows:
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
       <catRef target="#B.A3 #B.D"/>
      </egXML>
            </p>
            <p>The element <gi>keywords</gi> contains a list of keywords or phrases identifying the topic or nature of a
              text. As usual, the attribute <att>scheme</att> identifies the source from which these terms are taken.
              For example, if the LC Subject Headings are used, following declaration of that classification system in a
                <gi>taxonomy</gi> element as above :
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><textClass><keywords scheme="#LCSH"><list>
          <item>English literature -- History and criticism -- Data processing.</item>
          <item>English literature -- History and criticism -- Theory etc.</item>
          <item>English language -- Style -- Data processing.</item>
         </list></keywords></textClass></egXML></p>
            <p>Multiple classifications may be supplied using any of the mechanisms described in this section.</p>
          </div>
          <div>
            <head>The Revision Description</head>
            <p>The <gi>revisionDesc</gi> element provides a change log in which each change made to a text may be
              recorded. The log may be recorded as a sequence of <gi>change</gi> elements each of which contains a brief
              description of the change. The attributes <att>when</att> and <att>who</att> may be used to identify when
              the change was carried out and the agency responsible for it. </p>
            <p>Example:
              <egXML xmlns="http://www.tei-c.org/ns/Examples"><revisionDesc>
        <change when="1991-03-06" who="#EMB">File format updated</change>
        <change when="1990-05-25" who="#EMB">Stuart's corrections entered</change>
       </revisionDesc></egXML></p>
            <p>In a production environment it will usually be found preferable to use some kind of automated system to
              track and record changes. Many such <term>version control systems</term>, as they are known, can also be
              configured to update the TEI Header of a file automatically. </p>
          </div>
        </div>
      </div>
      <div xml:id="processingmodel"> 
        <head>A Short Tour of the Processing Model</head>
        <p></p>
        
        <p> The key feature of the Processing Model is a notation that allows each element to be assigned to a
        structural category, which in turn is mapped to a description of how to render it. This allows a processor to know whether to handle the element or not, and broadly speaking how to display or otherwise process it. Several projects that have used TEI Simple and its Processing Model report that it cuts the length of required code by two thirds, reduces its complexity, and makes it easier to maintain.  The model and rendition instructions are part of the TEI ODD and can be customized. </p>
        <p>ODD, short for <q>One Document Does it all</q>, is the technology used by the TEI for maintaining its rules. An ODD is an XML document written in a <term>literate programming</term> style, mixing code and explanatory prose. From an ODD and with the use of an <term>ODD Processor</term> you can produce reference documentation as well as schemas. Support for the Processing Model is a significant extension of the TEI ODD and provides and answer to the question of what to do with a text once you have encoded it. Encoding is often the easy part.  For a fuller account of ODD see the chapter on <ref target = "http://www.tei-c.org/release/doc/tei-p5-doc/en/html/TD.html">Documentation Elements</ref> in the Guidelines. </p>
        <p>In principle there are a variety of ways in which a processor can use processing instructions encoded in the ODD to produce a readable text, whether a Web page, an epub, or a PDF. In practice <ref target ="http://showcases.exist-db.org/exist/apps/tei-simple/index.html">Wolfgang Meier's XQuery based ODD processor</ref>  is the fullest and most thoroughly tested current implementation. From the instructions in the ODD it creates an XQuery Library module that relies heavily on  XQuery's typeswitch, a switch or case statement whose structure lends itself to transforming each processing instruction in the ODD into an XQuery function.  In  a second step the XQuery Library module is used to transform the TEI Simple text.  </p>
        
       
     <div><head>The &lt;model&gt; element with some of its attributes and children</head>
       
       <p>  In the TEI ODD, the specifications for a particular element are recorded
        in an element called <gi>elementSpec</gi>. The processing instructions for each element are kept in one or more <gi>model </gi> elements that are children of &lt;elementSpec&gt;. In the simplest and modal case the processing instruction is recorded as the value of a <att>behaviour</att> attribute:
        <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="back" mode="change" >
          <model behaviour="block"/>
        </elementSpec></egXML>
        This means  <q>Apply the behaviour <term>block</term> to the element &lt;back&gt;</q>.
      </p>
        
        <p>A   slightly more complex processing instruction says that the rendering of the source document should be followed but specifies a rendition if there is nothing in the source:
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <elementSpec ident="l" mode="change" >
            <model behaviour="block" useSourceRendition="true">
              <outputRendition> margin-left: 1em; </outputRendition>
            </model>
          </elementSpec></egXML>
        </p>
        <p>The <term>behaviour</term> of an element may depend on its attributes or place in the XML hierarchy.  Here is the processing rule that distinguishes between a header row and an ordinary row in a table: 
          
          <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="row" mode="change" >
            <model predicate="@role='label'" behaviour="row">
              <outputRendition>font-weight: bold;</outputRendition>
            </model>
            <model behaviour="row">
              <desc>Insert table row. </desc>
            </model>
          </elementSpec></egXML>
          
          The  first &lt;model&gt; with its <att>predicate</att> attribute specifies the condition under which you use bold type for text in a table row. The second model specifies the default behaviour. The <gi>desc</gi> element in the second model explains the meaning of <term>row</term> behaviour. It is optional. The next example shows the different treatment of &lt;div&gt;, depending on whether it contains a title-page, is a child element of &lt;front&gt;, &lt;body&gt;, or &lt;back&gt;, or a child element of &lt;div&gt;:
          
          <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="div" mode="change" >
            <model predicate="@type='title_page'" behaviour="block">
              <outputRendition>border: 1px solid black; padding: 5px;</outputRendition>
            </model>
            <model behaviour="section" predicate="parent::body or parent::front or parent::back"/>
            <model behaviour="block"/>
          </elementSpec></egXML>
        
        </p>
        <p>The <gi>param</gi> child of &lt;model&gt; associates  a <term>behaviour</term> with the parameters or objects to which it applies. Thus the processing instruction for &lt;list&gt; tells you that the behaviour <term>list</term> targets items:
          <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="list" mode="change" >
            <model predicate="@rendition" behaviour="list" useSourceRendition="true">
              <param name="content">item</param>
            </model>
            <model predicate="not(@rendition)" behaviour="list">
              <param name="content">item</param>
            </model>
          </elementSpec></egXML>
        </p></div>
        
        <div>
          <head>More about Behaviours</head>
          
          <p>The <att>behaviour</att> attribute has 26 different values, each of them describing what needs to be done to a TEI element for it to be transformed into part of a Web document, PDF file,or other output. We list them below, together with the names of the elements to which they apply, in descending order of the number of elements with which they are associated: </p>
          <list>
            <item><label> INLINE (49)  </label><hi>creates inline element out of content if there's something in &lt;outputRendition&gt;, use that formatting; otherwise just show text of selected content.: </hi>abbr, actor, add, am author, bibl, c, choice, corr, date, del, desc, docAuthor, docDate, docEdition, docImprint, ex, expan, figDesc, figure, foreign, formula, formula, gap, handShift, hi, label, measure, milestone, name, note, num, orig, pc, ref, reg, rhyme, rs, s, salute, seg, sic, signed, space, subst, supplied, time, unclear, w, quote</item>
            <item><label>BLOCK (35) </label><hi>create a block structure: </hi>address, addrLine, argument, back, body, byline, closer, dateline,  div, doctitle, epigraph, figure, floatingText, formula, front, fw, group, head, imprimatur, l, lg, listBibl, note, opener, postscript, q, quote, role, roleDesc, salute, signed, sp, speaker, titlePage, titlePart, trailer </item>
            <item><label>OMIT (10) </label><hi>do nothing, do not process children: </hi>author, docAuthor, docDate, docEdition, docImprint, docTitle, encodingDesc, profileDesc, publisher, pubPlace, revisionDesc</item>
            <item><label>LIST (4) </label><hi>create a list by following content: </hi>castGroup, castList, list, listBibl</item>
            
            
            <item><label>BREAK (3) </label><hi>create a line, column, or page break according to type: </hi>cb, lb, pb</item>
            <item><label>LISTITEM (3) </label><hi>create list item: </hi>bibl, castItem, item</item>
            <item><label>ALTERNATE (2) </label><hi>: </hi> <hi>create a specialized display of alternating elements for displaying the preferred version and an alternative, both at once or by some method of toggling between the two:</hi> date,choice</item>
            <item><label>PARAGRAPH (2) </label><hi>create a paragraph out of content.: </hi>ab, p</item>
            
            <item><label>ANCHOR </label><hi>create an anchor with ID: </hi>anchor</item>
            <item><label>BODY </label><hi>create the body of a document body: </hi></item>
            <item><label>CELL </label><hi>create a table cell: </hi>cit</item>
            <item><label>CIT </label><hi>show the content, with an indication of the source: </hi>cit</item>
            <item><label>DOCUMENT </label><hi>start a new output document: </hi> TEI</item>
            <item><label>FIGURE </label><hi>make a figure with the title as caption: </hi> figure</item>
            
            <item><label>GLYPH </label><hi>show a character by looking up reference to a chardesc at the given URI: </hi> g</item>
            <item><label>GRAPHIC </label><hi>if url is present, uses it to display graphic, else display a placeholder image.
              heading: </hi> graphic</item>
            <item><label>HEADING </label><hi>creates a heading.: </hi> head</item>
            <item><label>INDEX </label><hi>generate list according to type: </hi> body</item>
            <item><label>LINK</label><hi>create hyperlink: </hi> ref</item>
            <item><label>METADATA </label><hi>create metadata section: </hi> teiHeader</item>
            <item><label>NOTE </label><hi>create an note, often out of line, depending on the value of place; could be margin, footnote, endnote, inline: </hi>note</item>
            <item><label>ROW </label><hi>create a table row: </hi> row</item>
            <item><label>SECTION </label><hi>create a new section of the output document: </hi> div</item>
            
            <item><label>TABLE </label><hi>create a table: </hi>table</item>
            <item><label>TEXT </label><hi>create literal text: </hi>title</item>            
            <item><label>TITLE </label><hi>create document title: </hi>fileDesc</item>            
            
          </list>
          <p>There are several things to be said about this list. First, the names of the <term>behaviours</term> as well as their explanations, will be familiar to programmers who work with texts on the Web. Secondly, there are far fewer behaviours (26) than elements. </p>
          <p>Of the 105  elements in TEI Simple 76 have only one behaviour associated with them. Not quite two dozen elements have two behaviours associated with them. The <term>omit</term> behaviour is used to suppress the display of elements that can occur both in the &lt;teiHeader&gt; and the &lt;text&gt; element, as in the following example:
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="docDate" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec></egXML>
            
            
 Because the processor moves across  &lt;model&gt; elements in the order of their occurrence, it is important to put the more specific condition first. In the following examples the alternatives are stated with equal degrees of explicitness, and the order does not matter:
 
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="list" mode="change" >
              <model predicate="@rendition" behaviour="list" useSourceRendition="true">
                <param name="content">item</param>
              </model>
              <model predicate="not(@rendition)" behaviour="list">
                <param name="content">item</param>
              </model>
            </elementSpec></egXML>
          
          </p>
          
          <p>Half a dozen elements have more than two models, but <hi>more  </hi>does not necessarily mean <hi>more complex</hi>. Take the &lt;head&gt; element, which can appear in a variety of environments and for which the Processing Model enumerates five explicit cases followed by a default case:
            
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="head" mode="change" >
              <model predicate="parent::figure" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::table" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::lg" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::list" behaviour="block">
                <outputRendition>font-weight: bold;</outputRendition>
              </model>
              <model predicate="parent::div" behaviour="heading">
                <param name="level">count(ancestor::div)</param>
              </model>
              <model behaviour="block"/>
            </elementSpec></egXML>
          
          Four of these models combine a predicate specifying the parent element with a simple CSS rendering instruction. The instruction for headings of &lt;div&gt; elements is a little more interesting: <code>count(ancestor::div)</code> is a little function that numbers the divs automatically. </p>
          
          <p>A few processing instructions are quite complex. Take the behaviour <term>alternate</term>, which allows you to toggle between two different elements that are alternative child elements of <gi>choice</gi> and lets you choose between
          <list>
            <item>an abbreviation and its expansion (<gi>abbr</gi> ad <gi>expan</gi></item>
            <item>an error in the text and its correction (<gi>sic</gi> ad <gi>corr</gi>)</item>
            <item>an orthographic variant and its regular form (<gi>orig</gi> ad <gi>reg</gi>) </item>
          </list>           
          </p>
          <p>Two elements (<gi>body</gi> and <gi>title</gi> have processing instructions in which several model elements are chained together as a sequence and wrapped in a <gi>modelSequence</gi>. The processing instruction for <gi>body</gi> reads
          <egXML xmlns="http://www.tei-c.org/ns/Examples"><elementSpec ident="body" mode="change" >
            <modelSequence>
              <model behaviour="index">
                <param name="type">'toc'</param>
              </model>
              <model behaviour="block"/>
            </modelSequence>
          </elementSpec></egXML>
          
      This sequence creates the framework for a display of the text together with a navigation panel that contains a table of context. The other (and rather daunting) <gi>modelSequence</gi> works through all the options of displaying titles in various bibliographical environments.    
          </p></div>
        
        
        <div xml:id ='customization'>
          <head>Customizing the Processing Model</head>
          <p>The point of the Processing Model is to reduce the time and effort it takes to publish a TEI text that meets scholarly standards. Its virtues are Spartan rather than Corinthian. If you can get acceptable results by staying within its rules you probably should. But modifications are possible and will sometimes be necessary. Some of them are easier to achieve than others. 
            A processing instruction like 
            
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><outputRendition>font-style: italic;</outputRendition></egXML>
            
            is just a specific form of the more general
            
            <egXML xmlns="http://www.tei-c.org/ns/Examples"><outputRendition>{some CSS}</outputRendition></egXML>
            
            It is not hard to replace one set of CSS instructions with another. Changing the basic behaviour of a model is a different matter, and you need to think about unintended consequences. The following figure illustrates the general workflow of the Processing Model. Red and green are used as they are in traffic signals. Traveling along the green lines will be relatively easy. The red lines may cause trouble and will certainly involve a lot more work. 
           
            
          </p>
          
          <p>
            <figure>
              <graphic url="images/SPM2.png"/>
              <head>Processing model workflow</head>
            </figure>
          </p>
          
          
        </div>
        
        
        
        
      </div>
        
      











      <div> <p>
        <figure>
          <graphic url="images/SPM2.png"/>
          <head>Processing model workflow</head>
        </figure>
      </p>
        <p>This method of working assumes a workflow with three parts, and three distinct roles, to create a digital
          edition from a TEI text: <list rend="ordered">
            <item>an <emph>editor</emph> is responsible for the encoding and makes high-level output decisions. These
              fall into two parts <list rend="ordered">
                <item><emph>Structural</emph> descriptions, eg <q>should the original or corrected version be displayed
                  by default</q>, or <q>is this a block level or inline component</q></item>
                <item>Indications of <emph>appearance</emph> (<q>titles are in italics</q>).</item>
              </list>
            </item>
            <item>a <emph>designer</emph> creates the output envelope (for example, a book layout using InDesign or a
              web site using Drupal), making decisions in conjunction with the editor (<q>use Garamond font
                throughout</q> or <q>every page must show the departmental logo</q>)</item>
            <item>a <emph>programmer</emph> takes the <emph>editor</emph>'s specification, and the TEI text(s), and
              creates the input for the <emph>designer</emph> to make the output.</item>
          </list> It is crucial to understand here that neither the designer nor the programmer need have any
          understanding of the semantics of TEI elements, or the structure of a TEI document. The programmer,
          particularly, can use the processing model rules to extract material from the TEI text in a relatively simple
          way. The method works for a variety of output formats, as the programmer simply has to provide implementations
          for a small number of functions, and understand the well-documented features of CSS. The concepts addressed by
          the functions (eg <q>block</q> and <q>inline</q>) are in line with XSL FO, and HTML. Implementations of the
          processing model can be done in a variety or languages or environments, but any implementation must include an
          XPath 2.0 interpreter, as this is used in several places in the processing notation. </p></div>

      <div>
        <head>The TEI Simple schema</head>
        <schemaSpec ident="teisimple" start="TEI teiCorpus">
          <specGrpRef target="#base"/>
          <specGrpRef target="#header"/>
          <specGrpRef target="#header2"/>
          <specGrpRef target="#transcr"/>
          <specGrpRef target="#attclasses"/>
          <specGrpRef target="#modelclasses"/>
          <specGrpRef target="#simpleelements"/>
          <specGrpRef target="#simpleelementspm"/>
          <specGrpRef target="#simplechanges"/>
          <specGrpRef target="#rendition"/>
        </schemaSpec>
        <include xmlns="http://www.w3.org/2001/XInclude" href="elementsummary.xml"/>
        <div>
          <head>The TEI infrastructure</head>
          <specGrp xml:id="base">
            <moduleRef key="tei"/>
          </specGrp>
        </div>
        <div>
          <head>The header</head>
          <p>The default set of elements for the header are loaded using the <term>header</term> module. In addition,
            elements from other modules are loaded, if they are tagged in the classification as being needed for the
            header only.</p>
          <include xmlns="http://www.w3.org/2001/XInclude" href="headerelements.xml"/>
          <specGrp xml:id="header2">
            <p>Elements which are only intended to be used in the header are banned from the <gi>text</gi>, using a
              Schematron rule.</p>
            <elementSpec ident="text" mode="change">
              <include xmlns="http://www.w3.org/2001/XInclude" href="headeronly.xml"/>
            </elementSpec>
          </specGrp>
        </div>
        <div>
          <head>Transcription</head>
          <p>In order to support the <gi>sourcedoc</gi> and <gi>facsimile</gi> elements, the basic transcriptional
            elements are loaded, and two attribute classes.</p>
          <specGrp xml:id="transcr">
            <elementRef key="damage"/>
            <elementRef key="damageSpan"/>
            <elementRef key="facsimile"/>
            <elementRef key="line"/>
            <elementRef key="listTranspose"/>
            <elementRef key="metamark"/>
            <elementRef key="mod"/>
            <elementRef key="redo"/>
            <elementRef key="restore"/>
            <elementRef key="retrace"/>
            <elementRef key="sourceDoc"/>
            <elementRef key="surface"/>
            <elementRef key="surfaceGrp"/>
            <elementRef key="surplus"/>
            <elementRef key="transpose"/>
            <elementRef key="undo"/>
            <elementRef key="zone"/>
            <classRef key="att.coordinated"/>
            <classRef key="att.global.change"/>
          </specGrp>
        </div>
        <div>
          <head>Attribute classes</head>
          <specGrp xml:id="attclasses">
            <p>The <term>tei</term> module brings with it a default set of attribute classes. We need some more
              specialist ones from other modules, and to delete some default ones which we don't plan to use.</p>
            <classRef key="att.global.analytic"/>
            <classRef key="att.global.facs"/>
            <classRef key="att.milestoneUnit"/>
            <classRef key="att.global.linking"/>
            <classSpec type="atts" ident="att.datcat" mode="delete"/>
            <classSpec type="atts" ident="att.declarable" mode="delete"/>
            <classSpec type="atts" ident="att.divLike" mode="delete"/>
            <p>Some uncommon attributes are removed from global linking.</p>
            <classSpec type="atts" ident="att.global.linking" mode="change">
              <attList>
                <attDef ident="synch" mode="delete"/>
                <attDef ident="copyOf" mode="delete"/>
                <attDef ident="exclude" mode="delete"/>
                <attDef ident="select" mode="delete"/>
              </attList>
            </classSpec>
            <p>URLs have a constraint that a local pointer must have a corresponding ID.</p>
            <classSpec type="atts" ident="att.pointing" mode="change">
              <attList>
                <attDef ident="target" mode="change">
                  <constraintSpec ident="validtarget" scheme="isoschematron">
                    <constraint>
                      <rule xmlns="http://purl.oclc.org/dsdl/schematron" context="tei:*[@target]">
                        <let name="results"
                          value="for $t in        tokenize(normalize-space(@target),'\s+') return starts-with($t,'#') and not(id(substring($t,2)))"/>
                        <report test="some $x in $results  satisfies $x"> Error: Every local pointer in "<value-of
                            select="@target"/>" must point to an ID in this document (<value-of select="$results"
                          />)</report>
                      </rule>
                    </constraint>
                  </constraintSpec>
                </attDef>
              </attList>
            </classSpec>
            <p>Constrained value lists are added to attribute classes where possible.</p>
            <classSpec type="atts" mode="change" ident="att.placement">
              <attList>
                <attDef ident="place" mode="change">
                  <valList type="closed" mode="replace">
                    <valItem ident="above">
                      <?exactMatch supralinear?>
                      <desc>above the line</desc>
                    </valItem>
                    <valItem ident="below">
                      <desc>below the line</desc>
                    </valItem>
                    <valItem ident="top">
                      <?exactMatch pageTop?>
                      <desc>at the top of the page</desc>
                    </valItem>
                    <valItem ident="top-right">
                      <desc>at the top right of the page</desc>
                    </valItem>
                    <valItem ident="top-left">
                      <desc>at the top left of the page</desc>
                    </valItem>
                    <valItem ident="top-centre">
                      <?exactMatch top-center?>
                      <desc>at the top center of the page</desc>
                    </valItem>
                    <valItem ident="bottom-right">
                      <?exactMatch bot-right?>
                      <desc>at the bottom right of the page</desc>
                    </valItem>
                    <valItem ident="bottom-left">
                      <?exactMatch bot-left?>
                      <desc>at the bottom left of the page</desc>
                    </valItem>
                    <valItem ident="bottom-centre">
                      <?exactMatch bottom-center?>
                      <?exactMatch bot-center?>
                      <desc>at the bottom centre of the page</desc>
                    </valItem>
                    <valItem ident="bottom">
                      <?exactMatch foot?>
                      <desc>at the foot of the page</desc>
                    </valItem>
                    <valItem ident="tablebottom">
                      <desc>underneath a table</desc>
                      <?exactMatch tablefoot?>
                    </valItem>
                    <valItem ident="margin-right">
                      <?exactMatch right?>
                      <?exactMatch marg1?>
                      <?exactMatch marg2?>
                      <?exactMatch marg3?>
                      <?exactMatch marg4?>
                      <desc>in the right-hand margin</desc>
                    </valItem>
                    <valItem ident="margin">
                      <?exactMatch margin-outer?>
                      <desc>in the outer margin</desc>
                    </valItem>
                    <valItem ident="margin-inner">
                      <desc>in the inner margin</desc>
                    </valItem>
                    <valItem ident="margin-left">
                      <?exactMatch left?>
                      <desc>in the left-hand margin</desc>
                    </valItem>
                    <valItem ident="opposite">
                      <desc>on the opposite, i.e. facing, page.</desc>
                    </valItem>
                    <valItem ident="overleaf">
                      <desc>on the other side of the leaf.</desc>
                    </valItem>
                    <valItem ident="overstrike">
                      <desc>superimposed on top of the current context</desc>
                    </valItem>
                    <valItem ident="end">
                      <desc>at the end of the volume.</desc>
                    </valItem>
                    <valItem ident="divend">
                      <desc>at the end the current division.</desc>
                    </valItem>
                    <valItem ident="parend">
                      <desc>at the end the current paragraph.</desc>
                    </valItem>
                    <valItem ident="inline">
                      <?exactMatch in?>
                      <desc>within the body of the text.</desc>
                    </valItem>
                    <valItem ident="inspace">
                      <desc>in a predefined space, for example left by an earlier scribe.</desc>
                    </valItem>
                    <valItem ident="block">
                      <?exactMatch display?>
                      <desc>formatted as an indented paragraph</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </classSpec>
            <classSpec type="atts" ident="att.dimensions" mode="change">
              <attList>
                <attDef ident="unit" mode="change">
                  <valList mode="add" type="closed">
                    <valItem ident="chars">
                      <desc>characters</desc>
                      <?exactMatch char?>
                      <?exactMatch characters?>
                    </valItem>
                    <valItem ident="lines">
                      <desc>lines</desc>
                      <?exactMatch line?>
                    </valItem>
                    <valItem ident="pages">
                      <desc>pages</desc>
                      <?exactMatch page?>
                    </valItem>
                    <valItem ident="words">
                      <desc>words</desc>
                      <?exactMatch word?>
                    </valItem>
                    <valItem ident="cm">
                      <desc>centimetres</desc>
                    </valItem>
                    <valItem ident="mm">
                      <desc>millimetre</desc>
                    </valItem>
                    <valItem ident="in">
                      <desc>inches</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </classSpec>
            <classSpec type="atts" ident="att.global.rendition" mode="change">
              <constraintSpec ident="renditionpointer" scheme="isoschematron">
                <constraint>
                  <rule xmlns="http://purl.oclc.org/dsdl/schematron" context="tei:*[@rendition]">
                    <let name="results"
                      value="for $val in tokenize(normalize-space(@rendition),'\s+') return        starts-with($val,'simple:')        or        (starts-with($val,'#')        and        //tei:rendition[@xml:id=substring($val,2)])"/>
                    <assert test="every $x in $results satisfies $x"> Error: Each of the rendition values in "<value-of
                        select="@rendition"/>" must point to a local ID or to a token in the Simple scheme (<value-of
                        select="$results"/>)</assert>
                  </rule>
                </constraint>
              </constraintSpec>
              <constraintSpec ident="corresppointer" scheme="isoschematron">
                <constraint>
                  <rule xmlns="http://purl.oclc.org/dsdl/schematron" context="tei:*[@corresp]">
                    <let name="results"
                      value="for $t in        tokenize(normalize-space(@corresp),'\s+') return starts-with($t,'#') and not(id(substring($t,2)))"/>
                    <report test="some $x in $results  satisfies $x"> Error: Every local pointer in "<value-of
                        select="@corresp"/>" must point to an ID in this document (<value-of select="$results"
                      />)</report>
                  </rule>
                </constraint>
              </constraintSpec>
              <attList>
                <attDef ident="rend" mode="delete"/>
                <attDef ident="style" mode="delete"/>
                <attDef ident="rendition" mode="change">
                  <valList mode="add" type="semi">
                    <valItem ident="simple:allcaps">
                      <?exactMatch upper-roman?>
                      <?exactMatch uc?>
                      <desc>all capitals</desc>
                    </valItem>
                    <valItem ident="simple:blackletter">
                      <?exactMatch blackLetter?>
                      <?exactMatch blackletterType?>
                      <?exactMatch FrakturType?>
                      <?exactMatch gothic?>
                      <desc>black letter or gothic typeface</desc>
                    </valItem>
                    <valItem ident="simple:bold">
                      <?exactMatch b?>
                      <?exactMatch bo?>
                      <?exactMatch bol?>
                      <?exactMatch strong?>
                      <desc>bold typeface</desc>
                    </valItem>
                    <valItem ident="simple:bottombraced">
                      <desc>marked with a brace under the bottom of the text</desc>
                    </valItem>
                    <valItem ident="simple:boxed">
                      <?exactMatch border?>
                      <desc>border around the text</desc>
                    </valItem>
                    <valItem ident="simple:centre">
                      <?exactMatch center?>
                      <desc>centred</desc>
                    </valItem>
                    <valItem ident="simple:cursive">
                      <desc>cursive typeface</desc>
                    </valItem>
                    <valItem ident="simple:display">
                      <desc>block display</desc>
                    </valItem>
                    <valItem ident="simple:doublestrikethrough">
                      <desc>strikethrough with double line</desc>
                    </valItem>
                    <valItem ident="simple:doubleunderline">
                      <desc>underlined with double line</desc>
                    </valItem>
                    <valItem ident="simple:dropcap">
                      <?exactMatch decorInit?>
                      <desc>initial letter larger or decorated</desc>
                    </valItem>
                    <valItem ident="simple:float">
                      <desc>floated out of main flow</desc>
                    </valItem>
                    <valItem ident="simple:hyphen">
                      <desc>with a hyphen here (eg in line break)</desc>
                    </valItem>
                    <valItem ident="simple:inline">
                      <desc>inline rendering</desc>
                    </valItem>
                    <valItem ident="simple:justify">
                      <desc>justified text</desc>
                    </valItem>
                    <valItem ident="simple:italic">
                      <?exactMatch italics?>
                      <?exactMatch ITALIC?>
                      <?exactMatch i?>
                      <?exactMatch it?>
                      <?exactMatch ital?>
                      <desc>italic typeface</desc>
                    </valItem>
                    <valItem ident="simple:larger">
                      <?exactMatch large?>
                      <desc>larger type</desc>
                    </valItem>
                    <valItem ident="simple:left">
                      <?exactMatch left?>
                      <desc>aligned to the left or left-justified</desc>
                    </valItem>
                    <valItem ident="simple:leftbraced">
                      <?exactMatch braced?>
                      <desc>marked with a brace on the left side of the text</desc>
                    </valItem>
                    <valItem ident="simple:letterspace">
                      <?exactMatch spaceletter?>
                      <desc>larger-than-normal spacing between letters, usually for emphasis</desc>
                    </valItem>
                    <valItem ident="simple:literal">
                      <desc>fixed-width typeface, spacing preserved</desc>
                    </valItem>
                    <valItem ident="simple:normalstyle">
                      <desc>upright shape and default weight of typeface</desc>
                    </valItem>
                    <valItem ident="simple:normalweight">
                      <?exactMatch roman?>
                      <desc>normal typeface weight</desc>
                    </valItem>
                    <valItem ident="simple:right">
                      <?exactMatch right-aligned?>
                      <desc>aligned to the right or right-justified</desc>
                    </valItem>
                    <valItem ident="simple:rightbraced">
                      <desc>marked with a brace to the right of the text</desc>
                    </valItem>
                    <valItem ident="simple:rotateleft">
                      <?exactMatch rotateCounterclockwise?>
                      <desc>rotated to the left</desc>
                    </valItem>
                    <valItem ident="simple:rotateright">
                      <?exactMatch rotateClockwise?>
                      <desc>rotated to the right</desc>
                    </valItem>
                    <valItem ident="simple:smallcaps">
                      <?exactMatch sc?>
                      <?exactMatch smallCap?>
                      <desc>small caps</desc>
                    </valItem>
                    <valItem ident="simple:smaller">
                      <?exactMatch small?>
                      <desc>smaller type</desc>
                    </valItem>
                    <valItem ident="simple:strikethrough">
                      <desc>strike through</desc>
                    </valItem>
                    <valItem ident="simple:subscript">
                      <?exactMatch sub?>
                      <desc>subscript</desc>
                    </valItem>
                    <valItem ident="simple:superscript">
                      <?exactMatch sup?>
                      <?exactMatch super?>
                      <desc>superscript</desc>
                    </valItem>
                    <valItem ident="simple:topbraced">
                      <desc>marked with a brace above the text</desc>
                    </valItem>
                    <valItem ident="simple:typewriter">
                      <desc>fixed-width typeface, like typewriter</desc>
                    </valItem>
                    <valItem ident="simple:underline">
                      <?exactMatch u?>
                      <desc>underlined with single line</desc>
                    </valItem>
                    <valItem ident="simple:wavyunderline">
                      <desc>underlined with wavy line</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </classSpec>
          </specGrp>
        </div>
        <div>
          <head>Model classes</head>
          <specGrp xml:id="modelclasses">
            <p>A set of unused model classes are removed.</p>
            <classSpec type="model" ident="model.entryPart" mode="delete"/>
            <classSpec type="model" ident="model.placeNamePart" mode="delete"/>
            <classSpec type="model" ident="model.placeStateLike" mode="delete"/>
            <classSpec type="model" ident="model.egLike" mode="delete"/>
            <classSpec type="model" ident="model.offsetLike" mode="delete"/>
            <classSpec type="model" ident="model.pPart.msdesc" mode="delete"/>
            <classSpec type="model" ident="model.oddDecl" mode="delete"/>
            <classSpec type="model" ident="model.specDescLike" mode="delete"/>
            <classSpec type="model" ident="model.entryPart" mode="delete"/>
            <classSpec type="model" ident="model.placeNamePart" mode="delete"/>
            <classSpec type="model" ident="model.placeStateLike" mode="delete"/>
            <classSpec type="model" ident="model.certLike" mode="delete"/>
            <classSpec type="model" ident="model.glossLike" mode="delete"/>
          </specGrp>
        </div>
        <div>
          <head>Elements</head>
          <p>The main part of Simple is the set of selected elements.</p>
          <include xmlns="http://www.w3.org/2001/XInclude" href="simpleelements.xml"/>
          <specGrp xmlns="http://www.tei-c.org/ns/1.0" xmlns:XSL="http://www.w3.org/1999/XSL/Transform"
            xml:id="simpleelementspm">
            <elementSpec ident="ab" mode="change" >
              <model behaviour="paragraph"/>
            </elementSpec>
            <elementSpec ident="abbr" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="actor" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="add" mode="change" >
              <model behaviour="inline">
                <outputRendition>color: green; text-decoration: underline;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="address" mode="change" >
              <model behaviour="block">
                <outputRendition>margin-top: 2em; margin-left: 2em; margin-right: 2em; margin-bottom:
                  2em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="addrLine" mode="change" >
              <model behaviour="block">
                <outputRendition>white-space: nowrap;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="addSpan" mode="change" >
              <model behaviour="anchor">
                <param name="id">@xml:id</param>
              </model>
            </elementSpec>
            <elementSpec  ident="am" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="anchor" mode="change" >
              <model behaviour="anchor">
                <param name="id">@xml:id</param>
              </model>
            </elementSpec>
            <elementSpec ident="argument" mode="change" >
              <model behaviour="block">
                <outputRendition>margin-bottom: 0.5em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec  ident="author" mode="change"   >
              <model predicate="ancestor::teiHeader" behaviour="omit"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="back" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="bibl" mode="change" >
              <constraintSpec mode="add" ident="noEmptyBibl" scheme="isoschematron">
                <constraint>
                  <assert xmlns="http://purl.oclc.org/dsdl/schematron"
                    test="child::* or child::text()[normalize-space()]" role="ERROR"> Element "<name/>" may not be
                    empty. </assert>
                </constraint>
              </constraintSpec>
              <model predicate="parent::listBibl" behaviour="listItem"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="body" mode="change" >
              <modelSequence>
                <model behaviour="index">
                  <param name="type">'toc'</param>
                </model>
                <model behaviour="block"/>
              </modelSequence>
            </elementSpec>
            <elementSpec ident="byline" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec  ident="c" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="castGroup" mode="change" >
              <model predicate="child::*" behaviour="list">
                <desc>Insert list. </desc>
                <param name="content">castItem|castGroup</param>
              </model>
            </elementSpec>
            <elementSpec ident="castItem" mode="change" >
              <model behaviour="listItem">
                <desc>Insert item, rendered as described in parent list rendition. </desc>
              </model>
            </elementSpec>
            <elementSpec ident="castList" mode="change" >
              <model predicate="child::*" behaviour="list" useSourceRendition="true">
                <param name="content">castItem</param>
                <outputRendition>list-style: ordered;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="cb" mode="change" >
              <model behaviour="break">
                <param name="type">'column'</param>
                <param name="label">@n</param>
              </model>
            </elementSpec>
            <elementSpec ident="cell" mode="change" >
              <model behaviour="cell">
                <desc>Insert table cell. </desc>
              </model>
            </elementSpec>
            <elementSpec ident="choice" mode="change" >
              <constraintSpec ident="choiceSize" scheme="isoschematron" mode="add">
                <constraint>
                  <assert xmlns="http://purl.oclc.org/dsdl/schematron" test="count(*) &gt; 1" role="ERROR"> Element
                    "<name/>" must have at least two child elements.</assert>
                </constraint>
              </constraintSpec>
              <constraintSpec ident="choiceContent" scheme="isoschematron" mode="add">
                <constraint>
                  <assert xmlns="http://purl.oclc.org/dsdl/schematron"
                    test="(tei:corr or tei:sic or tei:expan or     tei:abbr or tei:reg or tei:orig) and ((tei:corr and tei:sic) or (tei:expan     and tei:abbr) or (tei:reg and tei:orig))"
                    role="ERROR"> Element "<name/>" must have corresponding corr/sic, expand/abbr, reg/orig </assert>
                </constraint>
              </constraintSpec>
              <model output="plain" predicate="sic and corr" behaviour="inline">
                <param name="content">corr[1]</param>
              </model>
              <model output="plain" predicate="abbr and expan" behaviour="inline">
                <param name="content">expan[1]</param>
              </model>
              <model output="plain" predicate="orig and reg" behaviour="inline">
                <param name="content">reg[1]</param>
              </model>
              <model predicate="sic and corr" behaviour="alternate">
                <param name="default">corr[1]</param>
                <param name="alternate">sic[1]</param>
              </model>
              <model predicate="abbr and expan" behaviour="alternate">
                <param name="default">expan[1]</param>
                <param name="alternate">abbr[1]</param>
              </model>
              <model predicate="orig and reg" behaviour="alternate">
                <param name="default">reg[1]</param>
                <param name="alternate">orig[1]</param>
              </model>
            </elementSpec>
            <elementSpec ident="cit" mode="change" >
              <model predicate="child::quote and child::bibl" behaviour="cit">
                <desc>Insert citation </desc>
              </model>
            </elementSpec>
            <elementSpec ident="closer" mode="change" >
              <model behaviour="block">
                <outputRendition>margin-top: 1em; margin-left: 1em; margin-left: 1em;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="corr" mode="change" >
              <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline">
                <desc>simple inline, if in parent choice. </desc>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content: '[';</outputRendition>
                <outputRendition scope="after">content: ']';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="date" mode="change" >
              <model output="print" predicate="text()" behaviour="inline"/>
              <model output="print" predicate="@when and not(text())" behaviour="inline">
                <param name="content">@when</param>
              </model>
              <model output="web" predicate="@when" behaviour="alternate">
                <param name="default">.</param>
                <param name="alternate">@when</param>
              </model>
              <model predicate="text()" behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="dateline" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="del" mode="change" >
              <model behaviour="inline">
                <outputRendition> text-decoration: line-through;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="desc" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="div" mode="change" >
              <model predicate="@type='title_page'" behaviour="block">
                <outputRendition>border: 1px solid black; padding: 5px;</outputRendition>
              </model>
              <model behaviour="section" predicate="parent::body or parent::front or parent::back"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="docAuthor" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="docDate" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="docEdition" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="docImprint" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="docTitle" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
              <model behaviour="block" useSourceRendition="true">
                <outputRendition>font-size: larger;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="epigraph" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="ex" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="expan" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="figDesc" mode="change" >
              <model behaviour="inline">
                <outputRendition scope="before">content: '[..';</outputRendition>
                <outputRendition scope="after">content: '..]';</outputRendition>
                <outputRendition>color: grey;font-style:italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="figure" mode="change" >
              <model predicate="head or @rendition='simple:display'" behaviour="block"/>
              <model behaviour="inline">
                <outputRendition> display: block; border-top: solid 1pt blue; border-bottom: solid 1pt blue;
                </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="floatingText" mode="change" >
              <model behaviour="block">
                <outputRendition> margin: 6pt; border: solid black 1pt; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="foreign" mode="change" >
              <model behaviour="inline">
                <outputRendition>font-style:italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="formula" mode="change" >
              <model predicate="@rendition='simple:display'" behaviour="block"/>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="front" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="fw" mode="change" >
              <model predicate="ancestor::p or ancestor::ab" behaviour="inline"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="g" mode="change" >
              <model predicate="not(text())" behaviour="glyph">
                <param name="uri">@ref</param>
              </model>
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="gap" mode="change" >
              <model predicate="desc" behaviour="inline">
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model predicate="@extent" behaviour="inline">
                <param name="content">@extent</param>
                <outputRendition scope="before">content: '[..';</outputRendition>
                <outputRendition scope="after">content: '..]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content: '[...]';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="graphic" mode="change" >
              <model behaviour="graphic">
                <param name="url">@url</param>
                <param name="width">@width</param>
                <param name="height">@height</param>
                <param name="scale">@scale</param>
                <param name="title">desc</param>
              </model>
            </elementSpec>
            <elementSpec ident="group" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="handShift" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="head" mode="change" >
              <model predicate="parent::figure" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::table" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::lg" behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="parent::list" behaviour="block">
                <outputRendition>font-weight: bold;</outputRendition>
              </model>
              <model predicate="parent::div" behaviour="heading">
                <param name="level">count(ancestor::div)</param>
              </model>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="hi" mode="change" >
              <model predicate="@rendition" behaviour="inline" useSourceRendition="true">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
              <model predicate="not(@rendition)" behaviour="inline">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="imprimatur" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="item" mode="change" >
              <model behaviour="listItem"/>
            </elementSpec>
            <elementSpec ident="l" mode="change" >
              <model behaviour="block" useSourceRendition="true">
                <outputRendition> margin-left: 1em; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="label" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="lb"  mode="change" >
              <model behaviour="break" useSourceRendition="true">
                <param name="type">'line'</param>
                <param name="label">@n</param>
              </model>
            </elementSpec>
            <elementSpec ident="lg" mode="change">
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="list" mode="change" >
              <model predicate="@rendition" behaviour="list" useSourceRendition="true">
                <param name="content">item</param>
              </model>
              <model predicate="not(@rendition)" behaviour="list">
                <param name="content">item</param>
              </model>
            </elementSpec>
            <elementSpec ident="listBibl" mode="change" >
              <model predicate="bibl" behaviour="list">
                <param name="content">bibl</param>
              </model>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="measure" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="milestone" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="name" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="note" mode="change" >
              <model predicate="@place" behaviour="note">
                <param name="place">@place</param>
                <param name="label">@n</param>
              </model>
              <model predicate="parent::div and not(@place)" behaviour="block">
                <outputRendition>margin-left: 10px;margin-right: 10px; font-size:smaller;</outputRendition>
              </model>
              <model predicate="not(@place)" behaviour="inline">
                <outputRendition scope="before">content:" [";</outputRendition>
                <outputRendition scope="after">content:"] ";</outputRendition>
                <outputRendition>font-size:small;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="num" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="opener" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="orig" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="p" mode="change" >
              <model behaviour="paragraph" useSourceRendition="true">
                <outputRendition>text-align: justify;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="pb" mode="change" >
              <constraintSpec ident="pbposition" scheme="isoschematron">
                <constraint>
                  <report xmlns="http://purl.oclc.org/dsdl/schematron"
                    test="parent::*/text() and not           (preceding-sibling::text() and           following-sibling::text())"
                    >please make sure pb elements are not at the start or end of mixed content </report>
                </constraint>
              </constraintSpec>
              <model behaviour="break" useSourceRendition="true">
                <param name="type">'page'</param>
                <param name="label">(concat(if(@n) then concat(@n,' ') else '',if(@facs) then concat('@',@facs) else
                  ''))</param>
                <outputRendition> display: block; margin-left: 4pt; color: grey; float: right; </outputRendition>
                <outputRendition scope="before">content: '[Page ';</outputRendition>
                <outputRendition scope="after">content: ']';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="pc" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="postscript" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="publisher" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
            </elementSpec>
            <elementSpec  ident="pubPlace" mode="change" >
              <model predicate="ancestor::teiHeader" behaviour="omit">
                <desc>Omit if located in teiHeader. </desc>
              </model>
            </elementSpec>
            <elementSpec ident="q" mode="change" >
              <model predicate="l" behaviour="block" useSourceRendition="true">
                <outputRendition>margin-left: 10px; margin-right: 10px; </outputRendition>
              </model>
              <model predicate="ancestor::p or ancestor::cell" behaviour="inline" useSourceRendition="true">
                <outputRendition scope="before">content: '‘';</outputRendition>
                <outputRendition scope="after">content: '’';</outputRendition>
              </model>
              <model behaviour="block" useSourceRendition="true">
                <outputRendition>margin-left: 10px; margin-right: 10px; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="quote" mode="change" >
              <model predicate="ancestor::p" behaviour="inline" useSourceRendition="true">
                <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
                <outputRendition scope="before">content: '‘';</outputRendition>
                <outputRendition scope="after">content: '’';</outputRendition>
              </model>
              <model behaviour="block" useSourceRendition="true">
                <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
                <outputRendition>margin-left: 10px; margin-right: 10px; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="ref" mode="change" >
              <model behaviour="inline" predicate="not(@target)"/>
              <model predicate="not(text())" behaviour="link">
                <param name="content">@target</param>
                <param name="link">@target</param>
              </model>
              <model behaviour="link">
                <param name="link">@target</param>
              </model>
            </elementSpec>
            <elementSpec ident="reg" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="rhyme" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="role" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="roleDesc" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="row" mode="change" >
              <model predicate="@role='label'" behaviour="row">
                <outputRendition>font-weight: bold;</outputRendition>
              </model>
              <model behaviour="row">
                <desc>Insert table row. </desc>
              </model>
            </elementSpec>
            <elementSpec ident="rs" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="s" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="salute" mode="change" >
              <model predicate="parent::closer" behaviour="inline"/>
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="seg" mode="change" >
              <model behaviour="inline" useSourceRendition="true"/>
            </elementSpec>
            <elementSpec ident="sic" mode="change">
              <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline"/>
              <model behaviour="inline">
                <outputRendition scope="before">content: '{';</outputRendition>
                <outputRendition scope="after">content: '}';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="signed" mode="change" >
              <model behaviour="block" predicate="parent::closer">
                <outputRendition> text-align: right; </outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition> font-style: italic; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="sp" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="space" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="speaker" mode="change" >
              <model behaviour="block">
                <outputRendition> font-style:italic; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="spGrp" mode="change" >
              <model behaviour="block"/>
            </elementSpec>
            <elementSpec ident="stage" mode="change" >
              <model behaviour="block">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="subst" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="supplied" mode="change" >
              <model predicate="parent::choice" behaviour="inline"/>
              <model predicate="@reason='damage'" behaviour="inline">
                <outputRendition scope="before">content:"&lt;";</outputRendition>
                <outputRendition scope="after">content:"&gt;";</outputRendition>
              </model>
              <model predicate="@reason='illegible' or not(@reason)" behaviour="inline">
                <outputRendition scope="before">content:"[";</outputRendition>
                <outputRendition scope="after">content:"]";</outputRendition>
              </model>
              <model predicate="@reason='omitted'" behaviour="inline">
                <outputRendition scope="before">content:"(";</outputRendition>
                <outputRendition scope="after">content:")";</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content:"{";</outputRendition>
                <outputRendition scope="after">content:"}";</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="table" mode="change" >
              <model behaviour="table">
                <outputRendition> font-size: smaller; background-color: #F0F0F0; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="fileDesc" mode="change" >
              <model behaviour="title">
                <param name="content">titleStmt</param>
              </model>
            </elementSpec>
            <elementSpec ident="profileDesc" mode="change" >
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec ident="revisionDesc" mode="change" >
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec ident="encodingDesc" mode="change" >
              <model behaviour="omit"/>
            </elementSpec>
            <elementSpec ident="teiHeader" mode="change" >
              <model behaviour="metadata"/>
            </elementSpec>
            <elementSpec ident="TEI" mode="change" >
              <model behaviour="document"/>
            </elementSpec>
            <elementSpec  ident="text" mode="change" >
              <model behaviour="body">
                <outputRendition> max-width: 80%; margin: auto; font-family: Verdana, Tahoma, Geneva, Arial, Helvetica,
                  sans-serif; </outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="time" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="title" mode="change" >
              <modelSequence predicate="parent::titleStmt/parent::fileDesc">
                <model predicate="preceding-sibling::title" behaviour="text">
                  <param name="content">' — '</param>
                </model>
                <model behaviour="inline">
                  <outputRendition>color: red; font-size: 2em;</outputRendition>
                </model>
              </modelSequence>
              <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
              <modelSequence predicate="@level='m' or not(@level)">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="ancestor::biblStruct or       ancestor::biblFull" behaviour="text">
                  <param name="content">', '</param>
                </model>
              </modelSequence>
              <modelSequence predicate="@level='s' or @level='j'">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="following-sibling::* and     (ancestor::biblStruct  or     ancestor::biblFull)"
                  behaviour="text">
                  <param name="content">', '</param>
                </model>
              </modelSequence>
              <modelSequence predicate="@level='u' or @level='a'">
                <model behaviour="inline">
                  <outputRendition>font-style: italic;</outputRendition>
                </model>
                <model predicate="following-sibling::* and     (ancestor::biblStruct  or     ancestor::biblFull)"
                  behaviour="text">
                  <param name="content">'. '</param>
                </model>
              </modelSequence>
              <model behaviour="inline">
                <outputRendition>font-style: italic;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="titlePage" mode="change" >
              <model behaviour="block" useSourceRendition="true">
                <outputRendition> text-align: center;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="titlePart" mode="change" >
              <model behaviour="block" useSourceRendition="true"/>
            </elementSpec>
            <elementSpec ident="trailer" mode="change" >
              <model behaviour="block">
                <outputRendition>color: green;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="unclear" mode="change" >
              <model behaviour="inline">
                <outputRendition scope="after">content: ' [?] ';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="w" mode="change" >
              <model behaviour="inline"/>
            </elementSpec>
          </specGrp>
          <specGrp xml:id="simplechanges">
            <p>A small number of elements have constrained value lists added.</p>
            <elementSpec ident="formula" mode="change">
              <attList>
                <attDef ident="notation" mode="change">
                  <valList mode="add" type="semi">
                    <valItem ident="TeX">
                      <desc>Using TeX or LaTeX notation</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </elementSpec>
            <elementSpec ident="name" mode="change">
              <attList>
                <attDef ident="type" mode="change">
                  <valList mode="add" type="closed">
                    <valItem ident="person"/>
                    <valItem ident="forename"/>
                    <valItem ident="surname"/>
                    <valItem ident="personGenName"/>
                    <valItem ident="personRoleName"/>
                    <valItem ident="personAddName"/>
                    <valItem ident="nameLink"/>
                    <valItem ident="org"/>
                    <valItem ident="country"/>
                    <valItem ident="placeGeog"/>
                    <valItem ident="place"/>
                  </valList>
                </attDef>
              </attList>
            </elementSpec>
            <elementSpec ident="cell" mode="change">
              <attList>
                <attDef ident="role" mode="change">
                  <valList mode="add" type="closed">
                    <valItem ident="data">
                      <desc>data cell</desc>
                    </valItem>
                    <valItem ident="label">
                      <desc>label cell</desc>
                      <?exactMatch LABEL?>
                    </valItem>
                    <valItem ident="sum">
                      <desc>row or column sum data</desc>
                    </valItem>
                    <valItem ident="total">
                      <desc>table total data</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </elementSpec>
            <elementSpec ident="row" mode="change">
              <attList>
                <attDef ident="role" mode="change">
                  <valList mode="add" type="closed">
                    <valItem ident="data">
                      <desc>data cell</desc>
                    </valItem>
                    <valItem ident="label">
                      <desc>label cell</desc>
                    </valItem>
                    <valItem ident="sum">
                      <desc>row or column sum data</desc>
                    </valItem>
                    <valItem ident="total">
                      <desc>table total data</desc>
                    </valItem>
                  </valList>
                </attDef>
              </attList>
            </elementSpec>
          </specGrp>
          <specGrp xml:id="rendition">
            <outputRendition xml:id="allcaps">text-transform: uppercase;</outputRendition>
            <outputRendition xml:id="blackletter">font-family: fantasy;</outputRendition>
            <outputRendition xml:id="bold">font-weight: bold;</outputRendition>
            <outputRendition xml:id="bottombraced">padding-bottom: 2pt; border-bottom: dashed gray
              2pt;</outputRendition>
            <outputRendition xml:id="block">display:block;</outputRendition>
            <outputRendition xml:id="boxed">padding: 2pt; border: solid black 1pt;</outputRendition>
            <outputRendition xml:id="centre">text-align: center;</outputRendition>
            <outputRendition xml:id="cursive">font-family: cursive;</outputRendition>
            <outputRendition xml:id="doublestrikethrough">text-decoration: line-through; color: red;</outputRendition>
            <outputRendition xml:id="doubleunderline">text-decoration: underline; color: red;</outputRendition>
            <outputRendition xml:id="dropcap">font-size : 6em; font-family: cursive; font-weight : bold; vertical-align:
              top; height: 1em; line-height: 1em; float : left; width : 1em; color : #c00; margin: 0em; padding:
              0px;</outputRendition>
            <outputRendition xml:id="float">float:right; display: block; font-size: smaller; clear: right; padding: 4pt;
              width: 15%; </outputRendition>
            <outputRendition xml:id="hyphen"/>
            <outputRendition xml:id="inline">display:inline;</outputRendition>
            <outputRendition xml:id="italic">font-style: italic;</outputRendition>
            <outputRendition xml:id="justify">text-align: justify;</outputRendition>
            <outputRendition xml:id="larger">font-size: larger;</outputRendition>
            <outputRendition xml:id="left">text-align: left;</outputRendition>
            <outputRendition xml:id="leftbraced">padding-left: 2pt; border-left: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="letterspace">letter-spacing: 0.5em;</outputRendition>
            <outputRendition xml:id="literal">font-family:monospace; white-space:pre;</outputRendition>
            <outputRendition xml:id="normalstyle">font-style:roman;</outputRendition>
            <outputRendition xml:id="normalweight">font-weight:normal;</outputRendition>
            <outputRendition xml:id="right">text-align: right;</outputRendition>
            <outputRendition xml:id="rightbraced">padding-right: 2pt; border-right: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="rotateleft">-webkit-transform: rotate(90deg); transform:
              rotate(90deg);</outputRendition>
            <outputRendition xml:id="rotateright">-webkit-transform: rotate(-90deg); transform:
              rotate(-90deg);</outputRendition>
            <outputRendition xml:id="rules">border: 1px solid black; padding:
              2px;border-collapse:collapse;border-spacing:0;</outputRendition>
            <outputRendition xml:id="smallcaps">font-variant: small-caps;</outputRendition>
            <outputRendition xml:id="smaller">font-size: smaller;</outputRendition>
            <outputRendition xml:id="strikethrough">text-decoration: line-through;</outputRendition>
            <outputRendition xml:id="subscript">vertical-align: bottom; font-size: smaller;</outputRendition>
            <outputRendition xml:id="superscript">vertical-align: super; font-size: smaller;</outputRendition>
            <outputRendition xml:id="topbraced">padding-top: 2pt; border-top: dotted gray 2pt; </outputRendition>
            <outputRendition xml:id="typewriter">font-family:monospace;</outputRendition>
            <outputRendition xml:id="underline">text-decoration: underline;</outputRendition>
            <outputRendition xml:id="wavyunderline">text-decoration: underline; text-decoration-style:
              wavy;</outputRendition>
          </specGrp>
        </div>
      </div>
    </body>
  </text>
</TEI>
