<?xml version="1.0" encoding="UTF-8"?>
<?xml-model
  href="tei-pm.nvdl"
  type="application/xml"
  schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<specGrp xmlns="http://www.tei-c.org/ns/1.0" xmlns:XSL="http://www.w3.org/1999/XSL/Transform"
   xml:id="simpleelementspm">
   <elementSpec mode="change" ident="ab">
      <model behaviour="makeParagraph(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="abbr">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <rendition>display: none;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="actor">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="add">
      <model behaviour="makeInline(.)">
         <rendition>color: green; text-decoration: underline;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="address">
      <model behaviour="makeBlock(.)">
         <rendition>margin-top: 2em; margin-left: 2em; margin-right: 2em; margin-bottom:
            2em;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="addrLine">
      <model behaviour="makeBlock(.)">
         <rendition>white-space: nowrap;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="addSpan">
      <model behaviour="makeSpan(.)">
         <desc>Insert as span. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="am">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="anchor">
      <model behaviour="unknown(.)">
         <rendition>display: none;</rendition>
         <desc>Pithy description of unknown behaviour. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="argument">
      <model behaviour="makeBlock(.)">
         <rendition>margin-bottom: 0.5em;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="author">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="back">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="bibl">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="body">
      <model behaviour="makeBody(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="byline">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="c">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="castGroup">
      <model predicate="child::*" behaviour="makeList(.)">
         <desc>Insert list. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="castItem">
      <model predicate="parent::list[@rendition]"
         behaviour="makeListItem(., parent::list[@rendition])">
         <desc>Insert item, rendered as described in parent list @rendition, or as default bulleted.
         </desc>
      </model>
      <model predicate="not(parent::list[@rendition])"
         behaviour="makeListItem(., 'simple:bulleted')"/>
   </elementSpec>
   <elementSpec mode="change" ident="castList">
      <model predicate="child::*" behaviour="makeList(.)">
         <desc>Insert list. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="cb">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="cell">
      <model behaviour="makeCell(.)">
         <desc>Insert cell. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="choice">
      <model predicate="count(child::*) gt 1" behaviour="makeChoice(.)">
         <desc>Insert choice. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="cit">
      <model predicate="child::quote and child::bibl" behaviour="makeCit(.)">
         <desc>Insert cit. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="closer">
      <model predicate="child::*" behaviour="makeCloser(.)">
         <desc>Insert closer. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="corr">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="date">
      <model behaviour="makeDate(.)">
         <desc>Insert date. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="dateline">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="del">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="desc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="div">
      <model behaviour="makeBlock(.)">
         <desc>Insert div as a block. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docAuthor">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docDate">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docEdition">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docImprint">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docTitle">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="epigraph">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="ex">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="expan">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)"/>
   </elementSpec>
   <elementSpec mode="change" ident="figDesc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="figure">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="floatingText">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="foreign">
      <model behaviour="makeInline(.)" class="italic">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="formula">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="front">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="fw">
      <model predicate="descendant::p or descendant::ab" behaviour="makeInline(.)">
         <desc/>
      </model>
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="g">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="gap">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="graphic">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="group">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="handShift">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="head">
      <model predicate="parent::div[not(@type)]" behaviour="makeHeader(.)">
         <desc>@Type on a parent div should carry the information about what kind of header is this
            and </desc>
      </model>
      <model predicate="parent::div[@type]" behaviour="makeHeader(.,@type)">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::lg" behaviour="makeHeader(.,'verse')">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::list" behaviour="makeHeader(.,'list')">
         <desc>Insert as header.</desc>
      </model>
      <model behaviour="makeHeader(.)">
         <desc>Insert as header.</desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="hi">
      <model predicate="@rendition" behaviour="makeInline(.)" class="italic">
         <desc>Pithy description. </desc>
      </model>
      <model predicate="not(@rendition)" behaviour="makeInline(.)" class="italic">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="imprimatur">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="item">
      <model predicate="parent::list[@rendition]"
         behaviour="makeListItem(., parent::list[@rendition])">
         <desc>Pithy description. </desc>
      </model>
      <model predicate="not(parent::list[@rendition])"
         behaviour="makeListItem(., 'simple:bulleted')">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="l">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="label">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="lb">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="lg">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="list">
      <model predicate="@rendition" behaviour="makeList(.,@rendition)">
         <desc>Pithy description. </desc>
      </model>
      <model predicate="not(@rendition)" behaviour="makeList(.,'simple:bulleted')">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="listBibl">
      <model behaviour="makeList(.)">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="measure">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="milestone">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="name">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="note">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="num">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="opener">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="orig">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="p">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="pb">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="pc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="postscript">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="publisher">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="pubPlace">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="q">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="quote">
      <model predicate="ancestor::p" behaviour="makeInline(.)">
         <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
      </model>
      <model predicate="not(ancestor::p)" behaviour="makeBlock(.)">
         <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="ref">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="reg">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice.</desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="role">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="roleDesc">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="row">
      <model behaviour="makeRow(.)">
         <desc>Insert cell. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="rs">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="s">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="salute">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="seg">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec ident="sic" mode="change">
      <modelGrp>
         <rendition>font-size: large</rendition>
         <model behaviour="makeInline(.)">
            <rendition>font-weight: normal</rendition>
            <desc/>
         </model>
         <model predicate="parent::div" behaviour="makeBlock(.)">
            <rendition>font-size: small</rendition>
            <desc/>
         </model>
      </modelGrp>
   </elementSpec>

   <elementSpec mode="change" ident="signed">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice.</desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="sp">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="space">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="speaker">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="spGrp">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="stage">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="subst">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="supplied">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="table">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="TEI">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="teiCorpus">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="text">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="time">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="title">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="titlePage">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="titlePart">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="trailer">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="unclear">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="w">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
</specGrp>
