<?xml version="1.0" encoding="UTF-8"?>
<?xml-model
  href="tei-pm.nvdl"
  type="application/xml"
  schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<specGrp xmlns="http://www.tei-c.org/ns/1.0" xmlns:XSL="http://www.w3.org/1999/XSL/Transform"
   xml:id="simpleelementspm">
   <elementSpec mode="change" ident="ab">
      <model behaviour="makeParagraph(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="abbr">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)"/>
      <model behaviour="makeInline(.)"/>
   </elementSpec>
   <elementSpec mode="change" ident="actor">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="add">
      <model behaviour="makeInline(.)">
         <rendition>color: green; text-decoration: underline;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="address">
      <model behaviour="makeBlock(.)">
         <rendition>margin-top: 2em; margin-left: 2em; margin-right: 2em; margin-bottom:
            2em;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="addrLine">
      <model behaviour="makeBlock(.)">
         <rendition>white-space: nowrap;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="addSpan">
      <model behaviour="makeAnchor(@xml:id)"/>
   </elementSpec>

   <elementSpec mode="change" ident="am">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="anchor">
      <model behaviour="makeAnchor(@xml:id)"/>
   </elementSpec>

   <elementSpec mode="change" ident="argument">
      <model behaviour="makeBlock(.)">
         <rendition>margin-bottom: 0.5em;</rendition>
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="author">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="back">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="bibl">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="body">
      <model behaviour="makeTOC(.)"/>
      <model behaviour="makeBody(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="byline">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="c">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="castGroup">
      <model predicate="child::*" behaviour="makeList(.)">
         <desc>Insert list. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="castItem">
      <model behaviour="makeListItem(.)">
         <desc>Insert item, rendered as described in parent list rendition. </desc>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="castList">
      <model predicate="child::*" behaviour="makeList(.)" useSourceRendition="true">
         <rendition>list-style: ordered;</rendition>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="cb">
      <model behaviour="showBreak('column')"/>
   </elementSpec>
   <elementSpec mode="change" ident="cell">
      <model behaviour="makeCell(.)">
         <desc>Insert table cell. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="choice">
     <model predicate="sic and corr" behaviour="makeAlternate(corr[1],sic[1])"/>
     <model predicate="abbr and expan" behaviour="makeAlternate(expan[1],abbr[1])"/>
     <model predicate="orig and reg" behaviour="makeAlternate(reg[1],orig[1])"/>
   </elementSpec>
   <elementSpec mode="change" ident="cit">
      <model predicate="child::quote and child::bibl" behaviour="makeCit(.)">
         <desc>Insert cit. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="closer">
      <model predicate="child::*" behaviour="makeBlock(.)">
	<rendition>margin-top: 1em; margin-left: 1em; margin-left: 1em;</rendition>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="corr">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice. </desc>
      </model>
      <model behaviour="makeInline(.)"/>

   </elementSpec>
   <elementSpec mode="change" ident="date">
     <model output="print" predicate="text()" behaviour="makeInline(.)"/>
     <model output="print" predicate="@when and not(text())" behaviour="makeInline(@when)"/>
     <model predicate="@when" output="web" behaviour="makeAlternate(.,@when)"/>
   </elementSpec>
   <elementSpec mode="change" ident="dateline">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="del">
      <model behaviour="makeInline(.)">
	<rendition>   text-decoration: line-through;</rendition>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="desc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="div">
      <model behaviour="makeSection(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="docAuthor">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docDate">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docEdition">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="docImprint">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="docTitle">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>

      <model predicate="not(ancestor::teiHeader)" behaviour="makeBlock(.)">
         <rendition>font-size: large;</rendition>
      </model>

   </elementSpec>


   <elementSpec mode="change" ident="epigraph">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="ex">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="expan">
      <model predicate="parent::choice and count(parent::*/*) gt 1"
	     behaviour="omit(.)"/>
      <model behaviour="makeInline(.)"/>

   </elementSpec>
   <elementSpec mode="change" ident="figDesc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="figure">
      <model predicate="head or @rendition='simple:display'" behaviour="makeBlock(.)"/>
      <model behaviour="makeInline(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="floatingText">
      <model behaviour="makeBlock(.)">
	<rendition>
	  margin: 6pt;
	  border: solid black 1pt;
	</rendition>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="foreign">
      <model behaviour="makeInline(.)" >
         <rendition>font-style:italic;</rendition>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="formula">
      <model predicate="@rendition='simple:display'" behaviour="makeBlock(.)"/>
      <model behaviour="makeInline(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="front">
      <model behaviour="makeBlock(.)">
         <rendition>border: 1px solid red;</rendition>
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="fw">
      <model predicate="ancestor::p or ancestor::ab" behaviour="makeInline(.)">
         <desc/>
      </model>
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="g">
      <model predicate="not(text())" behaviour="makeGlyph(@ref)"/>
      <model behaviour="makeInline(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="gap">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="graphic">
      <model behaviour="makeGraphic(@url)"/>
   </elementSpec>
   <elementSpec mode="change" ident="group">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="handShift">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="head">
      <model predicate="parent::div/parent::body and parent::div[not(@type)]"
         behaviour="makeHeading(.)">
         <desc>@type on a parent div maycarry the information about what kind of header is
            this</desc>
      </model>
      <model predicate="parent::div[@type]" behaviour="makeHeading(.,@type)">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::figure" behaviour="makeHeading(.,'figure')">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::table" behaviour="makeHeading(.,'table')">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::lg" behaviour="makeHeading(.,'verse')">
         <desc>Insert as header.</desc>
      </model>
      <model predicate="parent::list" behaviour="makeHeading(.,'list')">
         <desc>Insert as header.</desc>
      </model>
      <model behaviour="makeHeading(.)">
         <desc>Insert as header.</desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="hi">
      <model predicate="@rendition" behaviour="makeInline(.)"  useSourceRendition="true">
	<rendition>font-style: italic;</rendition>
      </model>
      <model predicate="not(@rendition)" behaviour="makeInline(.)">
	<rendition>font-style: italic;</rendition>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="imprimatur">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="item">
      <model predicate="parent::list[@rendition]"
         behaviour="makeListItem(., parent::list[@rendition])">
         <desc>Pithy description. </desc>
      </model>
      <model predicate="not(parent::list[@rendition])"
         behaviour="makeListItem(., 'simple:bulleted')">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="l">
      <model behaviour="makeBlock(.)" useSourceRendition="true">
         <rendition> margin-left: 1em; </rendition>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="label">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="lb">
      <model behaviour="showBreak('line')"/>
   </elementSpec>
   <elementSpec mode="change" ident="lg">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="list">
      <model predicate="@rendition" behaviour="makeList(.,@rendition)">
         <desc>Pithy description. </desc>
      </model>
      <model predicate="not(@rendition)" behaviour="makeList(.,'simple:bulleted')">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="listBibl">
      <model behaviour="makeList(.)">
         <desc>Pithy description. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="measure">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="milestone">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="name">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="note">

      <model predicate="@place" behaviour="makeNote(.,@place)"/>

      <model predicate="parent::div and not(@place)" behaviour="makeBlock(.)">
         <rendition>margin-left: 10px;margin-right: 10px; font-size:smaller;</rendition>
      </model>

      <model predicate="not(@place)" behaviour="makeInline(.)">
         <rendition scope="before">content:' [';</rendition>
         <rendition scope="after">content:'] ';</rendition>
         <rendition>font-size:small;</rendition>
      </model>

   </elementSpec>

   <elementSpec mode="change" ident="num">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="opener">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="orig">
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice. </desc>
      </model>
      <model behaviour="makeInline(.)"/>
   </elementSpec>

   <elementSpec mode="change" ident="p" >
      <model behaviour="makeParagraph(.)"  useSourceRendition="true"/>
   </elementSpec>

   <elementSpec mode="change" ident="pb">
      <model behaviour="makeInline(@n)">
	<rendition>
	  display: block;
	  color: grey;
	  float: right;
	</rendition>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="pc">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="postscript">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="publisher">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="pubPlace">
      <model predicate="ancestor::teiHeader" behaviour="omit(.)">
         <desc>Omit if located in teiHeader. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="q">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="quote">
      <model predicate="ancestor::p" behaviour="makeInline(.)">
         <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
      </model>
      <model predicate="not(ancestor::p)" behaviour="makeBlock(.)">
         <desc>If it is inside a paragraph then it is inline, otherwise it is block level</desc>
      </model>
   </elementSpec>

   <elementSpec mode="change" ident="ref">
      <model behaviour="makeInline(.)" predicate="not(@target)"/>
      <model predicate="not(text())" behaviour="makeLink(@target,@target)"/>
      <model behaviour="makeLink(.,@target)"/>
   </elementSpec>

   <elementSpec mode="change" ident="reg">
      <model predicate="not(parent::choice)" behaviour="makeInline(.)"/>
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice.</desc>
      </model>
      <model behaviour="makeInline(.)"/>

   </elementSpec>
   <elementSpec mode="change" ident="rhyme">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="role">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="roleDesc">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="row">
      <model behaviour="makeRow(.)">
         <desc>Insert table row. </desc>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="rs">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="s">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="salute">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="seg">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>

   <elementSpec ident="sic" mode="change">
      <modelGrp>
         <rendition>font-size: large</rendition>
         <model behaviour="makeInline(.)">
            <rendition>font-weight: normal;</rendition>
            <desc/>
         </model>
         <model predicate="parent::div" behaviour="makeBlock(.)">
            <rendition>font-size: small;</rendition>
            <desc/>
         </model>
      </modelGrp>
   </elementSpec>

   <elementSpec mode="change" ident="signed">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
      <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="omit(.)">
         <desc>Omit, if handled in parent choice.</desc>
      </model>
      <model behaviour="makeInline(.)"/>

   </elementSpec>
   <elementSpec mode="change" ident="sp">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="space">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="speaker">
      <model behaviour="makeBlock(.)">
         <rendition> font-style:italic; </rendition>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="spGrp">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="stage">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="subst">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="supplied">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="table">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="TEI">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="teiCorpus">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="text">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="time">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="title">
      <model behaviour="makeInline(.)">
         <rendition>color: red; font-size: 2em;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="titlePage">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="titlePart">
      <model behaviour="makeBlock(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="trailer">
      <model behaviour="makeBlock(.)">
         <rendition>color: green;</rendition>
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="unclear">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
   <elementSpec mode="change" ident="w">
      <model behaviour="makeInline(.)">
         <desc/>
      </model>
   </elementSpec>
</specGrp>
